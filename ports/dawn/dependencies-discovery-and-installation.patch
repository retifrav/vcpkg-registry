diff --git a/CMakeLists.txt b/CMakeLists.txt
index bfebca84d4..ec86980089 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -25,7 +25,7 @@
 # OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-cmake_minimum_required(VERSION 3.10.2)
+cmake_minimum_required(VERSION 3.22)
 
 # When upgrading to CMake 3.11 we can remove DAWN_PLACEHOLDER_FILE because source-less add_library
 # becomes available.
@@ -34,19 +34,18 @@ cmake_minimum_required(VERSION 3.10.2)
 # override options in third_party dependencies. We can also add the HOMEPAGE_URL
 # entry to the project `HOMEPAGE_URL "https://dawn.googlesource.com/dawn"`
 
-project(
-    Dawn
-    DESCRIPTION "Dawn, a WebGPU implementation"
+project("Dawn"
+    DESCRIPTION "WebGPU implementation"
     LANGUAGES C CXX
 )
-enable_testing()
+#enable_testing()
 
 set_property(GLOBAL PROPERTY USE_FOLDERS ON)
 
 set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 set(CMAKE_CXX_STANDARD 17)
-set(CMAKE_DEBUG_POSTFIX "")
+set(CMAKE_DEBUG_POSTFIX "d" CACHE STRING "Filename postfix for libraries under DEBUG configuration")
 set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
 
 if ("${CMAKE_BUILD_TYPE}" STREQUAL "")
@@ -60,12 +59,18 @@ set(DAWN_SRC_DIR "${Dawn_SOURCE_DIR}/src")
 set(DAWN_INCLUDE_DIR "${Dawn_SOURCE_DIR}/include")
 set(DAWN_TEMPLATE_DIR "${DAWN_GENERATOR_DIR}/templates")
 
+# some targets such as dawn_headers and dawncpp_headers require at least some
+# source file added to them, otherwise they fail to determine linker language,
+# and if you do `set_target_properties(dawn_headers PROPERTIES LINKER_LANGUAGE CXX)`,
+# then they fail to install with `cannot find "/path/to/build/src/dawn/dawn_headers.lib"`
 set(DAWN_PLACEHOLDER_FILE "${DAWN_SRC_DIR}/Placeholder.cpp")
 
 ################################################################################
 # Configuration options
 ################################################################################
 
+include(GNUInstallDirs)
+
 # option_if_not_defined(name description default)
 # Behaves like:
 #   option(name description default)
@@ -372,8 +377,11 @@ if (NOT ${TINT_LIB_FUZZING_ENGINE_LINK_OPTIONS} STREQUAL "")
   message(STATUS "Using provided LIB_FUZZING_ENGINE options: ${TINT_LIB_FUZZING_ENGINE_LINK_OPTIONS}")
 endif()
 
-message(STATUS "Using python3")
-find_package(PythonInterp 3 REQUIRED)
+if(NOT Python3_FOUND)
+    find_package(Python3 COMPONENTS Interpreter REQUIRED)
+    message(STATUS "Python found: ${Python3_FOUND}")
+    message(STATUS "Python path: ${Python3_EXECUTABLE}")
+endif()
 
 ################################################################################
 # common_compile_options - sets compiler and linker options common for dawn and
@@ -439,16 +447,21 @@ endif()
 
 # The public config contains only the include paths for the Dawn headers.
 add_library(dawn_public_config INTERFACE)
+add_library(dawn::public_config ALIAS dawn_public_config)
+set_property(TARGET dawn_public_config PROPERTY EXPORT_NAME public_config)
 target_include_directories(dawn_public_config INTERFACE
-    "${DAWN_INCLUDE_DIR}"
-    "${DAWN_BUILD_GEN_DIR}/include"
+    "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}>"
+    "$<BUILD_INTERFACE:${DAWN_BUILD_GEN_DIR}/include>"
+    "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>"
 )
 
-# The internal config conatins additional path but includes the dawn_public_config include paths
+# The internal config contains additional path but includes the dawn_public_config include paths
 add_library(dawn_internal_config INTERFACE)
+add_library(dawn::internal_config ALIAS dawn_internal_config)
+set_property(TARGET dawn_internal_config PROPERTY EXPORT_NAME internal_config)
 target_include_directories(dawn_internal_config INTERFACE
-    "${DAWN_SRC_DIR}"
-    "${DAWN_BUILD_GEN_DIR}/src"
+    "$<BUILD_INTERFACE:${DAWN_SRC_DIR}>"
+    "$<BUILD_INTERFACE:${DAWN_BUILD_GEN_DIR}/src>"
 )
 target_link_libraries(dawn_internal_config INTERFACE dawn_public_config)
 
@@ -576,7 +589,25 @@ if (EXISTS "${DAWN_PROTOBUF_DIR}/cmake")
   include("third_party/protobuf.cmake")
 endif()
 
-add_subdirectory(third_party)
+# don't vendor dependencies
+#add_subdirectory(third_party)
+
+function(add_includes_list HEADERS ROOT_DIR)
+    foreach(header ${HEADERS})
+        file(TO_CMAKE_PATH "${header}" FIXED_HEADER)
+        file(RELATIVE_PATH header_file_path "${ROOT_DIR}" "${FIXED_HEADER}")
+        get_filename_component(header_directory_path "${header_file_path}" DIRECTORY)
+        install(
+            FILES ${FIXED_HEADER}
+            DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${header_directory_path}"
+        )
+    endforeach()
+endfunction()
+
+function(add_includes_glob GLOB ROOT_DIR)
+    file(GLOB_RECURSE public_headers ${GLOB})
+    add_includes_list("${public_headers}" "${ROOT_DIR}")
+endfunction()
 
 # TODO(crbug.com/tint/455): Tint does not currently build with CMake when
 # BUILD_SHARED_LIBS=1, so always build it as static for now.
@@ -620,3 +651,201 @@ if (DAWN_EMIT_COVERAGE)
     VERBATIM)
 endif()
 
+# trying to figure out which targets are supposed to be installed
+#
+set(TINT_COMMON_TARGETS "")
+if(TINT_BUILD_MSL_WRITER
+    OR (TINT_BUILD_SPV_READER OR TINT_BUILD_SPV_WRITER)
+    # OR (TINT_BUILD_WGSL_READER OR TINT_BUILD_WGSL_WRITER)
+    # OR SOME_OTHER?
+)
+    list(APPEND TINT_COMMON_TARGETS
+        tint_lang_core_ir_transform
+    )
+endif()
+#
+set(TINT_GLSL_TARGETS "")
+if(TINT_BUILD_GLSL_WRITER)
+    list(APPEND TINT_GLSL_TARGETS
+        tint_lang_glsl_writer
+        tint_lang_glsl_writer_ast_printer
+        tint_lang_glsl_writer_ast_raise
+        tint_lang_glsl_writer_common
+        tint_lang_glsl_writer_printer
+        tint_lang_glsl_writer_raise
+    )
+endif()
+#
+set(TINT_HLSL_TARGETS "")
+if(TINT_BUILD_HLSL_WRITER)
+    list(APPEND TINT_HLSL_TARGETS
+        tint_lang_hlsl_writer
+        tint_lang_hlsl_writer_ast_printer
+        tint_lang_hlsl_writer_ast_raise
+    )
+endif()
+#
+set(TINT_MSL_TARGETS "")
+if(TINT_BUILD_MSL_WRITER)
+    list(APPEND TINT_MSL_TARGETS
+        tint_lang_msl
+        tint_lang_msl_intrinsic
+        tint_lang_msl_ir
+        tint_lang_msl_writer
+        tint_lang_msl_writer_ast_printer
+        tint_lang_msl_writer_ast_raise
+        tint_lang_msl_writer_common
+        tint_lang_msl_writer_printer
+        tint_lang_msl_writer_raise
+    )
+endif()
+#
+set(TINT_SPIRV_TARGETS "")
+if(TINT_BUILD_SPV_READER OR TINT_BUILD_SPV_WRITER)
+    list(APPEND TINT_SPIRV_TARGETS
+        tint_lang_spirv
+        tint_lang_spirv_intrinsic
+        tint_lang_spirv_ir
+        tint_lang_spirv_type
+        tint_lang_spirv_validate
+    )
+endif()
+if(TINT_BUILD_SPV_READER)
+    list(APPEND TINT_SPIRV_TARGETS
+        tint_lang_spirv_reader
+        tint_lang_spirv_reader_ast_lower
+        tint_lang_spirv_reader_ast_parser
+        tint_lang_spirv_reader_parser
+    )
+endif()
+if(TINT_BUILD_SPV_WRITER)
+    list(APPEND TINT_SPIRV_TARGETS
+        tint_lang_spirv_writer
+        tint_lang_spirv_writer_ast_printer
+        tint_lang_spirv_writer_ast_raise
+        tint_lang_spirv_writer_common
+        tint_lang_spirv_writer_printer
+        tint_lang_spirv_writer_raise
+    )
+endif()
+#
+set(TINT_WGSL_TARGETS "")
+if(TINT_BUILD_WGSL_READER OR TINT_BUILD_WGSL_WRITER)
+    list(APPEND TINT_WGSL_TARGETS
+        tint_lang_wgsl_ast_transform
+        tint_lang_wgsl_helpers
+        tint_lang_wgsl_inspector
+    )
+endif()
+if(TINT_BUILD_WGSL_READER)
+    list(APPEND TINT_WGSL_TARGETS
+        tint_lang_wgsl_reader
+        tint_lang_wgsl_reader_lower
+        tint_lang_wgsl_reader_parser
+        tint_lang_wgsl_reader_program_to_ir
+    )
+endif()
+if(TINT_BUILD_WGSL_WRITER)
+    list(APPEND TINT_WGSL_TARGETS
+        tint_lang_wgsl_writer
+        tint_lang_wgsl_writer_ast_printer
+        tint_lang_wgsl_writer_raise
+        tint_lang_wgsl_writer_syntax_tree_printer
+    )
+endif()
+#
+install( # a lot of these are internal targets, which actually shouldn't be exposed
+    TARGETS
+        dawn_common
+        dawn_headers
+        dawn_internal_config
+        dawn_native
+        dawn_platform
+        dawn_proc
+        dawn_public_config
+        dawn_wire
+        dawncpp
+        dawncpp_headers
+        partition_alloc
+        tint_api
+        tint_api_common
+        tint_api_options
+        ${TINT_COMMON_TARGETS}
+        tint_lang_core
+        tint_lang_core_constant
+        tint_lang_core_intrinsic
+        tint_lang_core_ir
+        tint_lang_core_type
+        ${TINT_GLSL_TARGETS}
+        ${TINT_HLSL_TARGETS}
+        tint_lang_hlsl_writer_common
+        ${TINT_MSL_TARGETS}
+        ${TINT_SPIRV_TARGETS}
+        tint_lang_spirv_reader_common
+        ${TINT_WGSL_TARGETS}
+        tint_lang_wgsl
+        tint_lang_wgsl_ast
+        tint_lang_wgsl_common
+        tint_lang_wgsl_features
+        tint_lang_wgsl_intrinsic
+        tint_lang_wgsl_ir
+        tint_lang_wgsl_program
+        tint_lang_wgsl_resolver
+        tint_lang_wgsl_sem
+        tint_lang_wgsl_writer_ir_to_program
+        tint_utils_containers
+        tint_utils_debug
+        tint_utils_diagnostic
+        tint_utils_generator
+        tint_utils_ice
+        tint_utils_id
+        tint_utils_macros
+        tint_utils_math
+        tint_utils_memory
+        tint_utils_reflection
+        tint_utils_result
+        tint_utils_rtti
+        tint_utils_strconv
+        tint_utils_symbol
+        tint_utils_text
+        tint_utils_traits
+    EXPORT "${PROJECT_NAME}Targets"
+    PUBLIC_HEADER DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/$<LOWER_CASE:${PROJECT_NAME}>"
+    INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
+)
+
+if(DAWN_USE_GLFW)
+    install(TARGETS dawn_glfw
+        EXPORT "${PROJECT_NAME}Targets"
+        PUBLIC_HEADER DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/$<LOWER_CASE:${PROJECT_NAME}>"
+        INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
+    )
+endif()
+
+# generate and install export file
+install(EXPORT "${PROJECT_NAME}Targets"
+    FILE "${PROJECT_NAME}Targets.cmake"
+    NAMESPACE "dawn::"
+    DESTINATION "share/${PROJECT_NAME}"
+)
+
+add_includes_glob(
+    "${PROJECT_SOURCE_DIR}/include/*.h"
+    "${CMAKE_CURRENT_SOURCE_DIR}/include"
+)
+add_includes_glob(
+    "${PROJECT_SOURCE_DIR}/src/tint/*.h"
+    "${CMAKE_CURRENT_SOURCE_DIR}/src"
+)
+
+include(CMakePackageConfigHelpers)
+
+configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in
+    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
+    INSTALL_DESTINATION "share/${PROJECT_NAME}"
+)
+
+install(FILES
+    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
+    DESTINATION "share/${PROJECT_NAME}"
+)
diff --git a/generator/CMakeLists.txt b/generator/CMakeLists.txt
index 8f3933ad60..bd8297c945 100644
--- a/generator/CMakeLists.txt
+++ b/generator/CMakeLists.txt
@@ -25,14 +25,17 @@
 # OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-find_package(PythonInterp REQUIRED)
-message(STATUS "Dawn: using python at ${PYTHON_EXECUTABLE}")
+if(NOT Python3_FOUND)
+    find_package(Python3 COMPONENTS Interpreter REQUIRED)
+    message(STATUS "Python found: ${Python3_FOUND}")
+    message(STATUS "Python path: ${Python3_EXECUTABLE}")
+endif()
 
 # Check for Jinja2
 if (NOT DAWN_JINJA2_DIR)
     message(STATUS "Dawn: Using system jinja2")
     execute_process(
-        COMMAND ${PYTHON_EXECUTABLE} -c "import jinja2"
+        COMMAND ${Python3_EXECUTABLE} -c "import jinja2"
         RESULT_VARIABLE RET
     )
     if (NOT RET EQUAL 0)
@@ -55,7 +58,7 @@ function(DawnGenerator)
 
     # Build the set of args common to all invocation of that generator.
     set(BASE_ARGS
-        ${PYTHON_EXECUTABLE}
+        ${Python3_EXECUTABLE}
         ${G_SCRIPT}
         --template-dir
         "${DAWN_TEMPLATE_DIR}"
diff --git a/src/dawn/CMakeLists.txt b/src/dawn/CMakeLists.txt
index acd9a809f1..4e71e7fa9b 100644
--- a/src/dawn/CMakeLists.txt
+++ b/src/dawn/CMakeLists.txt
@@ -76,6 +76,10 @@ DawnJSONGenerator(
     PRINT_NAME "Dawn headers"
     RESULT_VARIABLE "DAWN_HEADERS_GEN_SOURCES"
 )
+add_includes_list(
+    "${DAWN_HEADERS_GEN_SOURCES}"
+    "${DAWN_BUILD_GEN_DIR}/include"
+)
 
 # Headers only INTERFACE library with generated headers don't work in CMake
 # because the GENERATED property is local to a directory. Instead we make a
@@ -86,11 +90,14 @@ DawnJSONGenerator(
 # directory, they don't see the GENERATED property and fail to configure
 # because the file doesn't exist on disk.
 add_library(dawn_headers STATIC ${DAWN_PLACEHOLDER_FILE})
+add_library(dawn::headers ALIAS dawn_headers)
+set_property(TARGET dawn_headers PROPERTY EXPORT_NAME headers)
 common_compile_options(dawn_headers)
-target_sources(dawn_headers INTERFACE
-    "${DAWN_INCLUDE_DIR}/webgpu/webgpu.h"
+target_sources(dawn_headers
+    # INTERFACE
+    #     "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/webgpu/webgpu.h>"
     PRIVATE
-    ${DAWN_HEADERS_GEN_SOURCES}
+        ${DAWN_HEADERS_GEN_SOURCES}
 )
 target_link_libraries(dawn_headers INTERFACE dawn_public_config)
 install_if_enabled(dawn_headers)
@@ -104,15 +111,21 @@ DawnJSONGenerator(
     PRINT_NAME "Dawn C++ headers"
     RESULT_VARIABLE "DAWNCPP_HEADERS_GEN_SOURCES"
 )
+add_includes_list(
+    "${DAWNCPP_HEADERS_GEN_SOURCES}"
+    "${DAWN_BUILD_GEN_DIR}/include"
+)
 
 # This headers only library needs to be a STATIC library, see comment for
 # dawn_headers above.
 add_library(dawncpp_headers STATIC ${DAWN_PLACEHOLDER_FILE})
+add_library(dawn::cpp_headers ALIAS dawncpp_headers)
+set_property(TARGET dawncpp_headers PROPERTY EXPORT_NAME cpp_headers)
 common_compile_options(dawncpp_headers)
 target_sources(dawncpp_headers
-  INTERFACE
-    "${DAWN_INCLUDE_DIR}/webgpu/webgpu_cpp.h"
-    "${DAWN_INCLUDE_DIR}/webgpu/webgpu_enum_class_bitmasks.h"
+  # INTERFACE
+  #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/webgpu/webgpu_cpp.h>"
+  #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/webgpu/webgpu_enum_class_bitmasks.h>"
   PRIVATE
     ${DAWNCPP_HEADERS_GEN_SOURCES}
 )
@@ -128,7 +141,9 @@ DawnJSONGenerator(
     RESULT_VARIABLE "DAWNCPP_GEN_SOURCES"
 )
 
-add_library(dawncpp STATIC ${DAWN_PLACEHOLDER_FILE})
+add_library(dawncpp STATIC ${DAWNCPP_GEN_SOURCES})
+add_library(dawn::cpp ALIAS dawncpp)
+set_property(TARGET dawncpp PROPERTY EXPORT_NAME cpp)
 common_compile_options(dawncpp)
 target_sources(dawncpp PRIVATE ${DAWNCPP_GEN_SOURCES})
 target_link_libraries(dawncpp PUBLIC dawncpp_headers)
@@ -147,16 +162,18 @@ DawnJSONGenerator(
     RESULT_VARIABLE "DAWNPROC_GEN_SOURCES"
 )
 
-add_library(dawn_proc ${DAWN_PLACEHOLDER_FILE})
+add_library(dawn_proc ${DAWNPROC_GEN_SOURCES})
+add_library(dawn::proc ALIAS dawn_proc)
+set_property(TARGET dawn_proc PROPERTY EXPORT_NAME proc)
 common_compile_options(dawn_proc)
 target_compile_definitions(dawn_proc PRIVATE "WGPU_IMPLEMENTATION")
 if(BUILD_SHARED_LIBS)
     target_compile_definitions(dawn_proc PRIVATE "WGPU_SHARED_LIBRARY")
 endif()
 target_sources(dawn_proc
-  INTERFACE
-    "${DAWN_INCLUDE_DIR}/dawn/dawn_thread_dispatch_proc.h"
-    "${DAWN_INCLUDE_DIR}/dawn/dawn_proc.h"
+  # INTERFACE
+  #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/dawn_thread_dispatch_proc.h>"
+  #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/dawn_proc.h>"
   PRIVATE
     ${DAWNPROC_GEN_SOURCES}
 )
diff --git a/src/dawn/common/CMakeLists.txt b/src/dawn/common/CMakeLists.txt
index 740d5e31cc..abcb61e9c4 100644
--- a/src/dawn/common/CMakeLists.txt
+++ b/src/dawn/common/CMakeLists.txt
@@ -41,7 +41,9 @@ DawnGenerator(
     RESULT_VARIABLE "DAWN_GPU_INFO_AUTOGEN_SOURCES"
 )
 
-add_library(dawn_common STATIC ${DAWN_PLACEHOLDER_FILE})
+add_library(dawn_common STATIC)
+add_library(dawn::common ALIAS dawn_common)
+set_property(TARGET dawn_common PROPERTY EXPORT_NAME common)
 common_compile_options(dawn_common)
 target_sources(dawn_common PRIVATE
     ${DAWN_VERSION_AUTOGEN_SOURCES}
diff --git a/src/dawn/glfw/CMakeLists.txt b/src/dawn/glfw/CMakeLists.txt
index ff2c890d04..a8ddf65145 100644
--- a/src/dawn/glfw/CMakeLists.txt
+++ b/src/dawn/glfw/CMakeLists.txt
@@ -27,14 +27,17 @@
 
 if(DAWN_USE_GLFW)
 
-add_library(dawn_glfw STATIC ${DAWN_PLACEHOLDER_FILE})
+add_library(dawn_glfw STATIC)
+add_library(dawn::glfw ALIAS dawn_glfw)
+set_property(TARGET dawn_glfw PROPERTY EXPORT_NAME glfw)
 common_compile_options(dawn_glfw)
 target_sources(dawn_glfw
   INTERFACE
-    "${DAWN_INCLUDE_DIR}/webgpu/webgpu_glfw.h"
+    "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/webgpu/webgpu_glfw.h>"
   PRIVATE
     "utils.cpp"
 )
+find_package(glfw3 CONFIG REQUIRED)
 target_link_libraries(dawn_glfw
   PUBLIC
     glfw
diff --git a/src/dawn/native/CMakeLists.txt b/src/dawn/native/CMakeLists.txt
index bcdfdbbb95..4d3ef12cf1 100644
--- a/src/dawn/native/CMakeLists.txt
+++ b/src/dawn/native/CMakeLists.txt
@@ -31,7 +31,9 @@ DawnJSONGenerator(
     RESULT_VARIABLE "DAWN_NATIVE_UTILS_GEN_SOURCES"
 )
 
-add_library(dawn_native ${DAWN_PLACEHOLDER_FILE})
+add_library(dawn_native)
+add_library(dawn::native ALIAS dawn_native)
+set_property(TARGET dawn_native PROPERTY EXPORT_NAME native)
 common_compile_options(dawn_native)
 
 target_compile_definitions(dawn_native PRIVATE "DAWN_NATIVE_IMPLEMENTATION")
@@ -40,9 +42,9 @@ if(BUILD_SHARED_LIBS)
 endif()
 
 target_sources(dawn_native
-  INTERFACE
-    "${DAWN_INCLUDE_DIR}/dawn/native/DawnNative.h"
-    "${DAWN_INCLUDE_DIR}/dawn/native/dawn_native_export.h"
+  # INTERFACE
+  #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/native/DawnNative.h>"
+  #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/native/dawn_native_export.h>"
   PRIVATE
     ${DAWN_NATIVE_UTILS_GEN_SOURCES}
     "Adapter.h"
@@ -245,22 +247,24 @@ target_sources(dawn_native
     "utils/WGPUHelpers.cpp"
     "utils/WGPUHelpers.h"
 )
+find_package(absl CONFIG REQUIRED)
+find_package(SPIRV-Tools-opt CONFIG REQUIRED)
 target_link_libraries(dawn_native
-    PUBLIC dawncpp_headers
-           partition_alloc
-    PRIVATE dawn_common
-            dawn_platform
-            dawn_internal_config
-            libtint
-            SPIRV-Tools-opt
-            absl_strings
-            absl_str_format_internal
-            absl_flat_hash_map
-            absl_flat_hash_set
+    PUBLIC
+        dawncpp_headers
+        partition_alloc
+    PRIVATE
+        dawn_common
+        dawn_platform
+        dawn_internal_config
+        libtint
+        SPIRV-Tools-opt
+        absl::strings
+        absl::str_format_internal
+        absl::flat_hash_map
+        absl::flat_hash_set
 )
 
-target_include_directories(dawn_native PRIVATE ${DAWN_ABSEIL_DIR})
-
 if (DAWN_USE_X11)
     target_include_directories(dawn_native PRIVATE ${X11_INCLUDE_DIR})
     target_sources(dawn_native PRIVATE
@@ -296,8 +300,8 @@ endif()
 
 if (DAWN_ENABLE_D3D11 OR DAWN_ENABLE_D3D12)
     target_sources(dawn_native
-      INTERFACE
-        "${DAWN_INCLUDE_DIR}/dawn/native/D3DBackend.h"
+      # INTERFACE
+      #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/native/D3DBackend.h>"
       PRIVATE
         "d3d/BackendD3D.cpp"
         "d3d/BackendD3D.h"
@@ -335,8 +339,8 @@ endif()
 
 if (DAWN_ENABLE_D3D11)
     target_sources(dawn_native
-      INTERFACE
-        "${DAWN_INCLUDE_DIR}/dawn/native/D3D11Backend.h"
+      # INTERFACE
+      #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/native/D3D11Backend.h>"
       PRIVATE
         "d3d11/BackendD3D11.cpp"
         "d3d11/BackendD3D11.h"
@@ -390,8 +394,8 @@ endif()
 
 if (DAWN_ENABLE_D3D12)
     target_sources(dawn_native
-      INTERFACE
-        "${DAWN_INCLUDE_DIR}/dawn/native/D3D12Backend.h"
+      # INTERFACE
+      #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/native/D3D12Backend.h>"
       PRIVATE
         "d3d12/BackendD3D12.cpp"
         "d3d12/BackendD3D12.h"
@@ -480,8 +484,8 @@ endif()
 
 if (DAWN_ENABLE_METAL)
     target_sources(dawn_native
-      INTERFACE
-        "${DAWN_INCLUDE_DIR}/dawn/native/MetalBackend.h"
+      # INTERFACE
+      #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/native/MetalBackend.h>"
       PRIVATE
         "Surface_metal.mm"
         "metal/BackendMTL.h"
@@ -537,8 +541,8 @@ endif()
 
 if (DAWN_ENABLE_NULL)
     target_sources(dawn_native
-      INTERFACE
-        "${DAWN_INCLUDE_DIR}/dawn/native/NullBackend.h"
+      # INTERFACE
+      #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/native/NullBackend.h>"
       PRIVATE
         "null/DeviceNull.cpp"
         "null/DeviceNull.h"
@@ -558,15 +562,15 @@ if (DAWN_ENABLE_OPENGL)
         SCRIPT "${Dawn_SOURCE_DIR}/generator/opengl_loader_generator.py"
         PRINT_NAME "OpenGL function loader"
         ARGS "--gl-xml"
-             "${Dawn_SOURCE_DIR}/third_party/khronos/OpenGL-Registry/xml/gl.xml"
+             "${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/share/opengl/gl.xml"
              "--supported-extensions"
              "${Dawn_SOURCE_DIR}/src/dawn/native/opengl/supported_extensions.json"
         RESULT_VARIABLE "DAWN_NATIVE_OPENGL_AUTOGEN_SOURCES"
     )
 
     target_sources(dawn_native
-      INTERFACE
-        "${DAWN_INCLUDE_DIR}/dawn/native/OpenGLBackend.h"
+      # INTERFACE
+      #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/native/OpenGLBackend.h>"
       PRIVATE
         ${DAWN_NATIVE_OPENGL_AUTOGEN_SOURCES}
         "opengl/BackendGL.cpp"
@@ -621,8 +625,11 @@ if (DAWN_ENABLE_OPENGL)
         "opengl/opengl_platform.h"
     )
 
-    target_include_directories(dawn_native PRIVATE ${DAWN_KHRONOS_DIR})
-    target_link_libraries(dawn_native PRIVATE dawn_khronos_platform)
+    # probably redundant
+    target_include_directories(dawn_native
+        PRIVATE
+            "${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/include"
+    )
 endif()
 
 if (DAWN_ENABLE_SWIFTSHADER)
@@ -630,9 +637,23 @@ if (DAWN_ENABLE_SWIFTSHADER)
 endif()
 
 if (DAWN_ENABLE_VULKAN)
+    find_package(VulkanHeaders CONFIG REQUIRED)
+    target_link_libraries(dawn_native
+        PUBLIC
+            Vulkan::Headers
+    )
+
+    find_package(VulkanUtilityLibraries CONFIG REQUIRED)
+    target_link_libraries(dawn_native
+        PRIVATE
+            Vulkan::LayerSettings
+            Vulkan::UtilityHeaders
+            Vulkan::CompilerConfiguration
+    )
+
     target_sources(dawn_native PRIVATE
-       INTERFACE
-        "${DAWN_INCLUDE_DIR}/dawn/native/VulkanBackend.h"
+       # INTERFACE
+       #  "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/native/VulkanBackend.h>"
       PRIVATE
         "vulkan/BackendVk.cpp"
         "vulkan/BackendVk.h"
@@ -709,9 +730,6 @@ if (DAWN_ENABLE_VULKAN)
         "vulkan/external_semaphore/SemaphoreServiceImplementation.h"
     )
 
-    target_link_libraries(dawn_native PUBLIC Vulkan-Headers)
-    target_include_directories(dawn_native PRIVATE ${DAWN_VULKAN_UTILITY_LIBRARIES_DIR}/include)
-
     if (ANDROID)
         target_sources(dawn_native PRIVATE
             "vulkan/external_memory/MemoryServiceImplementationAHardwareBuffer.cpp"
@@ -761,7 +779,7 @@ DawnJSONGenerator(
     RESULT_VARIABLE "WEBGPU_DAWN_NATIVE_PROC_GEN"
 )
 
-add_library(webgpu_dawn ${DAWN_PLACEHOLDER_FILE})
+add_library(webgpu_dawn)
 common_compile_options(webgpu_dawn)
 target_link_libraries(webgpu_dawn PRIVATE dawn_native)
 target_link_libraries(webgpu_dawn PUBLIC dawn_headers)
diff --git a/src/dawn/partition_alloc/CMakeLists.txt b/src/dawn/partition_alloc/CMakeLists.txt
index ae494621ca..b7e51bedb0 100644
--- a/src/dawn/partition_alloc/CMakeLists.txt
+++ b/src/dawn/partition_alloc/CMakeLists.txt
@@ -1,2 +1,5 @@
 add_library(partition_alloc INTERFACE)
-target_include_directories(partition_alloc INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})
+target_include_directories(partition_alloc
+    INTERFACE
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+)
diff --git a/src/dawn/platform/CMakeLists.txt b/src/dawn/platform/CMakeLists.txt
index 5fd12f2daf..7e39dd441e 100644
--- a/src/dawn/platform/CMakeLists.txt
+++ b/src/dawn/platform/CMakeLists.txt
@@ -25,7 +25,9 @@
 # OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-add_library(dawn_platform ${DAWN_PLACEHOLDER_FILE})
+add_library(dawn_platform)
+add_library(dawn::platform ALIAS dawn_platform)
+set_property(TARGET dawn_platform PROPERTY EXPORT_NAME platform)
 common_compile_options(dawn_platform)
 
 target_compile_definitions(dawn_platform PRIVATE "DAWN_PLATFORM_IMPLEMENTATION")
@@ -37,10 +39,10 @@ if (DAWN_USE_BUILT_DXC)
   target_compile_definitions(dawn_platform PRIVATE "DAWN_USE_BUILT_DXC")
 endif()
 
-target_sources(dawn_platform PRIVATE
-  PUBLIC
-    "${DAWN_INCLUDE_DIR}/dawn/platform/DawnPlatform.h"
-    "${DAWN_INCLUDE_DIR}/dawn/platform/dawn_platform_export.h"
+target_sources(dawn_platform
+  # PUBLIC
+  #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/platform/DawnPlatform.h>"
+  #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/platform/dawn_platform_export.h>"
   PRIVATE
     "DawnPlatform.cpp"
     "WorkerThread.cpp"
diff --git a/src/dawn/samples/CMakeLists.txt b/src/dawn/samples/CMakeLists.txt
index 1a043f7f94..2c30df0495 100644
--- a/src/dawn/samples/CMakeLists.txt
+++ b/src/dawn/samples/CMakeLists.txt
@@ -25,7 +25,7 @@
 # OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-add_library(dawn_sample_utils STATIC ${DAWN_PLACEHOLDER_FILE})
+add_library(dawn_sample_utils STATIC)
 common_compile_options(dawn_sample_utils)
 target_sources(dawn_sample_utils PRIVATE
     "SampleUtils.cpp"
diff --git a/src/dawn/utils/CMakeLists.txt b/src/dawn/utils/CMakeLists.txt
index 0b54134b51..26cfebd394 100644
--- a/src/dawn/utils/CMakeLists.txt
+++ b/src/dawn/utils/CMakeLists.txt
@@ -25,7 +25,7 @@
 # OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-add_library(dawn_utils STATIC ${DAWN_PLACEHOLDER_FILE})
+add_library(dawn_utils STATIC)
 common_compile_options(dawn_utils)
 target_sources(dawn_utils PRIVATE
     "BinarySemaphore.cpp"
@@ -50,14 +50,16 @@ target_sources(dawn_utils PRIVATE
     "WireHelper.h"
 )
 target_link_libraries(dawn_utils
-    PUBLIC dawncpp_headers
-           partition_alloc
-    PRIVATE dawn_internal_config
-            dawn_common
-            dawn_native
-            dawn_proc
-            dawn_wire
-            SPIRV-Tools-opt
+    PUBLIC
+        dawncpp_headers
+        partition_alloc
+    PRIVATE
+        dawn_internal_config
+        dawn_common
+        dawn_native
+        dawn_proc
+        dawn_wire
+        #SPIRV-Tools-opt
 )
 
 if(WIN32 AND NOT WINDOWS_STORE)
diff --git a/src/dawn/wire/CMakeLists.txt b/src/dawn/wire/CMakeLists.txt
index ab63f046d4..3ca3764f49 100644
--- a/src/dawn/wire/CMakeLists.txt
+++ b/src/dawn/wire/CMakeLists.txt
@@ -31,7 +31,9 @@ DawnJSONGenerator(
     RESULT_VARIABLE "DAWN_WIRE_GEN_SOURCES"
 )
 
-add_library(dawn_wire ${DAWN_PLACEHOLDER_FILE})
+add_library(dawn_wire)
+add_library(dawn::wire ALIAS dawn_wire)
+set_property(TARGET dawn_wire PROPERTY EXPORT_NAME wire)
 common_compile_options(dawn_wire)
 
 target_compile_definitions(dawn_wire PRIVATE "DAWN_WIRE_IMPLEMENTATION")
@@ -39,12 +41,12 @@ if(BUILD_SHARED_LIBS)
     target_compile_definitions(dawn_wire PRIVATE "DAWN_WIRE_SHARED_LIBRARY")
 endif()
 
-target_sources(dawn_wire PRIVATE
-  INTERFACE
-    "${DAWN_INCLUDE_DIR}/dawn/wire/Wire.h"
-    "${DAWN_INCLUDE_DIR}/dawn/wire/WireClient.h"
-    "${DAWN_INCLUDE_DIR}/dawn/wire/WireServer.h"
-    "${DAWN_INCLUDE_DIR}/dawn/wire/dawn_wire_export.h"
+target_sources(dawn_wire
+  # INTERFACE
+  #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/wire/Wire.h>"
+  #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/wire/WireClient.h>"
+  #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/wire/WireServer.h>"
+  #   "$<BUILD_INTERFACE:${DAWN_INCLUDE_DIR}/dawn/wire/dawn_wire_export.h>"
   PRIVATE
     ${DAWN_WIRE_GEN_SOURCES}
     "BufferConsumer.h"
diff --git a/src/tint/CMakeLists.txt b/src/tint/CMakeLists.txt
index 9a4eba59b8..2c44db8cef 100644
--- a/src/tint/CMakeLists.txt
+++ b/src/tint/CMakeLists.txt
@@ -51,8 +51,10 @@ endif()
 # Helper functions
 ################################################################################
 function(tint_core_compile_options TARGET)
-  target_include_directories(${TARGET} PUBLIC "${TINT_ROOT_SOURCE_DIR}")
-  target_include_directories(${TARGET} PUBLIC "${TINT_ROOT_SOURCE_DIR}/include")
+  target_include_directories(${TARGET}
+      PUBLIC
+          "$<BUILD_INTERFACE:${TINT_ROOT_SOURCE_DIR}>"
+  )
   target_compile_definitions(${TARGET} PUBLIC -DTINT_BUILD_GLSL_VALIDATOR=$<BOOL:${TINT_BUILD_GLSL_VALIDATOR}>)
   target_compile_definitions(${TARGET} PUBLIC -DTINT_BUILD_GLSL_WRITER=$<BOOL:${TINT_BUILD_GLSL_WRITER}>)
   target_compile_definitions(${TARGET} PUBLIC -DTINT_BUILD_HLSL_WRITER=$<BOOL:${TINT_BUILD_HLSL_WRITER}>)
@@ -179,13 +181,13 @@ function(tint_default_compile_options TARGET)
 endfunction()
 
 function(tint_spvheaders_compile_options TARGET)
-  target_link_libraries(${TARGET} PRIVATE SPIRV-Headers)
-  target_include_directories(${TARGET} PRIVATE "${TINT_SPIRV_HEADERS_DIR}/include")
+  find_package(SPIRV-Headers CONFIG REQUIRED)
+  target_link_libraries(${TARGET} PRIVATE SPIRV-Headers::SPIRV-Headers)
 endfunction()
 
 function(tint_spvtools_compile_options TARGET)
-  target_link_libraries(${TARGET} PRIVATE SPIRV-Tools)
-  target_include_directories(${TARGET} PRIVATE "${TINT_SPIRV_TOOLS_DIR}/include")
+  find_package(SPIRV-Tools CONFIG REQUIRED)
+  target_link_libraries(${TARGET} PRIVATE SPIRV-Tools-static)
 endfunction()
 
 function(tint_lib_compile_options TARGET)
@@ -393,7 +395,7 @@ function(tint_add_target TARGET KIND)
   endif()
 
   if(${KIND} STREQUAL lib)
-    add_library(${TARGET} STATIC EXCLUDE_FROM_ALL)
+    add_library(${TARGET} STATIC)
     tint_lib_compile_options(${TARGET})
   elseif(${KIND} STREQUAL proto)
     add_library(${TARGET} STATIC EXCLUDE_FROM_ALL)
@@ -497,8 +499,9 @@ function(tint_target_add_external_dependencies TARGET KIND)
 
   foreach(DEPENDENCY ${DEPENDENCIES})  # Each external dependency requires special handling...
     if(${DEPENDENCY} STREQUAL "abseil")
+      find_package(absl CONFIG REQUIRED)
       target_link_libraries(${TARGET} PRIVATE
-        absl_strings
+        absl::strings
       )
     elseif(${DEPENDENCY} STREQUAL "glslang")
       target_link_libraries(${TARGET} PRIVATE glslang)
@@ -539,15 +542,8 @@ function(tint_target_add_external_dependencies TARGET KIND)
     elseif(${DEPENDENCY} STREQUAL "spirv-tools")
       tint_spvtools_compile_options(${TARGET})
     elseif(${DEPENDENCY} STREQUAL "spirv-opt-internal")
-      target_link_libraries(${TARGET} PRIVATE
-        SPIRV-Tools-opt
-      )
-      target_include_directories(${TARGET} PRIVATE
-        "${TINT_SPIRV_TOOLS_DIR}"
-        "${TINT_SPIRV_TOOLS_DIR}/include"
-        "${TINT_SPIRV_TOOLS_DIR}/source"
-        "${spirv-tools_BINARY_DIR}"
-      )
+      find_package(SPIRV-Tools-opt CONFIG REQUIRED)
+      target_link_libraries(${TARGET} PRIVATE SPIRV-Tools-opt)
     elseif(${DEPENDENCY} STREQUAL "thread")
       find_package(Threads REQUIRED)
       target_link_libraries(${TARGET} PRIVATE Threads::Threads)
diff --git a/third_party/CMakeLists.txt b/third_party/CMakeLists.txt
index 2a2cd68aa6..f7a81da9d2 100644
--- a/third_party/CMakeLists.txt
+++ b/third_party/CMakeLists.txt
@@ -32,7 +32,11 @@ set(BUILD_TESTING OFF)
 # It is particularly interesting when building dawn as a subdirectory in
 # a parent project that does not want to use depot_tools.
 if (${DAWN_FETCH_DEPENDENCIES})
-    find_package(PythonInterp 3 REQUIRED)
+    if(NOT Python3_FOUND)
+        find_package(Python3 COMPONENTS Interpreter REQUIRED)
+        message(STATUS "Python found: ${Python3_FOUND}")
+        message(STATUS "Python path: ${Python3_EXECUTABLE}")
+    endif()
 
     set(EXTRA_FETCH_ARGS)
     if (NOT TARGET gmock AND ${TINT_BUILD_TESTS})
@@ -42,7 +46,7 @@ if (${DAWN_FETCH_DEPENDENCIES})
     message(STATUS "Running fetch_dawn_dependencies:")
     execute_process(
         COMMAND
-            ${PYTHON_EXECUTABLE}
+            ${Python3_EXECUTABLE}
             "${PROJECT_SOURCE_DIR}/tools/fetch_dawn_dependencies.py"
             --directory ${PROJECT_SOURCE_DIR}
             ${EXTRA_FETCH_ARGS}
