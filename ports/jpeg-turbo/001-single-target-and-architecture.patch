diff --git a/CMakeLists.txt b/CMakeLists.txt
index ff9c9c27..042b7032 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,10 +1,10 @@
-cmake_minimum_required(VERSION 2.8.12...3.28)
+cmake_minimum_required(VERSION 3.22)
 
 if(CMAKE_EXECUTABLE_SUFFIX)
   set(CMAKE_EXECUTABLE_SUFFIX_TMP ${CMAKE_EXECUTABLE_SUFFIX})
 endif()
 
-project(libjpeg-turbo C)
+project(jpeg-turbo LANGUAGES C)
 set(VERSION 3.0.3)
 set(COPYRIGHT_YEAR "1991-2024")
 string(REPLACE "." ";" VERSION_TRIPLET ${VERSION})
@@ -90,13 +90,26 @@ include(cmakescripts/PackageInfo.cmake)
 # Detect CPU type and whether we're building 64-bit or 32-bit code
 math(EXPR BITS "${CMAKE_SIZEOF_VOID_P} * 8")
 string(TOLOWER ${CMAKE_SYSTEM_PROCESSOR} CMAKE_SYSTEM_PROCESSOR_LC)
-set(COUNT 1)
-foreach(ARCH ${CMAKE_OSX_ARCHITECTURES})
-  if(COUNT GREATER 1)
-    message(FATAL_ERROR "libjpeg-turbo contains assembly code, so it cannot be built with multiple values in CMAKE_OSX_ARCHITECTURES.")
-  endif()
-  math(EXPR COUNT "${COUNT}+1")
-endforeach()
+
+# jpeg-turbo contains assembly code, so it cannot be built with multiple values in CMAKE_OSX_ARCHITECTURES
+#message(STATUS "CMAKE_APPLE_ARCH_SYSROOTS: ${CMAKE_APPLE_ARCH_SYSROOTS}")
+list(LENGTH CMAKE_OSX_ARCHITECTURES CMAKE_OSX_ARCHITECTURES_COUNT)
+if(CMAKE_OSX_ARCHITECTURES_COUNT GREATER 1)
+    message(WARNING "Got more than one value in CMAKE_OSX_ARCHITECTURES, normally jpeg-turbo does not support that")
+endif()
+#
+# disabled the check on iOS, and it seems to build fine into a combined/fat/universal binary
+# however, it still might cause problems at runtime, so we might not be able to use jpeg-turbo in iOS builds
+# if(NOT IOS)
+#   set(COUNT 1)
+#   foreach(ARCH ${CMAKE_OSX_ARCHITECTURES})
+#     if(COUNT GREATER 1)
+#       message(FATAL_ERROR "The libjpeg-turbo build system does not support multiple values in CMAKE_OSX_ARCHITECTURES.")
+#     endif()
+#     math(EXPR COUNT "${COUNT}+1")
+#   endforeach()
+# endif()
+
 if(CMAKE_SYSTEM_PROCESSOR_LC MATCHES "x86_64" OR
   CMAKE_SYSTEM_PROCESSOR_LC MATCHES "amd64" OR
   CMAKE_SYSTEM_PROCESSOR_LC MATCHES "i[0-9]86" OR
@@ -217,6 +230,10 @@ option(ENABLE_SHARED "Build shared libraries" TRUE)
 boolean_number(ENABLE_SHARED)
 option(ENABLE_STATIC "Build static libraries" TRUE)
 boolean_number(ENABLE_STATIC)
+option(ENABLE_EXECUTABLES "Build executables" 0)
+boolean_number(ENABLE_EXECUTABLES)
+option(INSTALL_DOCS "Install documentation files" 0)
+boolean_number(INSTALL_DOCS)
 option(REQUIRE_SIMD
   "Generate a fatal error if SIMD extensions are not available for this platform (default is to fall back to a non-SIMD build)"
   FALSE)
@@ -658,17 +675,17 @@ endif()
 if(ENABLE_STATIC)
   # Compile a separate version of these source files with 12-bit and 16-bit
   # data precision.
-  add_library(jpeg12-static OBJECT ${JPEG12_SOURCES})
-  set_property(TARGET jpeg12-static PROPERTY COMPILE_FLAGS
+  add_library(jpeg12 OBJECT ${JPEG12_SOURCES})
+  set_property(TARGET jpeg12 PROPERTY COMPILE_FLAGS
     "-DBITS_IN_JSAMPLE=12")
-  add_library(jpeg16-static OBJECT ${JPEG16_SOURCES})
-  set_property(TARGET jpeg16-static PROPERTY COMPILE_FLAGS
+  add_library(jpeg16 OBJECT ${JPEG16_SOURCES})
+  set_property(TARGET jpeg16 PROPERTY COMPILE_FLAGS
     "-DBITS_IN_JSAMPLE=16")
-  add_library(jpeg-static STATIC ${JPEG_SOURCES} ${SIMD_TARGET_OBJECTS}
-    ${SIMD_OBJS} $<TARGET_OBJECTS:jpeg12-static>
-    $<TARGET_OBJECTS:jpeg16-static>)
+  add_library(jpeg STATIC ${JPEG_SOURCES} ${SIMD_TARGET_OBJECTS}
+    ${SIMD_OBJS} $<TARGET_OBJECTS:jpeg12>
+    $<TARGET_OBJECTS:jpeg16>)
   if(NOT MSVC)
-    set_target_properties(jpeg-static PROPERTIES OUTPUT_NAME jpeg)
+    set_target_properties(jpeg PROPERTIES OUTPUT_NAME jpeg)
   endif()
 endif()
 
@@ -721,6 +738,7 @@ if(WITH_TURBOJPEG)
         LINK_FLAGS "${TJMAPFLAG}${TJMAPFILE}")
     endif()
 
+    if(ENABLE_EXECUTABLES)
     add_executable(tjunittest tjunittest.c tjutil.c md5/md5.c md5/md5hl.c)
     target_link_libraries(tjunittest turbojpeg)
 
@@ -732,38 +750,41 @@ if(WITH_TURBOJPEG)
 
     add_executable(tjexample tjexample.c)
     target_link_libraries(tjexample turbojpeg)
+    endif() # ENABLE_EXECUTABLES
 
     add_custom_target(tjdoc COMMAND doxygen -s doxygen.config
       WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
   endif()
 
   if(ENABLE_STATIC)
-    add_library(turbojpeg12-static OBJECT rdppm.c wrppm.c)
-    set_property(TARGET turbojpeg12-static PROPERTY COMPILE_FLAGS
+    add_library(turbojpeg12 OBJECT rdppm.c wrppm.c)
+    set_property(TARGET turbojpeg12 PROPERTY COMPILE_FLAGS
       "-DBITS_IN_JSAMPLE=12 -DPPM_SUPPORTED")
-    add_library(turbojpeg16-static OBJECT rdppm.c wrppm.c)
-    set_property(TARGET turbojpeg16-static PROPERTY COMPILE_FLAGS
+    add_library(turbojpeg16 OBJECT rdppm.c wrppm.c)
+    set_property(TARGET turbojpeg16 PROPERTY COMPILE_FLAGS
       "-DBITS_IN_JSAMPLE=16 -DPPM_SUPPORTED")
-    add_library(turbojpeg-static STATIC ${JPEG_SOURCES} ${SIMD_TARGET_OBJECTS}
+    add_library(turbojpeg STATIC ${JPEG_SOURCES} ${SIMD_TARGET_OBJECTS}
       ${SIMD_OBJS} turbojpeg.c transupp.c jdatadst-tj.c jdatasrc-tj.c rdbmp.c
-      rdppm.c wrbmp.c wrppm.c $<TARGET_OBJECTS:jpeg12-static>
-      $<TARGET_OBJECTS:jpeg16-static> $<TARGET_OBJECTS:turbojpeg12-static>
-      $<TARGET_OBJECTS:turbojpeg16-static>)
-    set_property(TARGET turbojpeg-static PROPERTY COMPILE_FLAGS
+      rdppm.c wrbmp.c wrppm.c $<TARGET_OBJECTS:jpeg12>
+      $<TARGET_OBJECTS:jpeg16> $<TARGET_OBJECTS:turbojpeg12>
+      $<TARGET_OBJECTS:turbojpeg16>)
+    set_property(TARGET turbojpeg PROPERTY COMPILE_FLAGS
       "-DBMP_SUPPORTED -DPPM_SUPPORTED")
     if(NOT MSVC)
-      set_target_properties(turbojpeg-static PROPERTIES OUTPUT_NAME turbojpeg)
+      set_target_properties(turbojpeg PROPERTIES OUTPUT_NAME turbojpeg)
     endif()
 
-    add_executable(tjunittest-static tjunittest.c tjutil.c md5/md5.c
+    if(ENABLE_EXECUTABLES)
+    add_executable(tjunittest tjunittest.c tjutil.c md5/md5.c
       md5/md5hl.c)
-    target_link_libraries(tjunittest-static turbojpeg-static)
+    target_link_libraries(tjunittest turbojpeg)
 
-    add_executable(tjbench-static tjbench.c tjutil.c)
-    target_link_libraries(tjbench-static turbojpeg-static)
+    add_executable(tjbench tjbench.c tjutil.c)
+    target_link_libraries(tjbench turbojpeg)
     if(UNIX)
-      target_link_libraries(tjbench-static m)
+      target_link_libraries(tjbench m)
     endif()
+    endif() # ENABLE_EXECUTABLES
   endif()
 endif()
 
@@ -773,49 +794,50 @@ endif()
 set(CDJPEG_COMPILE_FLAGS
   "-DBMP_SUPPORTED -DGIF_SUPPORTED -DPPM_SUPPORTED -DTARGA_SUPPORTED ${USE_SETMODE}")
 
-if(ENABLE_STATIC)
+if(ENABLE_STATIC AND ENABLE_EXECUTABLES)
   # Compile a separate version of these source files with 12-bit and 16-bit
   # data precision.
-  add_library(cjpeg12-static OBJECT rdgif.c rdppm.c)
-  set_property(TARGET cjpeg12-static PROPERTY COMPILE_FLAGS
+  add_library(cjpeg12 OBJECT rdgif.c rdppm.c)
+  set_property(TARGET cjpeg12 PROPERTY COMPILE_FLAGS
     "-DBITS_IN_JSAMPLE=12 -DGIF_SUPPORTED -DPPM_SUPPORTED")
-  add_library(cjpeg16-static OBJECT rdgif.c rdppm.c)
-  set_property(TARGET cjpeg16-static PROPERTY COMPILE_FLAGS
+  add_library(cjpeg16 OBJECT rdgif.c rdppm.c)
+  set_property(TARGET cjpeg16 PROPERTY COMPILE_FLAGS
     "-DBITS_IN_JSAMPLE=16 -DGIF_SUPPORTED -DPPM_SUPPORTED")
-  add_executable(cjpeg-static cjpeg.c cdjpeg.c rdbmp.c rdgif.c rdppm.c
-    rdswitch.c rdtarga.c $<TARGET_OBJECTS:cjpeg12-static>
-    $<TARGET_OBJECTS:cjpeg16-static>)
-  set_property(TARGET cjpeg-static PROPERTY COMPILE_FLAGS
+  add_executable(cjpeg cjpeg.c cdjpeg.c rdbmp.c rdgif.c rdppm.c
+    rdswitch.c rdtarga.c $<TARGET_OBJECTS:cjpeg12>
+    $<TARGET_OBJECTS:cjpeg16>)
+  set_property(TARGET cjpeg PROPERTY COMPILE_FLAGS
     ${CDJPEG_COMPILE_FLAGS})
-  target_link_libraries(cjpeg-static jpeg-static)
+  target_link_libraries(cjpeg jpeg)
 
   # Compile a separate version of these source files with 12-bit and 16-bit
   # data precision.
-  add_library(djpeg12-static OBJECT rdcolmap.c wrgif.c wrppm.c)
-  set_property(TARGET djpeg12-static PROPERTY COMPILE_FLAGS
+  add_library(djpeg12 OBJECT rdcolmap.c wrgif.c wrppm.c)
+  set_property(TARGET djpeg12 PROPERTY COMPILE_FLAGS
     "-DBITS_IN_JSAMPLE=12 -DGIF_SUPPORTED -DPPM_SUPPORTED")
-  add_library(djpeg16-static OBJECT wrppm.c)
-  set_property(TARGET djpeg16-static PROPERTY COMPILE_FLAGS
+  add_library(djpeg16 OBJECT wrppm.c)
+  set_property(TARGET djpeg16 PROPERTY COMPILE_FLAGS
     "-DBITS_IN_JSAMPLE=16 -DPPM_SUPPORTED")
-  add_executable(djpeg-static djpeg.c cdjpeg.c rdcolmap.c rdswitch.c wrbmp.c
-    wrgif.c wrppm.c wrtarga.c $<TARGET_OBJECTS:djpeg12-static>
-    $<TARGET_OBJECTS:djpeg16-static>)
-  set_property(TARGET djpeg-static PROPERTY COMPILE_FLAGS
+  add_executable(djpeg djpeg.c cdjpeg.c rdcolmap.c rdswitch.c wrbmp.c
+    wrgif.c wrppm.c wrtarga.c $<TARGET_OBJECTS:djpeg12>
+    $<TARGET_OBJECTS:djpeg16>)
+  set_property(TARGET djpeg PROPERTY COMPILE_FLAGS
     ${CDJPEG_COMPILE_FLAGS})
-  target_link_libraries(djpeg-static jpeg-static)
+  target_link_libraries(djpeg jpeg)
 
-  add_executable(jpegtran-static jpegtran.c cdjpeg.c rdswitch.c transupp.c)
-  target_link_libraries(jpegtran-static jpeg-static)
-  set_property(TARGET jpegtran-static PROPERTY COMPILE_FLAGS "${USE_SETMODE}")
+  add_executable(jpegtran jpegtran.c cdjpeg.c rdswitch.c transupp.c)
+  target_link_libraries(jpegtran jpeg)
+  set_property(TARGET jpegtran PROPERTY COMPILE_FLAGS "${USE_SETMODE}")
 
-  add_executable(example-static example.c)
-  target_link_libraries(example-static jpeg-static)
+  add_executable(example example.c)
+  target_link_libraries(example jpeg)
 endif()
 
+if(ENABLE_EXECUTABLES)
 add_executable(rdjpgcom rdjpgcom.c)
 
 add_executable(wrjpgcom wrjpgcom.c)
-
+endif() # ENABLE_EXECUTABLES
 
 ###############################################################################
 # TESTS
@@ -825,7 +847,9 @@ if(WITH_FUZZ)
   add_subdirectory(fuzz)
 endif()
 
+if(ENABLE_EXECUTABLES)
 add_executable(strtest strtest.c)
+endif() # ENABLE_EXECUTABLES
 
 add_subdirectory(md5)
 
@@ -1004,7 +1028,7 @@ endif()
 
 foreach(libtype ${TEST_LIBTYPES})
   if(libtype STREQUAL "static")
-    set(suffix -static)
+    set(suffix "") # static
   endif()
   if(WITH_TURBOJPEG)
     add_test(NAME tjunittest-${libtype}
@@ -1721,17 +1745,32 @@ endif()
 # INSTALLATION
 ###############################################################################
 
+set(public_headers
+    ${CMAKE_CURRENT_SOURCE_DIR}/jinclude.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/jerror.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/jmorecfg.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/jpeglib.h
+    #
+    ${CMAKE_CURRENT_BINARY_DIR}/jconfig.h
+    ${CMAKE_CURRENT_BINARY_DIR}/jconfigint.h
+)
+
 set(EXE ${CMAKE_EXECUTABLE_SUFFIX})
 
 if(WITH_TURBOJPEG)
+  list(APPEND public_headers ${CMAKE_CURRENT_SOURCE_DIR}/turbojpeg.h)
   if(ENABLE_SHARED)
+    set_target_properties(turbojpeg PROPERTIES PUBLIC_HEADER "${public_headers}")
     install(TARGETS turbojpeg EXPORT ${CMAKE_PROJECT_NAME}Targets
-      INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
       ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib
       LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib
-      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin)
+      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin
+      PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/jpeg
+      INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+    if(ENABLE_EXECUTABLES)
     install(TARGETS tjbench
       RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin)
+    endif() # ENABLE_EXECUTABLES
     if(NOT CMAKE_VERSION VERSION_LESS "3.1" AND MSVC AND
       CMAKE_C_LINKER_SUPPORTS_PDB)
       install(FILES "$<TARGET_PDB_FILE:turbojpeg>"
@@ -1739,45 +1778,50 @@ if(WITH_TURBOJPEG)
     endif()
   endif()
   if(ENABLE_STATIC)
-    install(TARGETS turbojpeg-static EXPORT ${CMAKE_PROJECT_NAME}Targets
-      INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
-      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib)
-    if(NOT ENABLE_SHARED)
+    set_target_properties(turbojpeg PROPERTIES PUBLIC_HEADER "${public_headers}")
+    install(TARGETS turbojpeg EXPORT ${CMAKE_PROJECT_NAME}Targets
+      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib
+      PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/jpeg
+      INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+    if(NOT ENABLE_SHARED AND ENABLE_EXECUTABLES)
       if(GENERATOR_IS_MULTI_CONFIG)
         set(DIR "${CMAKE_CURRENT_BINARY_DIR}/\${CMAKE_INSTALL_CONFIG_NAME}")
       else()
         set(DIR ${CMAKE_CURRENT_BINARY_DIR})
       endif()
-      install(PROGRAMS ${DIR}/tjbench-static${EXE}
+      install(PROGRAMS ${DIR}/tjbench${EXE}
         DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin RENAME tjbench${EXE})
     endif()
   endif()
-  install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/turbojpeg.h
-    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT include)
 endif()
 
 if(ENABLE_STATIC)
-  install(TARGETS jpeg-static EXPORT ${CMAKE_PROJECT_NAME}Targets
-    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
-    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib)
-  if(NOT ENABLE_SHARED)
+  set_target_properties(jpeg PROPERTIES PUBLIC_HEADER "${public_headers}")
+  install(TARGETS jpeg EXPORT ${CMAKE_PROJECT_NAME}Targets
+    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib
+    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/jpeg
+    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+  if(NOT ENABLE_SHARED AND ENABLE_EXECUTABLES)
     if(GENERATOR_IS_MULTI_CONFIG)
       set(DIR "${CMAKE_CURRENT_BINARY_DIR}/\${CMAKE_INSTALL_CONFIG_NAME}")
     else()
       set(DIR ${CMAKE_CURRENT_BINARY_DIR})
     endif()
-    install(PROGRAMS ${DIR}/cjpeg-static${EXE}
+    install(PROGRAMS ${DIR}/cjpeg${EXE}
       DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin RENAME cjpeg${EXE})
-    install(PROGRAMS ${DIR}/djpeg-static${EXE}
+    install(PROGRAMS ${DIR}/djpeg${EXE}
       DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin RENAME djpeg${EXE})
-    install(PROGRAMS ${DIR}/jpegtran-static${EXE}
+    install(PROGRAMS ${DIR}/jpegtran${EXE}
       DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin RENAME jpegtran${EXE})
   endif()
 endif()
 
+if(ENABLE_EXECUTABLES)
 install(TARGETS rdjpgcom wrjpgcom
   RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin)
+endif() # ENABLE_EXECUTABLES
 
+if(INSTALL_DOCS)
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/README.ijg
   ${CMAKE_CURRENT_SOURCE_DIR}/README.md ${CMAKE_CURRENT_SOURCE_DIR}/example.c
   ${CMAKE_CURRENT_SOURCE_DIR}/tjexample.c
@@ -1790,8 +1834,9 @@ if(WITH_JAVA)
   install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/java/TJExample.java
     DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT doc)
 endif()
+endif() # INSTALL_DOCS
 
-if(UNIX OR MINGW)
+if((UNIX OR MINGW) AND INSTALL_DOCS)
   install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cjpeg.1
     ${CMAKE_CURRENT_SOURCE_DIR}/djpeg.1 ${CMAKE_CURRENT_SOURCE_DIR}/jpegtran.1
     ${CMAKE_CURRENT_SOURCE_DIR}/rdjpgcom.1
@@ -1814,11 +1859,6 @@ install(EXPORT ${CMAKE_PROJECT_NAME}Targets
   DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${CMAKE_PROJECT_NAME}
   COMPONENT lib)
 
-install(FILES ${CMAKE_CURRENT_BINARY_DIR}/jconfig.h
-  ${CMAKE_CURRENT_SOURCE_DIR}/jerror.h ${CMAKE_CURRENT_SOURCE_DIR}/jmorecfg.h
-  ${CMAKE_CURRENT_SOURCE_DIR}/jpeglib.h
-  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT include)
-
 include(cmakescripts/BuildPackages.cmake)
 
 configure_file("${CMAKE_CURRENT_SOURCE_DIR}/cmakescripts/cmake_uninstall.cmake.in"
diff --git a/cmakescripts/BuildPackages.cmake b/cmakescripts/BuildPackages.cmake
index 2e0170f5..4b580c25 100644
--- a/cmakescripts/BuildPackages.cmake
+++ b/cmakescripts/BuildPackages.cmake
@@ -110,11 +110,11 @@ if(WITH_JAVA)
   set(JAVA_DEPEND turbojpeg-java)
 endif()
 if(WITH_TURBOJPEG)
-  set(TURBOJPEG_DEPEND turbojpeg turbojpeg-static tjbench)
+  set(TURBOJPEG_DEPEND turbojpeg tjbench)
 endif()
 add_custom_target(installer
   makensis -nocd ${INST_DEFS} installer.nsi
-  DEPENDS jpeg jpeg-static rdjpgcom wrjpgcom cjpeg djpeg jpegtran
+  DEPENDS jpeg rdjpgcom wrjpgcom cjpeg djpeg jpegtran
     ${JAVA_DEPEND} ${TURBOJPEG_DEPEND}
   SOURCES installer.nsi)
 
diff --git a/fuzz/CMakeLists.txt b/fuzz/CMakeLists.txt
index 2ed3f72e..26fdfb90 100644
--- a/fuzz/CMakeLists.txt
+++ b/fuzz/CMakeLists.txt
@@ -29,14 +29,14 @@ add_executable(cjpeg_fuzzer${FUZZER_SUFFIX} cjpeg.cc ../cdjpeg.c ../rdbmp.c
   ../rdgif.c ../rdppm.c ../rdswitch.c ../rdtarga.c)
 set_property(TARGET cjpeg_fuzzer${FUZZER_SUFFIX} PROPERTY COMPILE_FLAGS
   ${COMPILE_FLAGS})
-target_link_libraries(cjpeg_fuzzer${FUZZER_SUFFIX} ${FUZZ_LIBRARY} jpeg-static)
+target_link_libraries(cjpeg_fuzzer${FUZZER_SUFFIX} ${FUZZ_LIBRARY} jpeg)
 install(TARGETS cjpeg_fuzzer${FUZZER_SUFFIX}
   RUNTIME DESTINATION ${FUZZ_BINDIR} COMPONENT bin)
 
 macro(add_fuzz_target target source_file)
   add_executable(${target}_fuzzer${FUZZER_SUFFIX} ${source_file})
   target_link_libraries(${target}_fuzzer${FUZZER_SUFFIX} ${FUZZ_LIBRARY}
-    turbojpeg-static)
+    turbojpeg)
   install(TARGETS ${target}_fuzzer${FUZZER_SUFFIX}
     RUNTIME DESTINATION ${FUZZ_BINDIR} COMPONENT bin)
 endmacro()
diff --git a/win/gcc/projectTargets-release.cmake.in b/win/gcc/projectTargets-release.cmake.in
index 1e1a8a34..d1707fda 100644
--- a/win/gcc/projectTargets-release.cmake.in
+++ b/win/gcc/projectTargets-release.cmake.in
@@ -25,25 +25,5 @@ set_target_properties(@CMAKE_PROJECT_NAME@::turbojpeg PROPERTIES
 list(APPEND _IMPORT_CHECK_TARGETS @CMAKE_PROJECT_NAME@::turbojpeg )
 list(APPEND _IMPORT_CHECK_FILES_FOR_@CMAKE_PROJECT_NAME@::turbojpeg "${_IMPORT_PREFIX}/lib/libturbojpeg.dll.a" "${_IMPORT_PREFIX}/bin/libturbojpeg.dll" )
 
-# Import target "@CMAKE_PROJECT_NAME@::turbojpeg-static" for configuration "Release"
-set_property(TARGET @CMAKE_PROJECT_NAME@::turbojpeg-static APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
-set_target_properties(@CMAKE_PROJECT_NAME@::turbojpeg-static PROPERTIES
-  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "ASM_NASM;C"
-  IMPORTED_LOCATION_RELEASE "${_IMPORT_PREFIX}/lib/libturbojpeg.a"
-  )
-
-list(APPEND _IMPORT_CHECK_TARGETS @CMAKE_PROJECT_NAME@::turbojpeg-static )
-list(APPEND _IMPORT_CHECK_FILES_FOR_@CMAKE_PROJECT_NAME@::turbojpeg-static "${_IMPORT_PREFIX}/lib/libturbojpeg.a" )
-
-# Import target "@CMAKE_PROJECT_NAME@::jpeg-static" for configuration "Release"
-set_property(TARGET @CMAKE_PROJECT_NAME@::jpeg-static APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
-set_target_properties(@CMAKE_PROJECT_NAME@::jpeg-static PROPERTIES
-  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "ASM_NASM;C"
-  IMPORTED_LOCATION_RELEASE "${_IMPORT_PREFIX}/lib/libjpeg.a"
-  )
-
-list(APPEND _IMPORT_CHECK_TARGETS @CMAKE_PROJECT_NAME@::jpeg-static )
-list(APPEND _IMPORT_CHECK_FILES_FOR_@CMAKE_PROJECT_NAME@::jpeg-static "${_IMPORT_PREFIX}/lib/libjpeg.a" )
-
 # Commands beyond this point should not need to know the version.
 set(CMAKE_IMPORT_FILE_VERSION)
diff --git a/win/projectTargets.cmake.in b/win/projectTargets.cmake.in
index 05ab4984..f044a259 100644
--- a/win/projectTargets.cmake.in
+++ b/win/projectTargets.cmake.in
@@ -16,7 +16,7 @@ set(CMAKE_IMPORT_FILE_VERSION 1)
 set(_targetsDefined)
 set(_targetsNotDefined)
 set(_expectedTargets)
-foreach(_expectedTarget @CMAKE_PROJECT_NAME@::jpeg @CMAKE_PROJECT_NAME@::turbojpeg @CMAKE_PROJECT_NAME@::turbojpeg-static @CMAKE_PROJECT_NAME@::jpeg-static)
+foreach(_expectedTarget @CMAKE_PROJECT_NAME@::jpeg @CMAKE_PROJECT_NAME@::turbojpeg)
   list(APPEND _expectedTargets ${_expectedTarget})
   if(NOT TARGET ${_expectedTarget})
     list(APPEND _targetsNotDefined ${_expectedTarget})
@@ -64,20 +64,6 @@ set_target_properties(@CMAKE_PROJECT_NAME@::turbojpeg PROPERTIES
   INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
 )
 
-# Create imported target @CMAKE_PROJECT_NAME@::turbojpeg-static
-add_library(@CMAKE_PROJECT_NAME@::turbojpeg-static STATIC IMPORTED)
-
-set_target_properties(@CMAKE_PROJECT_NAME@::turbojpeg-static PROPERTIES
-  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
-)
-
-# Create imported target @CMAKE_PROJECT_NAME@::jpeg-static
-add_library(@CMAKE_PROJECT_NAME@::jpeg-static STATIC IMPORTED)
-
-set_target_properties(@CMAKE_PROJECT_NAME@::jpeg-static PROPERTIES
-  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
-)
-
 # Load information for each installed configuration.
 get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
 file(GLOB CONFIG_FILES "${_DIR}/@CMAKE_PROJECT_NAME@Targets-*.cmake")
diff --git a/win/vc/projectTargets-release.cmake.in b/win/vc/projectTargets-release.cmake.in
index 7abb281b..eb2575b6 100644
--- a/win/vc/projectTargets-release.cmake.in
+++ b/win/vc/projectTargets-release.cmake.in
@@ -25,25 +25,5 @@ set_target_properties(@CMAKE_PROJECT_NAME@::turbojpeg PROPERTIES
 list(APPEND _IMPORT_CHECK_TARGETS @CMAKE_PROJECT_NAME@::turbojpeg )
 list(APPEND _IMPORT_CHECK_FILES_FOR_@CMAKE_PROJECT_NAME@::turbojpeg "${_IMPORT_PREFIX}/lib/turbojpeg.lib" "${_IMPORT_PREFIX}/bin/turbojpeg.dll" )
 
-# Import target "@CMAKE_PROJECT_NAME@::turbojpeg-static" for configuration "Release"
-set_property(TARGET @CMAKE_PROJECT_NAME@::turbojpeg-static APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
-set_target_properties(@CMAKE_PROJECT_NAME@::turbojpeg-static PROPERTIES
-  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "ASM_NASM;C"
-  IMPORTED_LOCATION_RELEASE "${_IMPORT_PREFIX}/lib/turbojpeg-static.lib"
-  )
-
-list(APPEND _IMPORT_CHECK_TARGETS @CMAKE_PROJECT_NAME@::turbojpeg-static )
-list(APPEND _IMPORT_CHECK_FILES_FOR_@CMAKE_PROJECT_NAME@::turbojpeg-static "${_IMPORT_PREFIX}/lib/turbojpeg-static.lib" )
-
-# Import target "@CMAKE_PROJECT_NAME@::jpeg-static" for configuration "Release"
-set_property(TARGET @CMAKE_PROJECT_NAME@::jpeg-static APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
-set_target_properties(@CMAKE_PROJECT_NAME@::jpeg-static PROPERTIES
-  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "ASM_NASM;C"
-  IMPORTED_LOCATION_RELEASE "${_IMPORT_PREFIX}/lib/jpeg-static.lib"
-  )
-
-list(APPEND _IMPORT_CHECK_TARGETS @CMAKE_PROJECT_NAME@::jpeg-static )
-list(APPEND _IMPORT_CHECK_FILES_FOR_@CMAKE_PROJECT_NAME@::jpeg-static "${_IMPORT_PREFIX}/lib/jpeg-static.lib" )
-
 # Commands beyond this point should not need to know the version.
 set(CMAKE_IMPORT_FILE_VERSION)
