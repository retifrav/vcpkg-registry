diff --git a/libgeotiff/CMakeLists.txt b/libgeotiff/CMakeLists.txt
index 4862f86..0ea42e1 100644
--- a/libgeotiff/CMakeLists.txt
+++ b/libgeotiff/CMakeLists.txt
@@ -5,14 +5,14 @@
 # Author: Mateusz Loskot <mateusz@loskot.net>
 #
 ###############################################################################
-CMAKE_MINIMUM_REQUIRED(VERSION 3.0.0)
+CMAKE_MINIMUM_REQUIRED(VERSION 3.22)
 
-PROJECT(GeoTIFF)
+PROJECT(geotiff)
 
 include(GNUInstallDirs)
 
 SET(GEOTIFF_LIB_NAME geotiff)
-SET(GEOTIFF_LIBRARY_TARGET geotiff_library)
+SET(GEOTIFF_LIBRARY_TARGET ${GEOTIFF_LIB_NAME})
 
 ##############################################################################
 # CMake settings
@@ -45,8 +45,6 @@ SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})
 ###############################################################################
 # General build settings
 
-option(BUILD_SHARED_LIBS "Set ON to build shared library" ON)
-
 IF(NOT CMAKE_BUILD_TYPE)
     SET(CMAKE_BUILD_TYPE Debug CACHE STRING
         "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel"
@@ -108,88 +106,29 @@ CHECK_INCLUDE_FILES(strings.h GEOTIFF_HAVE_STRINGS_H)
 ###############################################################################
 # User-defined build settings
 
-SET(WITH_UTILITIES TRUE CACHE BOOL "Choose if GeoTIFF utilities should be built")
-
 ###############################################################################
 # Search for dependencies
 
 INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
 INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/libxtiff)
 
-# TIFF support - required, default=ON
-SET(WITH_TIFF TRUE CACHE BOOL "Choose if TIFF support should be built")
+option(WITH_JPEG "Choose if JPEG support should be built" 0)
+option(WITH_ZLIB "Choose if zlib support should be built" 0)
+option(WITH_UTILITIES "Choose if GeoTIFF utilities should be built" 0)
 
-FIND_PACKAGE(PROJ NO_MODULE QUIET)
-if (NOT PROJ_FOUND)
-    FIND_PACKAGE(PROJ)
-endif ()
+find_package(PROJ CONFIG REQUIRED)
+find_package(tiff CONFIG REQUIRED)
 
-IF(PROJ_FOUND)
-    INCLUDE_DIRECTORIES(${PROJ_INCLUDE_DIR})
-ELSE()
-    MESSAGE(FATAL_ERROR "Failed to detect PROJ >= 6")
+IF(WITH_JPEG)
+    FIND_PACKAGE(jpeg-turbo CONFIG REQUIRED)
+    ADD_DEFINITIONS(-DHAVE_JPEG=1)
 ENDIF()
 
-# Zlib support - optional, default=OFF
-SET(WITH_ZLIB FALSE CACHE BOOL "Choose if zlib support should be built")
-
 IF(WITH_ZLIB)
-    FIND_PACKAGE(ZLIB NO_MODULE QUIET)
-    if (NOT ZLIB_FOUND)
-      FIND_PACKAGE(ZLIB)
-    endif ()
-
-    IF(ZLIB_FOUND)
-        SET(HAVE_ZIP 1)
-        INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})
-        ADD_DEFINITIONS(-DHAVE_ZIP=${HAVE_ZIP})
-    ENDIF()
+    FIND_PACKAGE(zlib CONFIG REQUIRED)
+    ADD_DEFINITIONS(-DHAVE_ZIP=1)
 ENDIF()
 
-# JPEG support - optional, default=OFF
-SET(WITH_JPEG FALSE CACHE BOOL "Choose if JPEG support should be built")
-
-IF(WITH_JPEG)
-    FIND_PACKAGE(JPEG NO_MODULE QUIET)
-    if (NOT JPEG_FOUND)
-      FIND_PACKAGE(JPEG)
-    endif ()
-
-    IF(JPEG_FOUND)
-        SET(HAVE_JPEG 1)
-        INCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIR})
-        ADD_DEFINITIONS(-DHAVE_JPEG=${HAVE_JPEG})
-    ENDIF()
-ENDIF()
-
-IF(WITH_TIFF)
-    FIND_PACKAGE(TIFF NO_MODULE QUIET)
-    if (NOT TIFF_FOUND)
-      FIND_PACKAGE(TIFF REQUIRED)
-    endif ()
-
-    IF(TIFF_FOUND)
-        # Confirm required API is available
-        INCLUDE(CheckFunctionExists)
-        SET(CMAKE_REQUIRED_LIBRARIES ${TIFF_LIBRARIES})
-
-        CHECK_FUNCTION_EXISTS(TIFFOpen HAVE_TIFFOPEN)
-        IF(NOT HAVE_TIFFOPEN)
-            SET(TIFF_FOUND) # ReSET to NOT found for TIFF library
-            MESSAGE(FATAL_ERROR "Failed to link with libtiff - TIFFOpen function not found")
-        ENDIF()
-
-        CHECK_FUNCTION_EXISTS(TIFFMergeFieldInfo HAVE_TIFFMERGEFIELDINFO)
-        IF(NOT HAVE_TIFFMERGEFIELDINFO)
-            SET(TIFF_FOUND) # ReSET to NOT found for TIFF library
-            MESSAGE(FATAL_ERROR "Failed to link with libtiff - TIFFMergeFieldInfo function not found. libtiff 3.6.0 Beta or later required. Please upgrade or use an older version of libgeotiff")
-        ENDIF()
-
-        INCLUDE_DIRECTORIES(${TIFF_INCLUDE_DIR})
-        ADD_DEFINITIONS(-DHAVE_TIFF=1)
-    ENDIF(TIFF_FOUND)
-ENDIF(WITH_TIFF)
-
 # Turn off TOWGS84 support
 SET(WITH_TOWGS84 TRUE CACHE BOOL "Build with TOWGS84 support")
 IF (NOT WITH_TOWGS84)
@@ -243,18 +182,6 @@ SET(GEOTIFF_MAN_PAGES
 
 #    ${PROJECT_BINARY_DIR}/geotiff_version.h
 
-# Install doc files
-INSTALL(FILES
-    AUTHORS ChangeLog COPYING LICENSE README README_BIN README.WIN
-    DESTINATION ${CMAKE_INSTALL_DOCDIR})
-
-# Install man pages
-INSTALL(FILES ${GEOTIFF_MAN_PAGES} DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
-
-
-# Install header files for development distribution
-INSTALL(FILES ${GEOTIFF_LIB_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
-
 ###############################################################################
 # Build libxtiff library
 
@@ -281,19 +208,15 @@ SET(GEOTIFF_LIB_SOURCES
 
 SET(XTIFF_SOURCES libxtiff/xtiff.c)
 
-if (MSVC OR CMAKE_CONFIGURATION_TYPES)
+#if (MSVC OR CMAKE_CONFIGURATION_TYPES)
   # For multi-config systems and for Visual Studio, the debug versions
   # of the libraries have a _d suffix.
-  set (CMAKE_DEBUG_POSTFIX _d)
-endif ()
+  set(CMAKE_DEBUG_POSTFIX d)
+#endif ()
 
 ADD_LIBRARY(${GEOTIFF_LIBRARY_TARGET}
     ${GEOTIFF_LIB_SOURCES} ${XTIFF_SOURCES})
 
-IF(WIN32 AND MSVC)
-    SET_TARGET_PROPERTIES(${GEOTIFF_LIBRARY_TARGET} PROPERTIES IMPORT_SUFFIX "_i.lib")
-ENDIF(WIN32 AND MSVC)
-
 # Unix, linux:
 if(UNIX)
    SET_TARGET_PROPERTIES(
@@ -313,54 +236,49 @@ endif()
 SET_TARGET_PROPERTIES(${GEOTIFF_LIBRARY_TARGET} PROPERTIES
    OUTPUT_NAME ${GEOTIFF_LIB_NAME})
 
-set(CONFIG_PUBLIC_DEPENDENCIES "")
-set(CONFIG_PRIVATE_DEPENDENCIES "")
-if(TARGET TIFF::TIFF)
-    set(TIFF_LIBRARIES TIFF::TIFF)
-    string(APPEND CONFIG_PUBLIC_DEPENDENCIES "find_dependency(TIFF)\n")
-endif()
-target_link_libraries(${GEOTIFF_LIBRARY_TARGET} PUBLIC
-    ${TIFF_LIBRARIES})
-
-if(TARGET PROJ::proj)
-    set(PROJ_LIBRARIES PROJ::proj)
-    string(APPEND CONFIG_PRIVATE_DEPENDENCIES "  find_dependency(PROJ CONFIG)\n")
-endif()
-target_link_libraries(${GEOTIFF_LIBRARY_TARGET} PRIVATE
-    ${PROJ_LIBRARIES})
-
-target_include_directories(
-  ${GEOTIFF_LIBRARY_TARGET}
-  PUBLIC $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>
-         $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
-
-INSTALL( TARGETS ${GEOTIFF_LIBRARY_TARGET}
-     EXPORT depends
-     RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
-     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
-     PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
-     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} )
-
-# Install libgeotiff.pc
-set(prefix "${CMAKE_INSTALL_PREFIX}")
-set(exec_prefix "\${prefix}")
-if(IS_ABSOLUTE "${CMAKE_INSTALL_LIBDIR}")
-    set(libdir "${CMAKE_INSTALL_LIBDIR}")
-else()
-    set(libdir "\${exec_prefix}/${CMAKE_INSTALL_LIBDIR}")
-endif()
-if(IS_ABSOLUTE "${CMAKE_INSTALL_INCLUDEDIR}")
-    set(includedir "${CMAKE_INSTALL_INCLUDEDIR}")
-else()
-    set(includedir "\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}")
-endif()
-SET(PACKAGE_NAME ${PROJECT_NAME})
-SET(VERSION ${PROJECT_VERSION})
-configure_file(libgeotiff.pc.in ${CMAKE_CURRENT_BINARY_DIR}/libgeotiff.pc @ONLY)
-
-INSTALL(
-    FILES ${CMAKE_CURRENT_BINARY_DIR}/libgeotiff.pc
-    DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
+target_link_libraries(${GEOTIFF_LIBRARY_TARGET}
+    PRIVATE
+        TIFF::tiff
+        PROJ::proj
+)
+
+target_include_directories(${GEOTIFF_LIBRARY_TARGET}
+    PRIVATE
+        ${CMAKE_CURRENT_SOURCE_DIR}
+    PUBLIC
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
+)
+
+set_target_properties(${GEOTIFF_LIBRARY_TARGET} PROPERTIES PUBLIC_HEADER "${GEOTIFF_LIB_HEADERS}")
+
+install(TARGETS ${GEOTIFF_LIBRARY_TARGET}
+    EXPORT "${GEOTIFF_LIBRARY_TARGET}Targets"
+    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${GEOTIFF_LIBRARY_TARGET}
+    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+)
+# generate and install export file
+install(EXPORT "${GEOTIFF_LIBRARY_TARGET}Targets"
+    FILE "${GEOTIFF_LIBRARY_TARGET}Targets.cmake"
+    DESTINATION "share/${GEOTIFF_LIBRARY_TARGET}"
+)
+
+include(CMakePackageConfigHelpers)
+
+# create config file
+configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in
+    "${CMAKE_CURRENT_BINARY_DIR}/${GEOTIFF_LIBRARY_TARGET}Config.cmake"
+    INSTALL_DESTINATION "share/${GEOTIFF_LIBRARY_TARGET}"
+)
+# install config files
+install(FILES
+    "${CMAKE_CURRENT_BINARY_DIR}/${GEOTIFF_LIBRARY_TARGET}Config.cmake"
+    DESTINATION "share/${GEOTIFF_LIBRARY_TARGET}"
+)
+# generate the export targets for the build tree
+export(EXPORT "${GEOTIFF_LIBRARY_TARGET}Targets"
+    FILE "${CMAKE_CURRENT_BINARY_DIR}/cmake/${GEOTIFF_LIBRARY_TARGET}Targets.cmake"
+)
 
 # Define grouping of source files in PROJECT file (e.g. Visual Studio)
 SOURCE_GROUP("CMake Files" FILES CMakeLists.txt)
@@ -374,4 +292,3 @@ IF(WITH_UTILITIES)
     ADD_SUBDIRECTORY(bin)
 ENDIF()
 
-ADD_SUBDIRECTORY(cmake)
diff --git a/libgeotiff/bin/CMakeLists.txt b/libgeotiff/bin/CMakeLists.txt
index c61585c..07b2127 100644
--- a/libgeotiff/bin/CMakeLists.txt
+++ b/libgeotiff/bin/CMakeLists.txt
@@ -30,8 +30,15 @@ TARGET_LINK_LIBRARIES(geotifcp
     PRIVATE
     xtiff
     ${GEOTIFF_LIBRARY_TARGET}
-    ${JPEG_LIBRARIES}
-    ${ZLIB_LIBRARIES})
+)
+
+if(WITH_JPEG)
+    target_link_libraries(geotifcp PRIVATE jpeg-turbo::jpeg-static)
+endif()
+
+if(WITH_ZLIB)
+    target_link_libraries(geotifcp PRIVATE zlib)
+endif()
 
 SET(GEOTIFF_UTILITIES ${GEOTIFF_UTILITIES} geotifcp )
 
diff --git a/libgeotiff/geo_free.c b/libgeotiff/geo_free.c
index 0edf557..80c0f8d 100644
--- a/libgeotiff/geo_free.c
+++ b/libgeotiff/geo_free.c
@@ -15,7 +15,7 @@
 #include "geo_tiffp.h" /* external TIFF interface */
 #include "geo_keyp.h"  /* private interface       */
 
-#include "proj.h"
+#include <proj/proj.h>
 
 /**********************************************************************
  *
diff --git a/libgeotiff/geo_keyp.h b/libgeotiff/geo_keyp.h
index c13f2ec..e2c34dc 100644
--- a/libgeotiff/geo_keyp.h
+++ b/libgeotiff/geo_keyp.h
@@ -15,7 +15,7 @@
 
 #include <stdlib.h> /* for size_t */
 
-#include "proj.h"
+#include <proj/proj.h>
 
 /*
  * This structure contains the internal program
diff --git a/libgeotiff/geo_names.c b/libgeotiff/geo_names.c
index c7e148d..757cbbb 100644
--- a/libgeotiff/geo_names.c
+++ b/libgeotiff/geo_names.c
@@ -18,7 +18,7 @@
 #include "geo_tiffp.h" /* for tag names */
 #include "geo_keyp.h"
 
-#include "proj.h"
+#include <proj/proj.h>
 
 static const KeyInfo _formatInfo[] =  {
    {TYPE_BYTE,    "Byte"},
diff --git a/libgeotiff/geo_normalize.c b/libgeotiff/geo_normalize.c
index 1151746..58af8a7 100644
--- a/libgeotiff/geo_normalize.c
+++ b/libgeotiff/geo_normalize.c
@@ -39,7 +39,7 @@
 #include "geo_normalize.h"
 #include "geo_keyp.h"
 
-#include "proj.h"
+#include <proj/proj.h>
 
 #ifndef KvUserDefined
 #  define KvUserDefined 32767
diff --git a/libgeotiff/geotiff_proj4.c b/libgeotiff/geotiff_proj4.c
index 9d25a7c..386bca1 100644
--- a/libgeotiff/geotiff_proj4.c
+++ b/libgeotiff/geotiff_proj4.c
@@ -38,7 +38,7 @@
 #include "geo_normalize.h"
 #include "geovalues.h"
 #include "geo_tiffp.h"
-#include "proj.h"
+#include <proj/proj.h>
 
 /************************************************************************/
 /*                    GTIFProj4AppendEllipsoid()                        */
diff --git a/libgeotiff/libxtiff/CMakeLists.txt b/libgeotiff/libxtiff/CMakeLists.txt
index 747313c..9e15c80 100644
--- a/libgeotiff/libxtiff/CMakeLists.txt
+++ b/libgeotiff/libxtiff/CMakeLists.txt
@@ -7,3 +7,5 @@
 ###############################################################################
 
 ADD_LIBRARY(xtiff STATIC xtiff.c)
+
+target_link_libraries(xtiff PRIVATE TIFF::tiff)
diff --git a/libgeotiff/libxtiff/xtiffio.h b/libgeotiff/libxtiff/xtiffio.h
index cb09435..0f3ee82 100644
--- a/libgeotiff/libxtiff/xtiffio.h
+++ b/libgeotiff/libxtiff/xtiffio.h
@@ -7,7 +7,7 @@
 #ifndef LIBGEOTIFF_XTIFFIO_H_
 #define LIBGEOTIFF_XTIFFIO_H_
 
-#include "tiffio.h"
+#include <tiff/tiffio.h>
 #include "geo_config.h"
 
 /**
