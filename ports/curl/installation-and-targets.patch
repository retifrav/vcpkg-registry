diff --git a/CMakeLists.txt b/CMakeLists.txt
index 49a44eabf..5bb16437d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -70,6 +70,7 @@ include(CMakeDependentOption)
 include(CheckCCompilerFlag)
 
 project(CURL C)
+string(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWER)
 
 file(STRINGS ${CURL_SOURCE_DIR}/include/curl/curlver.h CURL_VERSION_H_CONTENTS REGEX "#define LIBCURL_VERSION( |_NUM )")
 string(REGEX MATCH "#define LIBCURL_VERSION \"[^\"]*"
@@ -79,6 +80,9 @@ string(REGEX MATCH "#define LIBCURL_VERSION_NUM 0x[0-9a-fA-F]+"
   CURL_VERSION_NUM ${CURL_VERSION_H_CONTENTS})
 string(REGEX REPLACE "[^0]+0x" "" CURL_VERSION_NUM ${CURL_VERSION_NUM})
 
+set(CURL_VERSION_SEMVER ${CURL_VERSION})
+string(REGEX REPLACE "-[A-Za-z]+$" "" CURL_VERSION_SEMVER ${CURL_VERSION_SEMVER})
+#message("CURL_VERSION_SEMVER: ${CURL_VERSION_SEMVER}")
 
 # Setup package meta-data
 # SET(PACKAGE "curl")
@@ -141,7 +145,7 @@ endif()
 
 # For debug libs and exes, add "-d" postfix
 if(NOT DEFINED CMAKE_DEBUG_POSTFIX)
-  set(CMAKE_DEBUG_POSTFIX "-d")
+  set(CMAKE_DEBUG_POSTFIX "d")
 endif()
 
 # initialize CURL_LIBS
@@ -1391,14 +1395,6 @@ function(transform_makefile_inc INPUT_FILE OUTPUT_FILE)
   set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS "${INPUT_FILE}")
 endfunction()
 
-include(GNUInstallDirs)
-
-set(CURL_INSTALL_CMAKE_DIR ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})
-set(TARGETS_EXPORT_NAME "${PROJECT_NAME}Targets")
-set(generated_dir "${CMAKE_CURRENT_BINARY_DIR}/generated")
-set(project_config "${generated_dir}/${PROJECT_NAME}Config.cmake")
-set(version_config "${generated_dir}/${PROJECT_NAME}ConfigVersion.cmake")
-
 if(USE_MANUAL)
   add_subdirectory(docs)
 endif()
@@ -1586,83 +1582,44 @@ set(REQUIRE_LIB_DEPS        "no")
 # SUPPORT_PROTOCOLS
 set(VERSIONNUM              "${CURL_VERSION_NUM}")
 
-# Finally generate a "curl-config" matching this config
-# Use:
-# * ENABLE_SHARED
-# * ENABLE_STATIC
-configure_file("${CURL_SOURCE_DIR}/curl-config.in"
-               "${CURL_BINARY_DIR}/curl-config" @ONLY)
-install(FILES "${CURL_BINARY_DIR}/curl-config"
-        DESTINATION ${CMAKE_INSTALL_BINDIR}
-        PERMISSIONS
-          OWNER_READ OWNER_WRITE OWNER_EXECUTE
-          GROUP_READ GROUP_EXECUTE
-          WORLD_READ WORLD_EXECUTE)
-
-# Finally generate a pkg-config file matching this config
-configure_file("${CURL_SOURCE_DIR}/libcurl.pc.in"
-               "${CURL_BINARY_DIR}/libcurl.pc" @ONLY)
-install(FILES "${CURL_BINARY_DIR}/libcurl.pc"
-        DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
-
-# install headers
-install(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/include/curl"
-    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
-    FILES_MATCHING PATTERN "*.h")
+# --- installation
 
+include(GNUInstallDirs)
 include(CMakePackageConfigHelpers)
-write_basic_package_version_file(
-    "${version_config}"
-    VERSION ${CURL_VERSION}
-    COMPATIBILITY SameMajorVersion
+
+file(GLOB public_headers "${CMAKE_CURRENT_SOURCE_DIR}/include/curl/*.h")
+set_target_properties(${PROJECT_NAME_LOWER} PROPERTIES PUBLIC_HEADER "${public_headers}")
+
+# install the target and create export-set
+install(TARGETS ${PROJECT_NAME_LOWER}
+    EXPORT ${PROJECT_NAME_LOWER}Targets
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} # bin
+    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} # lib
+    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} # lib
+    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME_LOWER} # include/curl
+    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} # include
 )
-file(READ "${version_config}" generated_version_config)
-file(WRITE "${version_config}"
-"if(NOT PACKAGE_FIND_VERSION_RANGE AND PACKAGE_FIND_VERSION_MAJOR STREQUAL \"7\")
-    # Version 8 satisfies version 7... requirements
-    set(PACKAGE_FIND_VERSION_MAJOR 8)
-    set(PACKAGE_FIND_VERSION_COUNT 1)
-endif()
-${generated_version_config}"
+# generate and install export file
+install(EXPORT "${PROJECT_NAME_LOWER}Targets"
+    FILE "${PROJECT_NAME_LOWER}Targets.cmake"
+    NAMESPACE ${PROJECT_NAME}::
+    DESTINATION "share/${PROJECT_NAME_LOWER}"
 )
-
-# Use:
-# * TARGETS_EXPORT_NAME
-# * PROJECT_NAME
-configure_package_config_file(CMake/curl-config.cmake.in
-        "${project_config}"
-        INSTALL_DESTINATION ${CURL_INSTALL_CMAKE_DIR}
+# generate the version file for the config file
+write_basic_package_version_file(
+    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME_LOWER}ConfigVersion.cmake"
+    VERSION "${CURL_VERSION_SEMVER}"
+    COMPATIBILITY AnyNewerVersion
 )
-
-if(CURL_ENABLE_EXPORT_TARGET)
-  install(
-          EXPORT "${TARGETS_EXPORT_NAME}"
-          NAMESPACE "${PROJECT_NAME}::"
-          DESTINATION ${CURL_INSTALL_CMAKE_DIR}
-  )
-endif()
-
-install(
-        FILES ${version_config} ${project_config}
-        DESTINATION ${CURL_INSTALL_CMAKE_DIR}
+# create config file
+configure_package_config_file(
+    "${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in"
+    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME_LOWER}Config.cmake"
+    INSTALL_DESTINATION "share/${PROJECT_NAME_LOWER}"
 )
-
-# Workaround for MSVS10 to avoid the Dialog Hell
-# FIXME: This could be removed with future version of CMake.
-if(MSVC_VERSION EQUAL 1600)
-  set(CURL_SLN_FILENAME "${CMAKE_CURRENT_BINARY_DIR}/CURL.sln")
-  if(EXISTS "${CURL_SLN_FILENAME}")
-    file(APPEND "${CURL_SLN_FILENAME}" "\n# This should be regenerated!\n")
-  endif()
-endif()
-
-if(NOT TARGET curl_uninstall)
-  configure_file(
-      ${CMAKE_CURRENT_SOURCE_DIR}/CMake/cmake_uninstall.cmake.in
-      ${CMAKE_CURRENT_BINARY_DIR}/CMake/cmake_uninstall.cmake
-      IMMEDIATE @ONLY)
-
-  add_custom_target(curl_uninstall
-      COMMAND ${CMAKE_COMMAND} -P
-      ${CMAKE_CURRENT_BINARY_DIR}/CMake/cmake_uninstall.cmake)
-endif()
+# install config files
+install(FILES
+    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME_LOWER}Config.cmake"
+    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME_LOWER}ConfigVersion.cmake"
+    DESTINATION "share/${PROJECT_NAME_LOWER}"
+ )
diff --git a/Config.cmake.in b/Config.cmake.in
new file mode 100644
index 000000000..f4aa95c0b
--- /dev/null
+++ b/Config.cmake.in
@@ -0,0 +1,15 @@
+@PACKAGE_INIT@
+
+include(CMakeFindDependencyMacro)
+
+if(@USE_OPENSSL@)
+    find_dependency(OpenSSL REQUIRED) # no CONFIG, unfortunately
+endif()
+
+if(@USE_ZLIB@)
+    find_dependency(zlib CONFIG REQUIRED)
+endif()
+
+include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME_LOWER@Targets.cmake")
+
+check_required_components(@PROJECT_NAME@)
diff --git a/lib/CMakeLists.txt b/lib/CMakeLists.txt
index 845d1e319..11f5cb724 100644
--- a/lib/CMakeLists.txt
+++ b/lib/CMakeLists.txt
@@ -21,8 +21,8 @@
 # SPDX-License-Identifier: curl
 #
 ###########################################################################
-set(LIB_NAME libcurl)
-set(LIBCURL_OUTPUT_NAME libcurl CACHE STRING "Basename of the curl library")
+set(LIB_NAME ${PROJECT_NAME_LOWER})
+#set(LIBCURL_OUTPUT_NAME libcurl CACHE STRING "Basename of the curl library")
 add_definitions(-DBUILDING_LIBCURL)
 
 if(BUILD_SHARED_LIBS)
@@ -80,7 +80,7 @@ include(${CMAKE_CURRENT_BINARY_DIR}/Makefile.soname.cmake)
 
 set_target_properties(${LIB_NAME} PROPERTIES
   COMPILE_DEFINITIONS BUILDING_LIBCURL
-  OUTPUT_NAME ${LIBCURL_OUTPUT_NAME}
+  #OUTPUT_NAME ${LIBCURL_OUTPUT_NAME}
   )
 
 if(CMAKE_SYSTEM_NAME STREQUAL "AIX" OR
@@ -114,8 +114,8 @@ if(HIDES_CURL_PRIVATE_SYMBOLS)
 endif()
 
 # Remove the "lib" prefix since the library is already named "libcurl".
-set_target_properties(${LIB_NAME} PROPERTIES PREFIX "")
-set_target_properties(${LIB_NAME} PROPERTIES IMPORT_PREFIX "")
+#set_target_properties(${LIB_NAME} PROPERTIES PREFIX "")
+#set_target_properties(${LIB_NAME} PROPERTIES IMPORT_PREFIX "")
 
 if(CURL_HAS_LTO)
   set_target_properties(${LIB_NAME} PROPERTIES
@@ -125,11 +125,11 @@ endif()
 
 if(WIN32)
   if(BUILD_SHARED_LIBS)
-    if(MSVC)
-      # Add "_imp" as a suffix before the extension to avoid conflicting with
-      # the statically linked "libcurl.lib"
-      set_target_properties(${LIB_NAME} PROPERTIES IMPORT_SUFFIX "_imp.lib")
-    endif()
+    #if(MSVC)
+    #  # Add "_imp" as a suffix before the extension to avoid conflicting with
+    #  # the statically linked "libcurl.lib"
+    #  set_target_properties(${LIB_NAME} PROPERTIES IMPORT_SUFFIX "_imp.lib")
+    #endif()
   endif()
 elseif(NOT CMAKE_CROSSCOMPILING)
   # on not-Windows and not-crosscompiling, check for writable argv[]
@@ -147,17 +147,3 @@ endif()
 target_include_directories(${LIB_NAME} INTERFACE
   $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
   $<BUILD_INTERFACE:${CURL_SOURCE_DIR}/include>)
-
-if(CURL_ENABLE_EXPORT_TARGET)
-  install(TARGETS ${LIB_NAME}
-    EXPORT ${TARGETS_EXPORT_NAME}
-    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
-    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
-    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
-  )
-
-  export(TARGETS ${LIB_NAME}
-         FILE ${PROJECT_BINARY_DIR}/libcurl-target.cmake
-         NAMESPACE ${PROJECT_NAME}::
-  )
-endif()
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 91825ec9a..462a10569 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -21,7 +21,7 @@
 # SPDX-License-Identifier: curl
 #
 ###########################################################################
-set(EXE_NAME curl)
+set(EXE_NAME curl-tool)
 
 if(USE_MANUAL)
   # Use the C locale to ensure that only ASCII characters appear in the
@@ -95,7 +95,7 @@ include_directories(
   )
 
 #Build curl executable
-target_link_libraries(${EXE_NAME} libcurl ${CURL_LIBS})
+target_link_libraries(${EXE_NAME} ${PROJECT_NAME_LOWER} ${CURL_LIBS})
 
 ################################################################################
 
@@ -105,8 +105,12 @@ target_link_libraries(${EXE_NAME} libcurl ${CURL_LIBS})
 
 #INCLUDE(ModuleInstall OPTIONAL)
 
-install(TARGETS ${EXE_NAME} EXPORT ${TARGETS_EXPORT_NAME} DESTINATION ${CMAKE_INSTALL_BINDIR})
-export(TARGETS ${EXE_NAME}
-       FILE ${PROJECT_BINARY_DIR}/curl-target.cmake
-       NAMESPACE ${PROJECT_NAME}::
+set_target_properties(${EXE_NAME} PROPERTIES OUTPUT_NAME ${PROJECT_NAME_LOWER})
+install(TARGETS ${EXE_NAME}
+    #EXPORT ${PROJECT_NAME_LOWER}Targets
+    DESTINATION ${CMAKE_INSTALL_BINDIR}
 )
+#export(TARGETS ${EXE_NAME}
+#       APPEND FILE ${PROJECT_BINARY_DIR}/curl-target.cmake
+#       NAMESPACE ${PROJECT_NAME}::
+#)
