diff --git a/code/CMakeLists.txt b/code/CMakeLists.txt
index b87bc665f..e551598af 100644
--- a/code/CMakeLists.txt
+++ b/code/CMakeLists.txt
@@ -1176,6 +1176,13 @@ ENDIF()
 ADD_LIBRARY( assimp ${assimp_src} )
 ADD_LIBRARY(assimp::assimp ALIAS assimp)
 
+if(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
+    target_compile_definitions(${PROJECT_NAME}
+       PRIVATE
+           "WINAPI_FAMILY=WINAPI_FAMILY_APP"
+    )
+endif()
+
 # Add or remove dllexport tags depending on the library type.
 IF (BUILD_SHARED_LIBS)
   TARGET_COMPILE_DEFINITIONS(assimp PRIVATE ASSIMP_BUILD_DLL_EXPORT)
diff --git a/code/Common/ImporterRegistry.cpp b/code/Common/ImporterRegistry.cpp
index 78c02d96d..3eb984b5b 100644
--- a/code/Common/ImporterRegistry.cpp
+++ b/code/Common/ImporterRegistry.cpp
@@ -214,7 +214,12 @@ void GetImporterInstanceList(std::vector<BaseImporter *> &out) {
     // Some importers may be unimplemented or otherwise unsuitable for general use
     // in their current state. Devs can set ASSIMP_ENABLE_DEV_IMPORTERS in their
     // local environment to enable them, otherwise they're left out of the registry.
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)
+    // https://github.com/assimp/assimp/issues/3937
+    const char *envStr = getenv("ASSIMP_ENABLE_DEV_IMPORTERS");
+#else
     const char *envStr = std::getenv("ASSIMP_ENABLE_DEV_IMPORTERS");
+#endif
     bool devImportersEnabled = envStr && strcmp(envStr, "0");
 
     // Ensure no unused var warnings if all uses are #ifndef'd away below:
diff --git a/contrib/unzip/crypt.c b/contrib/unzip/crypt.c
index 4cc731b3e..a54abcf3c 100644
--- a/contrib/unzip/crypt.c
+++ b/contrib/unzip/crypt.c
@@ -99,11 +99,13 @@ int cryptrand(unsigned char *buf, unsigned int len)
     static unsigned calls = 0;
     int rlen = 0;
 #ifdef _WIN32
-    HCRYPTPROV provider;
     unsigned __int64 pentium_tsc[1];
-    int result = 0;
-
 
+// https://github.com/assimp/assimp/issues/3937
+//#if !defined(WINAPI_FAMILY_PARTITION) || (defined(WINAPI_FAMILY_PARTITION) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP))
+#if !defined(WINAPI_FAMILY)
+    HCRYPTPROV provider;
+    int result = 0;
     if (CryptAcquireContext(&provider, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT | CRYPT_SILENT))
     {
         result = CryptGenRandom(provider, len, buf);
@@ -111,6 +113,7 @@ int cryptrand(unsigned char *buf, unsigned int len)
         if (result)
             return len;
     }
+#endif
 
     for (rlen = 0; rlen < (int)len; ++rlen)
     {
