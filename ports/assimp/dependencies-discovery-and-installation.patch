diff --git a/CMakeLists.txt b/CMakeLists.txt
index 75b160c6f..ff7126336 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -55,7 +55,7 @@ IF(ASSIMP_HUNTER_ENABLED)
   add_definitions(-DASSIMP_USE_HUNTER)
 ENDIF()
 
-PROJECT(Assimp VERSION 5.3.0)
+PROJECT(assimp VERSION 5.3.1)
 
 # All supported options ###############################################
 
@@ -129,18 +129,6 @@ OPTION ( ASSIMP_IGNORE_GIT_HASH
    OFF
 )
 
-IF (WIN32)
-  OPTION( ASSIMP_BUILD_ZLIB
-    "Build your own zlib"
-    ON
-  )
-ELSE()
-  OPTION( ASSIMP_BUILD_ZLIB
-    "Build your own zlib"
-    ON
-  )
-ENDIF()
-
 IF (WIN32)
   # Use subset of Windows.h
   ADD_DEFINITIONS( -DWIN32_LEAN_AND_MEAN )
@@ -241,8 +229,8 @@ INCLUDE_DIRECTORIES( BEFORE
 )
 
 LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake-modules" )
-SET(LIBASSIMP_COMPONENT     "libassimp${ASSIMP_VERSION_MAJOR}.${ASSIMP_VERSION_MINOR}.${ASSIMP_VERSION_PATCH}" )
-SET(LIBASSIMP-DEV_COMPONENT "libassimp${ASSIMP_VERSION_MAJOR}.${ASSIMP_VERSION_MINOR}.${ASSIMP_VERSION_PATCH}-dev" )
+SET(LIBASSIMP_COMPONENT     "lib${PROJECT_NAME}")
+SET(LIBASSIMP-DEV_COMPONENT "lib${PROJECT_NAME}-dev")
 SET(CPACK_COMPONENTS_ALL assimp-bin ${LIBASSIMP_COMPONENT} ${LIBASSIMP-DEV_COMPONENT} assimp-dev)
 SET(ASSIMP_LIBRARY_SUFFIX "" CACHE STRING "Suffix to append to library names")
 
@@ -291,9 +279,9 @@ ELSEIF(MSVC)
   ENDIF()
   # supress warning for double to float conversion if Double precission is activated
   ADD_COMPILE_OPTIONS(/wd4244) 
-  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /D_DEBUG /Zi /Od")
-  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
-  SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /DEBUG:FULL /PDBALTPATH:%_PDB% /OPT:REF /OPT:ICF")
+  #SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /D_DEBUG /Zi /Od")
+  #SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
+  #SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /DEBUG:FULL /PDBALTPATH:%_PDB% /OPT:REF /OPT:ICF")
 ELSEIF (CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
   IF(NOT ASSIMP_HUNTER_ENABLED)
     SET(CMAKE_POSITION_INDEPENDENT_CODE ON)
@@ -429,7 +417,7 @@ IF(ASSIMP_HUNTER_ENABLED)
   set(VERSION_CONFIG "${GENERATED_DIR}/${PROJECT_NAME}ConfigVersion.cmake")
   set(PROJECT_CONFIG "${GENERATED_DIR}/${PROJECT_NAME}Config.cmake")
 ELSE()
-  set(CONFIG_INSTALL_DIR "${ASSIMP_LIB_INSTALL_DIR}/cmake/assimp-${ASSIMP_VERSION_MAJOR}.${ASSIMP_VERSION_MINOR}")
+  set(CONFIG_INSTALL_DIR "share/${PROJECT_NAME}")
   set(CMAKE_CONFIG_TEMPLATE_FILE "cmake-modules/assimp-plain-config.cmake.in")
   string(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWERCASE)
   set(NAMESPACE "${PROJECT_NAME_LOWERCASE}::")
@@ -471,56 +459,10 @@ ENDIF()
 
 # Search for external dependencies, and build them from source if not found
 # Search for zlib
-IF(ASSIMP_HUNTER_ENABLED)
-  hunter_add_package(ZLIB)
-  find_package(ZLIB CONFIG REQUIRED)
-
-  add_definitions(-DASSIMP_BUILD_NO_OWN_ZLIB)
-  set(ZLIB_FOUND TRUE)
-  set(ZLIB_LIBRARIES ZLIB::zlib)
-  set(ASSIMP_BUILD_MINIZIP TRUE)
-ELSE()
-  # If the zlib is already found outside, add an export in case assimpTargets can't find it.
-  IF( ZLIB_FOUND )
-    INSTALL( TARGETS zlib zlibstatic
-        EXPORT "${TARGETS_EXPORT_NAME}")
-  ENDIF()
-
-  IF ( NOT ASSIMP_BUILD_ZLIB )
-    FIND_PACKAGE(ZLIB)
-  ENDIF()
-
-  IF ( NOT ZLIB_FOUND AND NOT ASSIMP_BUILD_ZLIB )
-    message( FATAL_ERROR
-      "Build configured with -DASSIMP_BUILD_ZLIB=OFF but unable to find zlib"
-    )
-  ELSEIF( NOT ZLIB_FOUND )
-    MESSAGE(STATUS "compiling zlib from sources")
-    INCLUDE(CheckIncludeFile)
-    INCLUDE(CheckTypeSize)
-    INCLUDE(CheckFunctionExists)
-
-    # Explicitly turn off ASM686 and AMD64 cmake options.
-    # The AMD64 option causes a build failure on MSVC and the ASM builds seem to have problems:
-    #		https://github.com/madler/zlib/issues/41#issuecomment-125848075
-    # Also prevents these options from "polluting" the cmake options if assimp is being
-    # included as a submodule.
-    set( ASM686 FALSE CACHE INTERNAL "Override ZLIB flag to turn off assembly" FORCE )
-    set( AMD64 FALSE CACHE INTERNAL "Override ZLIB flag to turn off assembly" FORCE )
-
-    # compile from sources
-    ADD_SUBDIRECTORY(contrib/zlib)
-    SET(ZLIB_FOUND 1)
-    SET(ZLIB_LIBRARIES zlibstatic)
-    SET(ZLIB_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/contrib/zlib ${CMAKE_CURRENT_BINARY_DIR}/contrib/zlib)
-    # need to ensure we don't link with system zlib or minizip as well.
-    SET(ASSIMP_BUILD_MINIZIP 1)
-  ELSE()
-    ADD_DEFINITIONS(-DASSIMP_BUILD_NO_OWN_ZLIB)
-    SET(ZLIB_LIBRARIES_LINKED -lz)
-  ENDIF()
-  INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})
-ENDIF()
+find_package(zlib CONFIG REQUIRED)
+add_definitions(-DASSIMP_BUILD_NO_OWN_ZLIB)
+set(ZLIB_FOUND YES)
+set(ASSIMP_BUILD_MINIZIP YES)
 
 IF( NOT IOS )
   IF( NOT ASSIMP_BUILD_MINIZIP )
@@ -610,91 +552,10 @@ ELSE ()
   ADD_DEFINITIONS( -DASSIMP_BUILD_NO_C4D_IMPORTER )
 ENDIF ()
 
-# Draco requires cmake 3.12
-IF (DEFINED CMAKE_VERSION AND "${CMAKE_VERSION}" VERSION_LESS "3.12")
-  message(NOTICE "draco requires cmake 3.12 or newer, cmake is ${CMAKE_VERSION} . Draco is disabled")
-  SET ( ASSIMP_BUILD_DRACO OFF CACHE BOOL "Disabled: Draco requires newer cmake" FORCE )
-ELSE()
-  OPTION ( ASSIMP_BUILD_DRACO "If the Draco libraries are to be built. Primarily for glTF" OFF )
-  IF ( ASSIMP_BUILD_DRACO )
-    # Primarily for glTF v2
-    # Enable Draco glTF feature set
-    set(DRACO_GLTF ON CACHE BOOL "" FORCE)
-    # Disable unnecessary or omitted components
-    set(DRACO_JS_GLUE OFF CACHE BOOL "" FORCE)
-    set(DRACO_WASM OFF CACHE BOOL "" FORCE)
-    set(DRACO_MAYA_PLUGIN OFF CACHE BOOL "" FORCE)
-    set(DRACO_UNITY_PLUGIN OFF CACHE BOOL "" FORCE)
-    set(DRACO_TESTS OFF CACHE BOOL "" FORCE)
-
-    IF(ASSIMP_HUNTER_ENABLED)
-      hunter_add_package(draco)
-      find_package(draco CONFIG REQUIRED)
-      set(draco_LIBRARIES draco::draco)
-    ELSE()
-      # Draco 1.4.1 has many warnings and will not build with /WX or -Werror
-      # See https://github.com/google/draco/issues/672
-      # and https://github.com/google/draco/issues/673
-      IF(MSVC)
-        set(DRACO_CXX_FLAGS "/W0")
-      ELSE()
-        list(APPEND DRACO_CXX_FLAGS
-          "-Wno-bool-compare"
-          "-Wno-comment"
-          "-Wno-maybe-uninitialized"
-          "-Wno-sign-compare"
-          "-Wno-unused-local-typedefs"
-        )
-        # Draco 1.4.1 does not explicitly export any symbols under GCC/clang
-        list(APPEND DRACO_CXX_FLAGS
-          "-fvisibility=default"
-        )
-      ENDIF()
-
-      # Don't build or install all of Draco by default
-      ADD_SUBDIRECTORY( "contrib/draco" EXCLUDE_FROM_ALL )
-
-      if(MSVC OR WIN32)
-        set(draco_LIBRARIES "draco")
-      else()
-        if(BUILD_SHARED_LIBS)
-          set(draco_LIBRARIES "draco_shared")
-        else()
-          set(draco_LIBRARIES "draco_static")
-        endif()
-      endif()
-
-      # Don't build the draco command-line tools by default
-      set_target_properties(draco_encoder draco_decoder PROPERTIES
-        EXCLUDE_FROM_ALL TRUE
-        EXCLUDE_FROM_DEFAULT_BUILD TRUE
-      )
-
-      # Do build the draco shared library
-      set_target_properties(${draco_LIBRARIES} PROPERTIES
-        EXCLUDE_FROM_ALL FALSE
-        EXCLUDE_FROM_DEFAULT_BUILD FALSE
-      )
-
-      TARGET_USE_COMMON_OUTPUT_DIRECTORY(${draco_LIBRARIES})
-      TARGET_USE_COMMON_OUTPUT_DIRECTORY(draco_encoder)
-      TARGET_USE_COMMON_OUTPUT_DIRECTORY(draco_decoder)
-
-      set(draco_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/contrib/draco/src")
-
-      # This is probably wrong
-      INSTALL( TARGETS ${draco_LIBRARIES}
-        EXPORT "${TARGETS_EXPORT_NAME}"
-        LIBRARY DESTINATION ${ASSIMP_LIB_INSTALL_DIR}
-        ARCHIVE DESTINATION ${ASSIMP_LIB_INSTALL_DIR}
-        RUNTIME DESTINATION ${ASSIMP_BIN_INSTALL_DIR}
-        FRAMEWORK DESTINATION ${ASSIMP_LIB_INSTALL_DIR}
-        COMPONENT ${LIBASSIMP_COMPONENT}
-        INCLUDES DESTINATION include
-      )
-    ENDIF()
-  ENDIF()
-ENDIF()
+option(ASSIMP_BUILD_DRACO "If the Draco libraries are to be built. Primarily for glTF" 0)
+if(ASSIMP_BUILD_DRACO)
+    find_package(draco CONFIG REQUIRED)
+endif()
 
 # Main assimp code
 ADD_SUBDIRECTORY( code/ )
@@ -730,9 +591,9 @@ ENDIF ()
 
 # Generate a pkg-config .pc, revision.h, and config.h for the Assimp library.
 CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/assimp.pc.in" "${PROJECT_BINARY_DIR}/assimp.pc" @ONLY )
-IF ( ASSIMP_INSTALL )
-  INSTALL( FILES "${PROJECT_BINARY_DIR}/assimp.pc" DESTINATION ${ASSIMP_LIB_INSTALL_DIR}/pkgconfig/ COMPONENT ${LIBASSIMP-DEV_COMPONENT})
-ENDIF()
+# IF ( ASSIMP_INSTALL )
+#   INSTALL( FILES "${PROJECT_BINARY_DIR}/assimp.pc" DESTINATION ${ASSIMP_LIB_INSTALL_DIR}/pkgconfig/ COMPONENT ${LIBASSIMP-DEV_COMPONENT})
+# ENDIF()
 
 CONFIGURE_FILE(
   ${CMAKE_CURRENT_LIST_DIR}/revision.h.in
@@ -747,7 +608,7 @@ CONFIGURE_FILE(
 IF ( ASSIMP_INSTALL )
   IF(CMAKE_CPACK_COMMAND AND UNIX AND ASSIMP_OPT_BUILD_PACKAGES)
     # Packing information
-    SET(CPACK_PACKAGE_NAME                    "assimp{ASSIMP_VERSION_MAJOR}.{ASSIMP_VERSION_MINOR}")
+    SET(CPACK_PACKAGE_NAME                    "${PROJECT_NAME}")
     SET(CPACK_PACKAGE_CONTACT "" CACHE STRING "Package maintainer and PGP signer.")
     SET(CPACK_PACKAGE_VENDOR                  "https://github.com/assimp")
     SET(CPACK_PACKAGE_DISPLAY_NAME            "Assimp ${ASSIMP_VERSION}")
@@ -756,7 +617,7 @@ IF ( ASSIMP_INSTALL )
     SET(CPACK_PACKAGE_VERSION_MAJOR           "${ASSIMP_VERSION_MAJOR}")
     SET(CPACK_PACKAGE_VERSION_MINOR           "${ASSIMP_VERSION_MINOR}")
     SET(CPACK_PACKAGE_VERSION_PATCH           "${ASSIMP_VERSION_PATCH}")
-    SET(CPACK_PACKAGE_INSTALL_DIRECTORY       "assimp${ASSIMP_VERSION_MAJOR}.${ASSIMP_VERSION_MINOR}")
+    SET(CPACK_PACKAGE_INSTALL_DIRECTORY       "${PROJECT_NAME}")
     SET(CPACK_RESOURCE_FILE_LICENSE           "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
 
     STRING(TOUPPER ${LIBASSIMP_COMPONENT}     "LIBASSIMP_COMPONENT_UPPER")
@@ -769,7 +630,8 @@ IF ( ASSIMP_INSTALL )
     SET(CPACK_COMPONENT_${LIBASSIMP-DEV_COMPONENT_UPPER}_DEPENDS $    "{LIBASSIMP_COMPONENT}" )
     SET(CPACK_COMPONENT_ASSIMP-DEV_DISPLAY_NAME                       "${CPACK_COMPONENT_${LIBASSIMP-DEV_COMPONENT}_DISPLAY_NAME}" )
     SET(CPACK_COMPONENT_ASSIMP-DEV_DEPENDS                            "${LIBASSIMP-DEV_COMPONENT}" )
-    SET(CPACK_DEBIAN_BUILD_DEPENDS debhelper cmake zlib1g-dev pkg-config)
+    #SET(CPACK_DEBIAN_BUILD_DEPENDS debhelper cmake zlib1g-dev pkg-config)
+    SET(CPACK_DEBIAN_BUILD_DEPENDS debhelper cmake)
 
     # debian
     SET(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
diff --git a/cmake-modules/assimp-plain-config.cmake.in b/cmake-modules/assimp-plain-config.cmake.in
index 6551dcb68..406934116 100644
--- a/cmake-modules/assimp-plain-config.cmake.in
+++ b/cmake-modules/assimp-plain-config.cmake.in
@@ -1,5 +1,12 @@
 @PACKAGE_INIT@
 
+include(CMakeFindDependencyMacro)
+
+find_dependency(zlib CONFIG REQUIRED)
+if(@ASSIMP_BUILD_DRACO@)
+    find_dependency(draco CONFIG REQUIRED)
+endif()
+
 include("${CMAKE_CURRENT_LIST_DIR}/@TARGETS_EXPORT_NAME@.cmake")
 
 set(ASSIMP_ROOT_DIR ${PACKAGE_PREFIX_DIR})
diff --git a/code/AssetLib/Assbin/AssbinFileWriter.cpp b/code/AssetLib/Assbin/AssbinFileWriter.cpp
index e9d857a84..ff06bd30a 100644
--- a/code/AssetLib/Assbin/AssbinFileWriter.cpp
+++ b/code/AssetLib/Assbin/AssbinFileWriter.cpp
@@ -51,7 +51,7 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <assimp/IOStream.hpp>
 
 #ifdef ASSIMP_BUILD_NO_OWN_ZLIB
-#include <zlib.h>
+#include <zlib/zlib.h>
 #else
 #include "../contrib/zlib/zlib.h"
 #endif
diff --git a/code/AssetLib/Assbin/AssbinLoader.cpp b/code/AssetLib/Assbin/AssbinLoader.cpp
index f7b35636c..5175d007d 100644
--- a/code/AssetLib/Assbin/AssbinLoader.cpp
+++ b/code/AssetLib/Assbin/AssbinLoader.cpp
@@ -58,7 +58,7 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <memory>
 
 #ifdef ASSIMP_BUILD_NO_OWN_ZLIB
-#include <zlib.h>
+#include <zlib/zlib.h>
 #else
 #include <contrib/zlib/zlib.h>
 #endif
diff --git a/code/AssetLib/Assxml/AssxmlFileWriter.cpp b/code/AssetLib/Assxml/AssxmlFileWriter.cpp
index 8f8e76bd2..b7e87d2dc 100644
--- a/code/AssetLib/Assxml/AssxmlFileWriter.cpp
+++ b/code/AssetLib/Assxml/AssxmlFileWriter.cpp
@@ -56,7 +56,7 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <stdarg.h>
 
 #ifdef ASSIMP_BUILD_NO_OWN_ZLIB
-#include <zlib.h>
+#include <zlib/zlib.h>
 #else
 #include <contrib/zlib/zlib.h>
 #endif
diff --git a/code/AssetLib/Blender/BlenderLoader.cpp b/code/AssetLib/Blender/BlenderLoader.cpp
index 5c6e7bc5b..aa34b9799 100644
--- a/code/AssetLib/Blender/BlenderLoader.cpp
+++ b/code/AssetLib/Blender/BlenderLoader.cpp
@@ -70,7 +70,7 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #ifndef ASSIMP_BUILD_NO_COMPRESSED_BLEND
 #include "Common/Compression.h"
 /* #ifdef ASSIMP_BUILD_NO_OWN_ZLIB
-#    include <zlib.h>
+#    include <zlib/zlib.h>
 #  else
 #    include "../contrib/zlib/zlib.h"
 #  endif*/
diff --git a/code/AssetLib/FBX/FBXParser.cpp b/code/AssetLib/FBX/FBXParser.cpp
index 955e811cb..c5c6e9339 100644
--- a/code/AssetLib/FBX/FBXParser.cpp
+++ b/code/AssetLib/FBX/FBXParser.cpp
@@ -47,7 +47,7 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 //#ifdef ASSIMP_BUILD_NO_OWN_ZLIB
 #include "Common/Compression.h"
-//#   include <zlib.h>
+//#   include <zlib/zlib.h>
 //#else
 //#   include "../contrib/zlib/zlib.h"
 //#endif
diff --git a/code/AssetLib/Q3BSP/Q3BSPFileImporter.cpp b/code/AssetLib/Q3BSP/Q3BSPFileImporter.cpp
index 924949eeb..cf93a0f83 100644
--- a/code/AssetLib/Q3BSP/Q3BSPFileImporter.cpp
+++ b/code/AssetLib/Q3BSP/Q3BSPFileImporter.cpp
@@ -49,7 +49,7 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <assimp/DefaultLogger.hpp>
 
 #ifdef ASSIMP_BUILD_NO_OWN_ZLIB
-#include <zlib.h>
+#include <zlib/zlib.h>
 #else
 #include "../contrib/zlib/zlib.h"
 #endif
diff --git a/code/CMakeLists.txt b/code/CMakeLists.txt
index 0fe2291f8..a7cb7cf07 100644
--- a/code/CMakeLists.txt
+++ b/code/CMakeLists.txt
@@ -1177,7 +1177,6 @@ IF (ASSIMP_BUILD_NONFREE_C4D_IMPORTER)
 ENDIF ()
 
 IF (ASSIMP_BUILD_DRACO)
-  INCLUDE_DIRECTORIES(${draco_INCLUDE_DIRS})
   ADD_DEFINITIONS( -DASSIMP_ENABLE_DRACO )
 ENDIF()
 
@@ -1282,12 +1281,12 @@ IF(ASSIMP_HUNTER_ENABLED)
   endif()
 
   if (ASSIMP_BUILD_DRACO)
-    target_link_libraries(assimp PUBLIC ${draco_LIBRARIES})
+    target_link_libraries(assimp PUBLIC draco::draco)
   endif()
 ELSE()
-  TARGET_LINK_LIBRARIES(assimp ${ZLIB_LIBRARIES} ${OPENDDL_PARSER_LIBRARIES})
+  TARGET_LINK_LIBRARIES(assimp zlib ${OPENDDL_PARSER_LIBRARIES})
   if (ASSIMP_BUILD_DRACO)
-    target_link_libraries(assimp ${draco_LIBRARIES})
+    target_link_libraries(assimp draco::draco)
   endif()
 ENDIF()
 
diff --git a/code/Common/Compression.h b/code/Common/Compression.h
index 13a79af3f..a4ea387d3 100644
--- a/code/Common/Compression.h
+++ b/code/Common/Compression.h
@@ -42,7 +42,7 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #pragma once
 
 #ifdef ASSIMP_BUILD_NO_OWN_ZLIB
-#   include <zlib.h>
+#   include <zlib/zlib.h>
 #else
 #   include "../contrib/zlib/zlib.h"
 #endif
