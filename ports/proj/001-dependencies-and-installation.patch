diff --git a/CMakeLists.txt b/CMakeLists.txt
index 20826ba3..c24ba3c8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -9,7 +9,7 @@
 ################################################################################
 # General settings
 ################################################################################
-cmake_minimum_required(VERSION 3.16)
+cmake_minimum_required(VERSION 3.22)
 
 project(PROJ
   DESCRIPTION "PROJ coordinate transformation software library"
@@ -176,7 +176,7 @@ set_property(CACHE NLOHMANN_JSON_ORIGIN PROPERTY STRINGS auto internal external)
 set(MIN_NLOHMANN_JSON_VERSION 3.7.0)
 
 if(NLOHMANN_JSON_ORIGIN STREQUAL "external")
-  find_package(nlohmann_json REQUIRED)
+  find_package(nlohmann_json CONFIG REQUIRED)
   set(NLOHMANN_JSON "external")
 elseif(NLOHMANN_JSON_ORIGIN STREQUAL "internal")
   set(NLOHMANN_JSON "internal")
@@ -221,11 +221,11 @@ if(DEFINED SQLITE3_LIBRARY)
   set(SQLite3_LIBRARY ${SQLITE3_LIBRARY})
 endif()
 
-find_package(SQLite3 REQUIRED)
+find_package(SQLite3 CONFIG REQUIRED)
 
 # Would build and run with older versions, but with horrible performance
 # See https://github.com/OSGeo/PROJ/issues/1718
-if(SQLite3_VERSION VERSION_LESS "3.11")
+if("${SQLite3_VERSION}" VERSION_LESS "3.11")
   message(SEND_ERROR "SQLite3 >= 3.11 required!")
 endif()
 
@@ -237,13 +237,8 @@ option(ENABLE_TIFF "Enable TIFF support to read some grids" ON)
 mark_as_advanced(ENABLE_TIFF)
 set(TIFF_ENABLED FALSE)
 if(ENABLE_TIFF)
-  find_package(TIFF REQUIRED)
-  if(TIFF_FOUND)
-    set(TIFF_ENABLED TRUE)
-  else()
-    message(SEND_ERROR
-      "libtiff dependency not found! Use ENABLE_TIFF=OFF to force it off")
-  endif()
+  find_package(tiff CONFIG REQUIRED)
+  set(TIFF_ENABLED TRUE)
 else()
   message(WARNING
     "TIFF support is not enabled and will result in the inability to read "
@@ -257,19 +252,8 @@ endif()
 option(ENABLE_CURL "Enable Curl support" ON)
 set(CURL_ENABLED FALSE)
 if(ENABLE_CURL)
-  find_package(CURL REQUIRED)
-  if(CURL_FOUND)
-    set(CURL_ENABLED TRUE)
-
-    # Curl SSL options are described in
-    #   https://curl.se/libcurl/c/CURLOPT_SSL_OPTIONS.html
-    #set(CURLSSLOPT_NO_REVOKE 2)
-    #set(SSL_OPTIONS ${CURLSSLOPT_NO_REVOKE})
-    #add_compile_definitions(SSL_OPTIONS=${SSL_OPTIONS})
-
-  else()
-    message(SEND_ERROR "curl dependency not found!")
-  endif()
+  find_package(curl CONFIG REQUIRED)
+  set(CURL_ENABLED TRUE)
 endif()
 
 ################################################################################
@@ -305,7 +289,7 @@ endif()
 if(MSVC OR CMAKE_CONFIGURATION_TYPES)
   # For multi-config systems and for Visual Studio, the debug version of
   # the library has _d appended.
-  set(CMAKE_DEBUG_POSTFIX _d)
+  set(CMAKE_DEBUG_POSTFIX d)
 endif()
 
 # Put the libraries and binaries that get built into directories at the
@@ -322,20 +306,11 @@ link_directories(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
 ################################################################################
 include(ProjInstallPath)
 
-# By default GNUInstallDirs will use the upper case project name
-# for CMAKE_INSTALL_DOCDIR, resulting in something like share/doc/PROJ
-# instead of share/doc/proj which historically have been the path used
-# by the project.
-# Here force the use of a lower case project name and reset after
-# GNUInstallDirs has done its thing
-set(PROJECT_NAME_ORIGINAL "${PROJECT_NAME}")
-string(TOLOWER "${PROJECT_NAME}" PROJECT_NAME)
-
 include(GNUInstallDirs)
 
-set(PROJECT_NAME "${PROJECT_NAME_ORIGINAL}")
-
-set(PROJ_DATA_PATH "${CMAKE_INSTALL_FULL_DATADIR}/proj")
+if(NOT DEFINED PROJ_DATA_PATH)
+    set(PROJ_DATA_PATH "${CMAKE_INSTALL_FULL_DATADIR}/proj")
+endif()
 
 ################################################################################
 # Tests
@@ -415,7 +390,7 @@ include_directories(${PROJ_SOURCE_DIR}/src)
 add_subdirectory(data)
 add_subdirectory(include)
 add_subdirectory(src)
-add_subdirectory(man)
+#add_subdirectory(man)
 add_subdirectory(cmake)
 if(BUILD_TESTING)
   add_subdirectory(test)
@@ -428,9 +403,9 @@ endif()
 
 add_subdirectory(scripts)
 
-set(docfiles COPYING NEWS.md AUTHORS.md)
-install(FILES ${docfiles}
-        DESTINATION ${CMAKE_INSTALL_DOCDIR})
+#set(docfiles COPYING NEWS.md AUTHORS.md)
+#install(FILES ${docfiles}
+#        DESTINATION ${CMAKE_INSTALL_DOCDIR})
 
 ################################################################################
 # Build debug symbols
@@ -458,11 +433,11 @@ endif()
 ################################################################################
 # pkg-config support
 ################################################################################
-configure_proj_pc()
+#configure_proj_pc()
 
-install(FILES
-  ${CMAKE_CURRENT_BINARY_DIR}/proj.pc
-  DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
+#install(FILES
+#  ${CMAKE_CURRENT_BINARY_DIR}/proj.pc
+#  DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
 
 ################################################################################
 # "make dist" workalike
diff --git a/cmake/project-config.cmake.in b/cmake/project-config.cmake.in
index 0ca48aaa..399172a5 100644
--- a/cmake/project-config.cmake.in
+++ b/cmake/project-config.cmake.in
@@ -27,23 +27,15 @@ if("@CURL_ENABLED@")
 endif()
 cmake_policy(POP)
 
-find_dependency(SQLite3)
+find_dependency(SQLite3 CONFIG REQUIRED)
 
 if(DEFINED PROJ_CONFIG_FIND_TIFF_DEP)
-    find_dependency(TIFF)
+    find_dependency(tiff CONFIG REQUIRED)
 endif()
 
 if(DEFINED PROJ_CONFIG_FIND_CURL_DEP)
   # Chainload CURL usage requirements
-  find_dependency(CURL)
-  # Target CURL::libcurl only defined since CMake 3.12
-  if(NOT TARGET CURL::libcurl)
-      add_library(CURL::libcurl INTERFACE IMPORTED)
-      set_target_properties(CURL::libcurl PROPERTIES
-        INTERFACE_INCLUDE_DIRECTORIES "${CURL_INCLUDE_DIRS}"
-        INTERFACE_LINK_LIBRARIES      "${CURL_LIBRARIES}"
-      )
-  endif()
+  find_dependency(curl CONFIG REQUIRED)
 endif()
 
 function(set_variable_from_rel_or_absolute_path var root rel_or_abs_path)
@@ -65,15 +57,15 @@ set_variable_from_rel_or_absolute_path("@PROJECT_VARIANT_NAME@_BINARY_DIRS" "${_
 set (@PROJECT_VARIANT_NAME@_LIBRARIES @PROJECT_VARIANT_NAME@::proj)
 # Read in the exported definition of the library
 include ("${_DIR}/@PROJECT_NAME_LOWER@-targets.cmake")
-if (@INSTALL_LEGACY_CMAKE_FILES@)
-  include ("${_DIR}/@PROJECT_LEGACY_LOWER@-targets.cmake")
-endif()
+#if (@INSTALL_LEGACY_CMAKE_FILES@)
+#  include ("${_DIR}/@PROJECT_LEGACY_LOWER@-targets.cmake")
+#endif()
 
 unset (_ROOT)
 unset (_DIR)
 
-if ("@PROJECT_VARIANT_NAME@" STREQUAL "PROJ4")
-  # For backward compatibility with old releases of libgeotiff
-  set (@PROJECT_VARIANT_NAME@_INCLUDE_DIR
-    ${@PROJECT_VARIANT_NAME@_INCLUDE_DIRS})
-endif ()
+#if ("@PROJECT_VARIANT_NAME@" STREQUAL "PROJ4")
+#  # For backward compatibility with old releases of libgeotiff
+#  set (@PROJECT_VARIANT_NAME@_INCLUDE_DIR
+#    ${@PROJECT_VARIANT_NAME@_INCLUDE_DIRS})
+#endif ()
diff --git a/src/grids.cpp b/src/grids.cpp
index ca426d24..729a14d1 100644
--- a/src/grids.cpp
+++ b/src/grids.cpp
@@ -38,7 +38,7 @@
 #include "proj_internal.h"
 
 #ifdef TIFF_ENABLED
-#include "tiffio.h"
+#include <tiff/tiffio.h>
 #endif
 
 #include <algorithm>
diff --git a/src/iso19111/factory.cpp b/src/iso19111/factory.cpp
index f1ad1ca9..d12ae915 100644
--- a/src/iso19111/factory.cpp
+++ b/src/iso19111/factory.cpp
@@ -74,7 +74,7 @@
 #include "proj_internal.h"
 // clang-format on
 
-#include <sqlite3.h>
+#include <sqlite3/sqlite3.h>
 
 #ifdef EMBED_RESOURCE_FILES
 #include "embedded_resources.h"
diff --git a/src/iso19111/internal.cpp b/src/iso19111/internal.cpp
index c6ba11c7..728ec300 100644
--- a/src/iso19111/internal.cpp
+++ b/src/iso19111/internal.cpp
@@ -46,7 +46,7 @@
 #include <sstream> // std::istringstream and std::ostringstream
 #include <string>
 
-#include "sqlite3.h"
+#include <sqlite3/sqlite3.h>
 
 NS_PROJ_START
 
diff --git a/src/lib_proj.cmake b/src/lib_proj.cmake
index 5753d319..c37f6da5 100644
--- a/src/lib_proj.cmake
+++ b/src/lib_proj.cmake
@@ -591,7 +591,7 @@ if(Threads_FOUND AND CMAKE_USE_PTHREADS_INIT)
   target_link_libraries(proj PRIVATE ${CMAKE_THREAD_LIBS_INIT})
 endif()
 
-target_link_libraries(proj PRIVATE SQLite::SQLite3)
+target_link_libraries(proj PRIVATE sqlite3)
 
 if(NLOHMANN_JSON STREQUAL "external")
   target_compile_definitions(proj PRIVATE EXTERNAL_NLOHMANN_JSON)
@@ -601,12 +601,12 @@ endif()
 
 if(TIFF_ENABLED)
   target_compile_definitions(proj PRIVATE -DTIFF_ENABLED)
-  target_link_libraries(proj PRIVATE TIFF::TIFF)
+  target_link_libraries(proj PRIVATE TIFF::tiff)
 endif()
 
 if(CURL_ENABLED)
   target_compile_definitions(proj PRIVATE -DCURL_ENABLED)
-  target_link_libraries(proj PRIVATE CURL::libcurl)
+  target_link_libraries(proj PRIVATE curl)
   target_link_libraries(proj
     PRIVATE
       $<$<CXX_COMPILER_ID:MSVC>:ws2_32>
@@ -636,7 +636,7 @@ install(TARGETS proj
 
 if(NOT BUILD_FRAMEWORKS_AND_BUNDLE)
   install(FILES ${ALL_LIBPROJ_HEADERS}
-    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/proj)
 endif()
 
 ##############################################
diff --git a/src/memvfs.c b/src/memvfs.c
index acb89d7d..1b010874 100644
--- a/src/memvfs.c
+++ b/src/memvfs.c
@@ -36,7 +36,7 @@
 ** then it defaults to the sz= value.  Parameter values can be in either
 ** decimal or hexadecimal.  The filename in the URI is ignored.
 */
-#include <sqlite3.h>
+#include <sqlite3/sqlite3.h>
 
 #include <assert.h>
 #include <stdint.h>
diff --git a/src/memvfs.h b/src/memvfs.h
index f8d7e412..1c7c62dd 100644
--- a/src/memvfs.h
+++ b/src/memvfs.h
@@ -1,7 +1,7 @@
 #ifndef MEMVFS_H
 #define MEMVFS_H
 
-#include <sqlite3.h>
+#include <sqlite3/sqlite3.h>
 
 #ifdef __cplusplus
 extern "C" {
diff --git a/src/networkfilemanager.cpp b/src/networkfilemanager.cpp
index 2da6e465..e9b280d7 100644
--- a/src/networkfilemanager.cpp
+++ b/src/networkfilemanager.cpp
@@ -52,7 +52,7 @@
 
 #ifdef CURL_ENABLED
 #include <curl/curl.h>
-#include <sqlite3.h> // for sqlite3_snprintf
+#include <sqlite3/sqlite3.h> // for sqlite3_snprintf
 #endif
 
 #include <sys/stat.h>
diff --git a/src/proj_json_streaming_writer.cpp b/src/proj_json_streaming_writer.cpp
index a6052225..95edd48f 100644
--- a/src/proj_json_streaming_writer.cpp
+++ b/src/proj_json_streaming_writer.cpp
@@ -35,7 +35,7 @@
 #include "proj_json_streaming_writer.hpp"
 
 #include <cmath>
-#include <sqlite3.h>
+#include <sqlite3/sqlite3.h>
 #include <stdarg.h>
 #include <string.h>
 #define CPLAssert(x)                                                           \
diff --git a/src/sqlite3_utils.hpp b/src/sqlite3_utils.hpp
index e592e760..f3e8ad33 100644
--- a/src/sqlite3_utils.hpp
+++ b/src/sqlite3_utils.hpp
@@ -30,7 +30,7 @@
 
 #include <memory>
 
-#include <sqlite3.h>
+#include <sqlite3/sqlite3.h>
 
 #include "proj.h"
 #include "proj/util.hpp"
diff --git a/test/unit/CMakeLists.txt b/test/unit/CMakeLists.txt
index 09d0c5ef..5ddd248b 100644
--- a/test/unit/CMakeLists.txt
+++ b/test/unit/CMakeLists.txt
@@ -213,7 +213,7 @@ add_executable(test_network
   test_network.cpp)
 if(CURL_ENABLED)
   target_compile_definitions(test_network PRIVATE -DCURL_ENABLED)
-  target_link_libraries(test_network PRIVATE CURL::libcurl)
+  target_link_libraries(test_network PRIVATE curl)
 endif()
 target_link_libraries(test_network
   PRIVATE GTest::gtest
diff --git a/test/unit/test_c_api.cpp b/test/unit/test_c_api.cpp
index f7d7bf39..9d95a318 100644
--- a/test/unit/test_c_api.cpp
+++ b/test/unit/test_c_api.cpp
@@ -45,7 +45,7 @@
 #include "proj/metadata.hpp"
 #include "proj/util.hpp"
 
-#include <sqlite3.h>
+#include <sqlite3/sqlite3.h>
 
 #if !defined(_WIN32)
 #include <sys/resource.h>
diff --git a/test/unit/test_factory.cpp b/test/unit/test_factory.cpp
index bb4bda1b..dc7df3ed 100644
--- a/test/unit/test_factory.cpp
+++ b/test/unit/test_factory.cpp
@@ -42,7 +42,7 @@
 
 #include <algorithm>
 
-#include <sqlite3.h>
+#include <sqlite3/sqlite3.h>
 
 #ifdef _MSC_VER
 #include <stdio.h>
diff --git a/test/unit/test_network.cpp b/test/unit/test_network.cpp
index 538790ae..47303ab3 100644
--- a/test/unit/test_network.cpp
+++ b/test/unit/test_network.cpp
@@ -41,7 +41,7 @@
 
 #include "proj/internal/io_internal.hpp"
 
-#include <sqlite3.h>
+#include <sqlite3/sqlite3.h>
 #include <time.h>
 
 #ifdef CURL_ENABLED
