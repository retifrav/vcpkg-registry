diff --git a/CMakeLists.txt b/CMakeLists.txt
index 73de511..fa61a8c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -72,7 +72,7 @@ file(STRINGS httplib.h _raw_version_string REGEX "CPPHTTPLIB_VERSION \"([0-9]+\\
 # since _raw_version_string would contain the entire line of code where it found the version string
 string(REGEX MATCH "([0-9]+\\.?)+" _httplib_version "${_raw_version_string}")
 
-project(httplib VERSION ${_httplib_version} LANGUAGES CXX)
+project("cpp-http" VERSION ${_httplib_version} LANGUAGES CXX)
 
 # Change as needed to set an OpenSSL minimum version.
 # This is used in the installed Cmake config file.
@@ -127,25 +127,25 @@ elseif(HTTPLIB_USE_OPENSSL_IF_AVAILABLE)
 endif()
 
 if(HTTPLIB_REQUIRE_ZLIB)
-	find_package(ZLIB REQUIRED)
+	find_package(zlib CONFIG REQUIRED)
 	set(HTTPLIB_IS_USING_ZLIB TRUE)
-elseif(HTTPLIB_USE_ZLIB_IF_AVAILABLE)
-	find_package(ZLIB QUIET)
-	# FindZLIB doesn't have a ZLIB_FOUND variable, so check the target.
-	if(TARGET ZLIB::ZLIB)
-		set(HTTPLIB_IS_USING_ZLIB TRUE)
-	endif()
+# elseif(HTTPLIB_USE_ZLIB_IF_AVAILABLE)
+# 	find_package(zlib CONFIG QUIET)
+# 	# FindZLIB doesn't have a ZLIB_FOUND variable, so check the target.
+# 	# if(TARGET ZLIB::ZLIB)
+# 	# 	set(HTTPLIB_IS_USING_ZLIB TRUE)
+# 	# endif()
 endif()
 
 # Adds our cmake folder to the search path for find_package
 # This is so we can use our custom FindBrotli.cmake
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
 if(HTTPLIB_REQUIRE_BROTLI)
-	find_package(Brotli COMPONENTS encoder decoder common REQUIRED)
+	find_package(brotli CONFIG REQUIRED)
 	set(HTTPLIB_IS_USING_BROTLI TRUE)
-elseif(HTTPLIB_USE_BROTLI_IF_AVAILABLE)
-	find_package(Brotli COMPONENTS encoder decoder common QUIET)
-	set(HTTPLIB_IS_USING_BROTLI ${Brotli_FOUND})
+# elseif(HTTPLIB_USE_BROTLI_IF_AVAILABLE)
+# 	find_package(Brotli COMPONENTS encoder decoder common QUIET)
+# 	set(HTTPLIB_IS_USING_BROTLI ${Brotli_FOUND})
 endif()
 
 # Used for default, common dirs that the end-user can change (if needed)
@@ -183,7 +183,7 @@ if(HTTPLIB_COMPILE)
 	target_sources(${PROJECT_NAME}
 		PUBLIC
 			$<BUILD_INTERFACE:${_httplib_build_includedir}/httplib.h>
-			$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/httplib.h>
+			$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/httplib.h>
 	)
 	set_target_properties(${PROJECT_NAME}
 		PROPERTIES
@@ -217,10 +217,10 @@ target_link_libraries(${PROJECT_NAME} ${_INTERFACE_OR_PUBLIC}
 		# Needed for API from MacOS Security framework
 		"$<$<AND:$<PLATFORM_ID:Darwin>,$<BOOL:${HTTPLIB_IS_USING_OPENSSL}>,$<BOOL:${HTTPLIB_USE_CERTS_FROM_MACOSX_KEYCHAIN}>>:-framework CoreFoundation -framework Security>"
 		# Can't put multiple targets in a single generator expression or it bugs out.
-		$<$<BOOL:${HTTPLIB_IS_USING_BROTLI}>:Brotli::common>
-		$<$<BOOL:${HTTPLIB_IS_USING_BROTLI}>:Brotli::encoder>
-		$<$<BOOL:${HTTPLIB_IS_USING_BROTLI}>:Brotli::decoder>
-		$<$<BOOL:${HTTPLIB_IS_USING_ZLIB}>:ZLIB::ZLIB>
+		$<$<BOOL:${HTTPLIB_IS_USING_BROTLI}>:brotlicommon>
+		$<$<BOOL:${HTTPLIB_IS_USING_BROTLI}>:brotlienc>
+		$<$<BOOL:${HTTPLIB_IS_USING_BROTLI}>:brotlidec>
+		$<$<BOOL:${HTTPLIB_IS_USING_ZLIB}>:zlib>
 		$<$<BOOL:${HTTPLIB_IS_USING_OPENSSL}>:OpenSSL::SSL>
 		$<$<BOOL:${HTTPLIB_IS_USING_OPENSSL}>:OpenSSL::Crypto>
 )
@@ -235,12 +235,12 @@ target_compile_definitions(${PROJECT_NAME} ${_INTERFACE_OR_PUBLIC}
 )
 
 # CMake configuration files installation directory
-set(_TARGET_INSTALL_CMAKEDIR "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
+set(_TARGET_INSTALL_CMAKEDIR "share/${PROJECT_NAME}")
 
 include(CMakePackageConfigHelpers)
 
 # Configures the meta-file httplibConfig.cmake.in to replace variables with paths/values/etc.
-configure_package_config_file("${PROJECT_NAME}Config.cmake.in"
+configure_package_config_file("Config.cmake.in"
 	"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
 	INSTALL_DESTINATION "${_TARGET_INSTALL_CMAKEDIR}"
 	# Passes the includedir install path
@@ -268,21 +268,23 @@ if(HTTPLIB_INSTALL)
 	# Creates the export httplibTargets.cmake
 	# This is strictly what holds compilation requirements
 	# and linkage information (doesn't find deps though).
-	install(TARGETS ${PROJECT_NAME} EXPORT httplibTargets)
+	install(TARGETS ${PROJECT_NAME} EXPORT "${PROJECT_NAME}Targets")
 
-	install(FILES "${_httplib_build_includedir}/httplib.h" TYPE INCLUDE)
+	install(FILES "${_httplib_build_includedir}/httplib.h"
+		DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}"
+	)
 
 	install(FILES
 		"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
 		"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
 		# Install it so it can be used later by the httplibConfig.cmake file.
 		# Put it in the same dir as our config file instead of a global path so we don't potentially stomp on other packages.
-		"${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindBrotli.cmake"
+		#"${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindBrotli.cmake"
 		DESTINATION ${_TARGET_INSTALL_CMAKEDIR}
 	)
 
 	# NOTE: This path changes depending on if it's on Windows or Linux
-	install(EXPORT httplibTargets
+	install(EXPORT "${PROJECT_NAME}Targets"
 		# Puts the targets into the httplib namespace
 		# So this makes httplib::httplib linkable after doing find_package(httplib)
 		NAMESPACE ${PROJECT_NAME}::
diff --git a/Config.cmake.in b/Config.cmake.in
new file mode 100644
index 0000000..491e739
--- /dev/null
+++ b/Config.cmake.in
@@ -0,0 +1,28 @@
+@PACKAGE_INIT@
+
+include(CMakeFindDependencyMacro)
+
+find_dependency(Threads)
+
+if(@HTTPLIB_IS_USING_OPENSSL@)
+    # OpenSSL COMPONENTS were added in Cmake v3.11
+    if(CMAKE_VERSION VERSION_LESS "3.11")
+        find_dependency(OpenSSL @_HTTPLIB_OPENSSL_MIN_VER@)
+    else()
+        # Once the COMPONENTS were added, they were made optional when not specified.
+        # Since we use both, we need to search for both.
+        find_dependency(OpenSSL @_HTTPLIB_OPENSSL_MIN_VER@ COMPONENTS Crypto SSL)
+    endif()
+endif()
+
+if(@HTTPLIB_IS_USING_ZLIB@)
+    find_dependency(zlib CONFIG REQUIRED)
+endif()
+
+if(@HTTPLIB_IS_USING_BROTLI@)
+    find_dependency(brotli CONFIG REQUIRED)
+endif()
+
+include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")
+
+check_required_components(@PROJECT_NAME@)
diff --git a/httplib.h b/httplib.h
index dfdd260..21993fb 100644
--- a/httplib.h
+++ b/httplib.h
@@ -276,7 +276,7 @@ using socket_t = int;
 #endif
 
 #ifdef CPPHTTPLIB_ZLIB_SUPPORT
-#include <zlib.h>
+#include <zlib/zlib.h>
 #endif
 
 #ifdef CPPHTTPLIB_BROTLI_SUPPORT
diff --git a/httplibConfig.cmake.in b/httplibConfig.cmake.in
deleted file mode 100644
index 93dff32..0000000
--- a/httplibConfig.cmake.in
+++ /dev/null
@@ -1,84 +0,0 @@
-# Generates a macro to auto-configure everything
-@PACKAGE_INIT@
-
-# Setting these here so they're accessible after install.
-# Might be useful for some users to check which settings were used.
-set(HTTPLIB_IS_USING_OPENSSL @HTTPLIB_IS_USING_OPENSSL@)
-set(HTTPLIB_IS_USING_ZLIB @HTTPLIB_IS_USING_ZLIB@)
-set(HTTPLIB_IS_COMPILED @HTTPLIB_COMPILE@)
-set(HTTPLIB_IS_USING_BROTLI @HTTPLIB_IS_USING_BROTLI@)
-set(HTTPLIB_VERSION @PROJECT_VERSION@)
-
-include(CMakeFindDependencyMacro)
-
-# We add find_dependency calls here to not make the end-user have to call them.
-find_dependency(Threads)
-if(@HTTPLIB_IS_USING_OPENSSL@)
-	# OpenSSL COMPONENTS were added in Cmake v3.11
-	if(CMAKE_VERSION VERSION_LESS "3.11")
-		find_dependency(OpenSSL @_HTTPLIB_OPENSSL_MIN_VER@)
-	else()
-		# Once the COMPONENTS were added, they were made optional when not specified.
-		# Since we use both, we need to search for both.
-		find_dependency(OpenSSL @_HTTPLIB_OPENSSL_MIN_VER@ COMPONENTS Crypto SSL)
-	endif()
-endif()
-if(@HTTPLIB_IS_USING_ZLIB@)
-	find_dependency(ZLIB)
-endif()
-
-if(@HTTPLIB_IS_USING_BROTLI@)
-	# Needed so we can use our own FindBrotli.cmake in this file.
-	# Note that the FindBrotli.cmake file is installed in the same dir as this file.
-	list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")
-	set(BROTLI_USE_STATIC_LIBS @BROTLI_USE_STATIC_LIBS@)
-	find_dependency(Brotli COMPONENTS common encoder decoder)
-endif()
-
-# Mildly useful for end-users
-# Not really recommended to be used though
-set_and_check(HTTPLIB_INCLUDE_DIR "@PACKAGE_CMAKE_INSTALL_FULL_INCLUDEDIR@")
-# Lets the end-user find the header path with the header appended
-# This is helpful if you're using Cmake's pre-compiled header feature
-set_and_check(HTTPLIB_HEADER_PATH "@PACKAGE_CMAKE_INSTALL_FULL_INCLUDEDIR@/httplib.h")
-
-# Consider each library support as a "component"
-set(httplib_OpenSSL_FOUND @HTTPLIB_IS_USING_OPENSSL@)
-set(httplib_ZLIB_FOUND @HTTPLIB_IS_USING_ZLIB@)
-set(httplib_Brotli_FOUND @HTTPLIB_IS_USING_BROTLI@)
-
-check_required_components(httplib)
-
-# Brings in the target library, but only if all required components are found
-if(NOT DEFINED httplib_FOUND OR httplib_FOUND)
-	include("${CMAKE_CURRENT_LIST_DIR}/httplibTargets.cmake")
-endif()
-
-# Outputs a "found httplib /usr/include/httplib.h" message when using find_package(httplib)
-include(FindPackageMessage)
-if(TARGET httplib::httplib)
-	set(HTTPLIB_FOUND TRUE)
-
-	# Since the compiled version has a lib, show that in the message
-	if(@HTTPLIB_COMPILE@)
-		# The list of configurations is most likely just 1 unless they installed a debug & release
-		get_target_property(_httplib_configs httplib::httplib "IMPORTED_CONFIGURATIONS")
-		# Need to loop since the "IMPORTED_LOCATION" property isn't want we want.
-		# Instead, we need to find the IMPORTED_LOCATION_RELEASE or IMPORTED_LOCATION_DEBUG which has the lib path.
-		foreach(_httplib_conf "${_httplib_configs}")
-			# Grab the path to the lib and sets it to HTTPLIB_LIBRARY
-			get_target_property(HTTPLIB_LIBRARY httplib::httplib "IMPORTED_LOCATION_${_httplib_conf}")
-			# Check if we found it
-			if(HTTPLIB_LIBRARY)
-				break()
-			endif()
-		endforeach()
-
-		unset(_httplib_configs)
-		unset(_httplib_conf)
-
-		find_package_message(httplib "Found httplib: ${HTTPLIB_LIBRARY} (found version \"${HTTPLIB_VERSION}\")" "[${HTTPLIB_LIBRARY}][${HTTPLIB_HEADER_PATH}]")
-	else()
-		find_package_message(httplib "Found httplib: ${HTTPLIB_HEADER_PATH} (found version \"${HTTPLIB_VERSION}\")" "[${HTTPLIB_HEADER_PATH}]")
-	endif()
-endif()
