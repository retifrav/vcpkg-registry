diff --git a/CMakeLists.txt b/CMakeLists.txt
index c98daf5..32a4513 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -102,7 +102,14 @@ endif()
 
 # Threads needed for <thread> on some systems, and for <pthread.h> on Linux
 set(THREADS_PREFER_PTHREAD_FLAG true)
-find_package(Threads REQUIRED)
+
+set(THREADS_LIBRARIES_NAME "Threads::Threads")
+if(CMAKE_CROSSCOMPILING AND CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin" AND EMSCRIPTEN)
+    set(THREADS_LIBRARIES_NAME "-lpthread")
+else()
+	find_package(Threads REQUIRED)
+endif()
+
 # Since Cmake v3.11, Crypto & SSL became optional when not specified as COMPONENTS.
 if(HTTPLIB_REQUIRE_OPENSSL)
 	find_package(OpenSSL ${_HTTPLIB_OPENSSL_MIN_VER} COMPONENTS Crypto SSL REQUIRED)
@@ -114,26 +121,17 @@ if(OPENSSL_FOUND)
 	set(HTTPLIB_IS_USING_OPENSSL TRUE)
 endif()
 
+set(HTTPLIB_IS_USING_ZLIB FALSE)
 if(HTTPLIB_REQUIRE_ZLIB)
-	find_package(ZLIB REQUIRED)
-elseif(HTTPLIB_USE_ZLIB_IF_AVAILABLE)
-	find_package(ZLIB QUIET)
-endif()
-# Just setting this variable here for people building in-tree
-# FindZLIB doesn't have a ZLIB_FOUND variable, so check the target.
-if(TARGET ZLIB::ZLIB)
+	find_package(zlib CONFIG REQUIRED)
 	set(HTTPLIB_IS_USING_ZLIB TRUE)
 endif()
 
 # Adds our cmake folder to the search path for find_package
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
+#list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
+set(HTTPLIB_IS_USING_BROTLI FALSE)
 if(HTTPLIB_REQUIRE_BROTLI)
-	find_package(Brotli COMPONENTS encoder decoder common REQUIRED)
-elseif(HTTPLIB_USE_BROTLI_IF_AVAILABLE)
-	find_package(Brotli COMPONENTS encoder decoder common QUIET)
-endif()
-# Just setting this variable here for people building in-tree
-if(Brotli_FOUND)
+	find_package(brotli CONFIG REQUIRED)
 	set(HTTPLIB_IS_USING_BROTLI TRUE)
 endif()
 
@@ -172,7 +170,7 @@ if(HTTPLIB_COMPILE)
 	target_sources(${PROJECT_NAME}
 		PUBLIC
 			$<BUILD_INTERFACE:${_httplib_build_includedir}/httplib.h>
-			$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/httplib.h>
+			$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/httplib.h>
 	)
 	set_target_properties(${PROJECT_NAME}
 		PROPERTIES
@@ -201,7 +199,7 @@ target_include_directories(${PROJECT_NAME} SYSTEM ${_INTERFACE_OR_PUBLIC}
 
 # Always require threads
 target_link_libraries(${PROJECT_NAME} ${_INTERFACE_OR_PUBLIC}
-		Threads::Threads
+		${THREADS_LIBRARIES_NAME}
 		# Needed for Windows libs on Mingw, as the pragma comment(lib, "xyz") aren't triggered.
 		$<$<PLATFORM_ID:Windows>:ws2_32>
 		$<$<PLATFORM_ID:Windows>:crypt32>
@@ -209,10 +207,10 @@ target_link_libraries(${PROJECT_NAME} ${_INTERFACE_OR_PUBLIC}
 		# Needed for API from MacOS Security framework
 		"$<$<AND:$<PLATFORM_ID:Darwin>,$<BOOL:${HTTPLIB_IS_USING_OPENSSL}>>:-framework CoreFoundation -framework Security>"
 		# Can't put multiple targets in a single generator expression or it bugs out.
-		$<$<BOOL:${HTTPLIB_IS_USING_BROTLI}>:Brotli::common>
-		$<$<BOOL:${HTTPLIB_IS_USING_BROTLI}>:Brotli::encoder>
-		$<$<BOOL:${HTTPLIB_IS_USING_BROTLI}>:Brotli::decoder>
-		$<$<BOOL:${HTTPLIB_IS_USING_ZLIB}>:ZLIB::ZLIB>
+		$<$<BOOL:${HTTPLIB_IS_USING_BROTLI}>:brotlicommon-static>
+		$<$<BOOL:${HTTPLIB_IS_USING_BROTLI}>:brotlienc-static>
+		$<$<BOOL:${HTTPLIB_IS_USING_BROTLI}>:brotlidec-static>
+		$<$<BOOL:${HTTPLIB_IS_USING_ZLIB}>:zlib>
 		$<$<BOOL:${HTTPLIB_IS_USING_OPENSSL}>:OpenSSL::SSL>
 		$<$<BOOL:${HTTPLIB_IS_USING_OPENSSL}>:OpenSSL::Crypto>
 )
@@ -225,7 +223,7 @@ target_compile_definitions(${PROJECT_NAME} ${_INTERFACE_OR_PUBLIC}
 )
 
 # CMake configuration files installation directory
-set(_TARGET_INSTALL_CMAKEDIR "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
+set(_TARGET_INSTALL_CMAKEDIR "share/${PROJECT_NAME}")
 
 include(CMakePackageConfigHelpers)
 
@@ -254,21 +252,27 @@ else()
 	)
 endif()
 
+set(public_headers
+    "${_httplib_build_includedir}/httplib.h"
+)
+
+set_target_properties(${PROJECT_NAME} PROPERTIES PUBLIC_HEADER "${public_headers}")
+
 # Creates the export httplibTargets.cmake
 # This is strictly what holds compilation requirements
 # and linkage information (doesn't find deps though).
 install(TARGETS ${PROJECT_NAME}
 	EXPORT httplibTargets
+	PUBLIC_HEADER DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}" # include/httplib
+	INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} # include
 )
 
-install(FILES "${_httplib_build_includedir}/httplib.h" TYPE INCLUDE)
-
 install(FILES
 		"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
 		"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
 		# Install it so it can be used later by the httplibConfig.cmake file.
 		# Put it in the same dir as our config file instead of a global path so we don't potentially stomp on other packages.
-		"${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindBrotli.cmake"
+		#"${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindBrotli.cmake"
 	DESTINATION ${_TARGET_INSTALL_CMAKEDIR}
 )
 
diff --git a/httplib.h b/httplib.h
index 269680b..9d7527f 100644
--- a/httplib.h
+++ b/httplib.h
@@ -265,7 +265,7 @@ using socket_t = int;
 #endif
 
 #ifdef CPPHTTPLIB_ZLIB_SUPPORT
-#include <zlib.h>
+#include <zlib/zlib.h>
 #endif
 
 #ifdef CPPHTTPLIB_BROTLI_SUPPORT
diff --git a/httplibConfig.cmake.in b/httplibConfig.cmake.in
index 93dff32..2298c4c 100644
--- a/httplibConfig.cmake.in
+++ b/httplibConfig.cmake.in
@@ -4,9 +4,7 @@
 # Setting these here so they're accessible after install.
 # Might be useful for some users to check which settings were used.
 set(HTTPLIB_IS_USING_OPENSSL @HTTPLIB_IS_USING_OPENSSL@)
-set(HTTPLIB_IS_USING_ZLIB @HTTPLIB_IS_USING_ZLIB@)
 set(HTTPLIB_IS_COMPILED @HTTPLIB_COMPILE@)
-set(HTTPLIB_IS_USING_BROTLI @HTTPLIB_IS_USING_BROTLI@)
 set(HTTPLIB_VERSION @PROJECT_VERSION@)
 
 include(CMakeFindDependencyMacro)
@@ -23,29 +21,21 @@ if(@HTTPLIB_IS_USING_OPENSSL@)
 		find_dependency(OpenSSL @_HTTPLIB_OPENSSL_MIN_VER@ COMPONENTS Crypto SSL)
 	endif()
 endif()
-if(@HTTPLIB_IS_USING_ZLIB@)
-	find_dependency(ZLIB)
-endif()
 
-if(@HTTPLIB_IS_USING_BROTLI@)
-	# Needed so we can use our own FindBrotli.cmake in this file.
-	# Note that the FindBrotli.cmake file is installed in the same dir as this file.
-	list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")
-	set(BROTLI_USE_STATIC_LIBS @BROTLI_USE_STATIC_LIBS@)
-	find_dependency(Brotli COMPONENTS common encoder decoder)
-endif()
+find_dependency(zlib CONFIG REQUIRED)
+find_dependency(brotli CONFIG REQUIRED)
 
 # Mildly useful for end-users
 # Not really recommended to be used though
 set_and_check(HTTPLIB_INCLUDE_DIR "@PACKAGE_CMAKE_INSTALL_FULL_INCLUDEDIR@")
 # Lets the end-user find the header path with the header appended
 # This is helpful if you're using Cmake's pre-compiled header feature
-set_and_check(HTTPLIB_HEADER_PATH "@PACKAGE_CMAKE_INSTALL_FULL_INCLUDEDIR@/httplib.h")
+set_and_check(HTTPLIB_HEADER_PATH "@PACKAGE_CMAKE_INSTALL_FULL_INCLUDEDIR@/@PROJECT_NAME@/httplib.h")
 
 # Consider each library support as a "component"
 set(httplib_OpenSSL_FOUND @HTTPLIB_IS_USING_OPENSSL@)
-set(httplib_ZLIB_FOUND @HTTPLIB_IS_USING_ZLIB@)
-set(httplib_Brotli_FOUND @HTTPLIB_IS_USING_BROTLI@)
+set(httplib_ZLIB_FOUND 1)
+set(httplib_Brotli_FOUND 1)
 
 check_required_components(httplib)
 
