diff --git a/CMakeLists.txt b/CMakeLists.txt
index 61378cd..c8df9fd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -10,7 +10,7 @@ cmake_minimum_required(VERSION 3.15)
 cmake_policy(SET CMP0048 NEW)
 project(brotli C)
 
-option(BUILD_SHARED_LIBS "Build shared libraries" ON)
+option(BROTLI_BUILD_TOOLS "Build tools" 0)
 
 if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
   message(STATUS "Setting build type to Release as none was specified.")
@@ -142,14 +142,14 @@ endif()
 
 foreach(lib ${BROTLI_LIBRARIES_CORE})
   target_link_libraries(${lib} ${LIBM_LIBRARY})
-  set_property(TARGET ${lib} APPEND PROPERTY INCLUDE_DIRECTORIES ${BROTLI_INCLUDE_DIRS})
+  #set_property(TARGET ${lib} APPEND PROPERTY INCLUDE_DIRECTORIES ${BROTLI_INCLUDE_DIRS})
   set_target_properties(${lib} PROPERTIES
     VERSION "${BROTLI_ABI_COMPATIBILITY}.${BROTLI_ABI_AGE}.${BROTLI_ABI_REVISION}"
     SOVERSION "${BROTLI_ABI_COMPATIBILITY}")
   if(NOT BROTLI_EMSCRIPTEN)
     set_target_properties(${lib} PROPERTIES POSITION_INDEPENDENT_CODE TRUE)
   endif()
-  set_property(TARGET ${lib} APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES "$<BUILD_INTERFACE:${BROTLI_INCLUDE_DIRS}>")
+  set_property(TARGET ${lib} APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES "$<BUILD_INTERFACE:${BROTLI_INCLUDE_DIRS}>" "$<INSTALL_INTERFACE:include>")
 endforeach()
 
 if(NOT BROTLI_EMSCRIPTEN)
@@ -168,27 +168,52 @@ if(BROTLI_PARENT_DIRECTORY)
   set(BROTLI_LIBRARIES "${BROTLI_LIBRARIES}" PARENT_SCOPE)
 endif()
 
-# Build the brotli executable
-add_executable(brotli c/tools/brotli.c)
-target_link_libraries(brotli ${BROTLI_LIBRARIES})
+if(BROTLI_BUILD_TOOLS)
+    add_executable(${PROJECT_NAME} c/tools/brotli.c)
+    target_link_libraries(${PROJECT_NAME} ${BROTLI_LIBRARIES})
+    install(
+        TARGETS ${PROJECT_NAME}
+        RUNTIME DESTINATION tools/${PROJECT_NAME}
+        CONFIGURATIONS Release
+    )
+endif()
 
 # Installation
 if(NOT BROTLI_BUNDLED_MODE)
-  install(
-    TARGETS brotli
-    RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
+  #file(GLOB public_headers "${BROTLI_INCLUDE_DIRS}/*.h")
+  #set_target_properties(brotlicommon PROPERTIES PUBLIC_HEADER "${public_headers}")
+
+  include(CMakePackageConfigHelpers)
+
+  # install the target and create export-set
+  install(TARGETS ${BROTLI_LIBRARIES_CORE}
+      EXPORT ${PROJECT_NAME}Targets
+      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} # bin
+      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} # lib
+      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} # lib
+      #PUBLIC_HEADER DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}"
+      #INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} # include
   )
-
+  # public headers
   install(
-    TARGETS ${BROTLI_LIBRARIES_CORE}
-    ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
-    LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
-    RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
+      DIRECTORY ${BROTLI_INCLUDE_DIRS}/brotli
+      DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
   )
-
-  install(
-    DIRECTORY ${BROTLI_INCLUDE_DIRS}/brotli
-    DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
+  # generate and install export file
+  install(EXPORT "${PROJECT_NAME}Targets"
+      FILE "${PROJECT_NAME}Targets.cmake"
+      DESTINATION "share/${PROJECT_NAME}"
+  )
+  # create config file
+  configure_package_config_file(
+      "${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in"
+      "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
+      INSTALL_DESTINATION "share/${PROJECT_NAME}"
+  )
+  # install config files
+  install(FILES
+      "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
+      DESTINATION "share/${PROJECT_NAME}"
   )
 endif()  # BROTLI_BUNDLED_MODE
 
diff --git a/Config.cmake.in b/Config.cmake.in
new file mode 100644
index 0000000..8c9ad12
--- /dev/null
+++ b/Config.cmake.in
@@ -0,0 +1,5 @@
+@PACKAGE_INIT@
+
+include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")
+
+check_required_components(@PROJECT_NAME@)
