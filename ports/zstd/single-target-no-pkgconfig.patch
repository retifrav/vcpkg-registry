diff --git a/build/cmake/contrib/pzstd/CMakeLists.txt b/build/cmake/contrib/pzstd/CMakeLists.txt
index f7098fa0..2842641c 100644
--- a/build/cmake/contrib/pzstd/CMakeLists.txt
+++ b/build/cmake/contrib/pzstd/CMakeLists.txt
@@ -21,11 +21,12 @@ add_executable(pzstd ${PROGRAMS_DIR}/util.c ${PZSTD_DIR}/main.cpp ${PZSTD_DIR}/O
 set_property(TARGET pzstd APPEND PROPERTY COMPILE_DEFINITIONS "NDEBUG")
 set_property(TARGET pzstd APPEND PROPERTY COMPILE_OPTIONS "-Wno-shadow")
 
-if (ZSTD_BUILD_SHARED)
-    set(ZSTD_LIB libzstd_shared)
-else()
-    set(ZSTD_LIB libzstd_static)
-endif()
+# if (ZSTD_BUILD_SHARED)
+#     set(ZSTD_LIB libzstd_shared)
+# else()
+#     set(ZSTD_LIB libzstd_static)
+# endif()
+set(ZSTD_LIB zstd)
 
 set(THREADS_PREFER_PTHREAD_FLAG ON)
 find_package(Threads REQUIRED)
diff --git a/build/cmake/lib/CMakeLists.txt b/build/cmake/lib/CMakeLists.txt
index 30349586..1c61dd9a 100644
--- a/build/cmake/lib/CMakeLists.txt
+++ b/build/cmake/lib/CMakeLists.txt
@@ -7,14 +7,12 @@
 # in the COPYING file in the root directory of this source tree).
 # ################################################################
 
-project(libzstd C ASM)
-
 set(CMAKE_INCLUDE_CURRENT_DIR TRUE)
 option(ZSTD_BUILD_STATIC "BUILD STATIC LIBRARIES" ON)
 option(ZSTD_BUILD_SHARED "BUILD SHARED LIBRARIES" ON)
 
 if(NOT ZSTD_BUILD_SHARED AND NOT ZSTD_BUILD_STATIC)
-    message(SEND_ERROR "You need to build at least one flavor of libzstd")
+    message(SEND_ERROR "You need to build at least one flavor of ${PROJECT_NAME}")
 endif()
 
 # Define library directory, where sources and header files are located
@@ -73,8 +71,8 @@ if (ZSTD_LEGACY_SUPPORT)
 endif ()
 
 if (MSVC)
-    set(MSVC_RESOURCE_DIR ${ZSTD_SOURCE_DIR}/build/VS2010/libzstd-dll)
-    set(PlatformDependResources ${MSVC_RESOURCE_DIR}/libzstd-dll.rc)
+    set(MSVC_RESOURCE_DIR ${ZSTD_SOURCE_DIR}/build/VS2010/lib${PROJECT_NAME}-dll)
+    set(PlatformDependResources ${MSVC_RESOURCE_DIR}/lib${PROJECT_NAME}-dll.rc)
 endif ()
 
 # Explicitly set the language to C for all files, including ASM files.
@@ -83,62 +81,69 @@ endif ()
 # macros.
 set_source_files_properties(${Sources} PROPERTIES LANGUAGE C)
 
-# Split project to static and shared libraries build
-set(library_targets)
-if (ZSTD_BUILD_SHARED)
-    add_library(libzstd_shared SHARED ${Sources} ${Headers} ${PlatformDependResources})
-    list(APPEND library_targets libzstd_shared)
-    if (ZSTD_MULTITHREAD_SUPPORT)
-        set_property(TARGET libzstd_shared APPEND PROPERTY COMPILE_DEFINITIONS "ZSTD_MULTITHREAD")
-        if (UNIX)
-            target_link_libraries(libzstd_shared ${THREADS_LIBS})
-        endif ()
-    endif()
-endif ()
-if (ZSTD_BUILD_STATIC)
-    add_library(libzstd_static STATIC ${Sources} ${Headers})
-    list(APPEND library_targets libzstd_static)
-    if (ZSTD_MULTITHREAD_SUPPORT)
-        set_property(TARGET libzstd_static APPEND PROPERTY COMPILE_DEFINITIONS "ZSTD_MULTITHREAD")
-        if (UNIX)
-            target_link_libraries(libzstd_static ${THREADS_LIBS})
-        endif ()
+add_library(${PROJECT_NAME})
+
+list(APPEND all_target_sources
+    ${Sources}
+    ${Headers}
+)
+if(ZSTD_BUILD_SHARED)
+    list(APPEND all_target_sources
+        ${PlatformDependResources}
+    )
+endif()
+
+target_sources(${PROJECT_NAME}
+    PRIVATE
+        ${all_target_sources}
+)
+
+set(public_headers
+    "${LIBRARY_DIR}/zstd.h"
+    "${LIBRARY_DIR}/zdict.h"
+    "${LIBRARY_DIR}/zstd_errors.h"
+)
+
+if(ZSTD_MULTITHREAD_SUPPORT)
+    set_property(TARGET ${PROJECT_NAME} APPEND PROPERTY COMPILE_DEFINITIONS "ZSTD_MULTITHREAD")
+    if (UNIX AND NOT APPLE)
+        target_link_libraries(${PROJECT_NAME} ${THREADS_LIBS})
     endif ()
-endif ()
+endif()
+
 
 # Add specific compile definitions for MSVC project
 if (MSVC)
     if (ZSTD_BUILD_SHARED)
-        set_property(TARGET libzstd_shared APPEND PROPERTY COMPILE_DEFINITIONS "ZSTD_DLL_EXPORT=1;ZSTD_HEAPMODE=0;_CONSOLE;_CRT_SECURE_NO_WARNINGS")
+        set_property(TARGET ${PROJECT_NAME} APPEND PROPERTY COMPILE_DEFINITIONS "ZSTD_DLL_EXPORT=1;ZSTD_HEAPMODE=0;_CONSOLE;_CRT_SECURE_NO_WARNINGS")
     endif ()
     if (ZSTD_BUILD_STATIC)
-        set_property(TARGET libzstd_static APPEND PROPERTY COMPILE_DEFINITIONS "ZSTD_HEAPMODE=0;_CRT_SECURE_NO_WARNINGS")
+        set_property(TARGET ${PROJECT_NAME} APPEND PROPERTY COMPILE_DEFINITIONS "ZSTD_HEAPMODE=0;_CRT_SECURE_NO_WARNINGS")
     endif ()
 endif ()
 
-# With MSVC static library needs to be renamed to avoid conflict with import library
-if (MSVC OR (WIN32 AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND NOT MINGW))
-    set(STATIC_LIBRARY_BASE_NAME zstd_static)
-else ()
-    set(STATIC_LIBRARY_BASE_NAME zstd)
-endif ()
+# # With MSVC static library needs to be renamed to avoid conflict with import library
+# if (MSVC OR (WIN32 AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND NOT MINGW))
+#     set(STATIC_LIBRARY_BASE_NAME zstd_static)
+# else ()
+#     set(STATIC_LIBRARY_BASE_NAME zstd)
+# endif ()
 
 # Define static and shared library names
 if (ZSTD_BUILD_SHARED)
-    set_target_properties(
-            libzstd_shared
-            PROPERTIES
-            OUTPUT_NAME zstd
+    set_target_properties(${PROJECT_NAME}
+        PROPERTIES
+            #OUTPUT_NAME zstd
             VERSION ${zstd_VERSION_MAJOR}.${zstd_VERSION_MINOR}.${zstd_VERSION_PATCH}
             SOVERSION ${zstd_VERSION_MAJOR})
 endif ()
 
 if (ZSTD_BUILD_STATIC)
-    set_target_properties(
-            libzstd_static
-            PROPERTIES
+    set_target_properties(${PROJECT_NAME}
+        PROPERTIES
             POSITION_INDEPENDENT_CODE On
-            OUTPUT_NAME ${STATIC_LIBRARY_BASE_NAME})
+            #OUTPUT_NAME ${STATIC_LIBRARY_BASE_NAME}
+    )
 endif ()
 
 # pkg-config
@@ -150,24 +155,20 @@ join_paths(INCLUDEDIR "\${prefix}" "${CMAKE_INSTALL_INCLUDEDIR}")
 set(LIBS_PRIVATE "${THREADS_LIBS}")
 set(VERSION "${zstd_VERSION}")
 
-configure_file("${LIBRARY_DIR}/libzstd.pc.in" "${CMAKE_CURRENT_BINARY_DIR}/libzstd.pc" @ONLY)
-install(FILES "${CMAKE_CURRENT_BINARY_DIR}/libzstd.pc" DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
+# configure_file("${LIBRARY_DIR}/libzstd.pc.in" "${CMAKE_CURRENT_BINARY_DIR}/libzstd.pc" @ONLY)
+# install(FILES "${CMAKE_CURRENT_BINARY_DIR}/libzstd.pc" DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
 
 # install target
-install(FILES
-    "${LIBRARY_DIR}/zstd.h"
-    "${LIBRARY_DIR}/zdict.h"
-    "${LIBRARY_DIR}/zstd_errors.h"
-    DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}")
-
-install(TARGETS ${library_targets}
-    EXPORT zstdExports
-    INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
-    ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
-    LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
-    RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
-    BUNDLE DESTINATION "${CMAKE_INSTALL_BINDIR}"
-    )
+
+set_target_properties(${PROJECT_NAME} PROPERTIES PUBLIC_HEADER "${public_headers}")
+
+set_target_properties(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX "d")
+
+install(TARGETS ${PROJECT_NAME}
+    EXPORT "${PROJECT_NAME}Exports"
+    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME} # include/zstd
+    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} # include
+)
 
 # uninstall target
 if (NOT TARGET uninstall)
diff --git a/build/cmake/programs/CMakeLists.txt b/build/cmake/programs/CMakeLists.txt
index 58d998e4..c066feeb 100644
--- a/build/cmake/programs/CMakeLists.txt
+++ b/build/cmake/programs/CMakeLists.txt
@@ -21,11 +21,13 @@ if (ZSTD_LEGACY_SUPPORT)
     include_directories(${PROGRAMS_LEGACY_DIR} ${LIBRARY_DIR}/legacy)
 endif ()
 
-if (ZSTD_PROGRAMS_LINK_SHARED)
-    set(PROGRAMS_ZSTD_LINK_TARGET libzstd_shared)
-else ()
-    set(PROGRAMS_ZSTD_LINK_TARGET libzstd_static)
-endif ()
+# if (ZSTD_PROGRAMS_LINK_SHARED)
+#     set(PROGRAMS_ZSTD_LINK_TARGET libzstd_shared)
+# else ()
+#     set(PROGRAMS_ZSTD_LINK_TARGET libzstd_static)
+# endif ()
+set(PROGRAMS_ZSTD_LINK_TARGET zstd)
+
 
 if (MSVC)
     set(MSVC_RESOURCE_DIR ${ZSTD_SOURCE_DIR}/build/VS2010/zstd)
diff --git a/build/cmake/tests/CMakeLists.txt b/build/cmake/tests/CMakeLists.txt
index 250f0508..d84f5b02 100644
--- a/build/cmake/tests/CMakeLists.txt
+++ b/build/cmake/tests/CMakeLists.txt
@@ -51,7 +51,7 @@ set(TESTS_DIR ${ZSTD_SOURCE_DIR}/tests)
 include_directories(${TESTS_DIR} ${PROGRAMS_DIR} ${LIBRARY_DIR} ${LIBRARY_DIR}/common ${LIBRARY_DIR}/compress ${LIBRARY_DIR}/dictBuilder)
 
 add_executable(datagen ${PROGRAMS_DIR}/datagen.c ${TESTS_DIR}/datagencli.c)
-target_link_libraries(datagen libzstd_static)
+target_link_libraries(datagen zstd)
 
 #
 # fullbench
@@ -60,7 +60,7 @@ add_executable(fullbench ${PROGRAMS_DIR}/datagen.c ${PROGRAMS_DIR}/util.c ${PROG
 if (NOT MSVC)
     target_compile_options(fullbench PRIVATE "-Wno-deprecated-declarations")
 endif()
-target_link_libraries(fullbench libzstd_static)
+target_link_libraries(fullbench zstd)
 add_test(NAME fullbench COMMAND fullbench ${ZSTD_FULLBENCH_FLAGS})
 
 #
@@ -70,7 +70,7 @@ add_executable(fuzzer ${PROGRAMS_DIR}/datagen.c ${PROGRAMS_DIR}/util.c ${PROGRAM
 if (NOT MSVC)
     target_compile_options(fuzzer PRIVATE "-Wno-deprecated-declarations")
 endif()
-target_link_libraries(fuzzer libzstd_static)
+target_link_libraries(fuzzer zstd)
 AddTestFlagsOption(ZSTD_FUZZER_FLAGS "$ENV{FUZZERTEST} $ENV{FUZZER_FLAGS}"
     "Semicolon-separated list of flags to pass to the fuzzer test (see `fuzzer -h` for usage)")
 add_test(NAME fuzzer COMMAND fuzzer ${ZSTD_FUZZER_FLAGS})
@@ -85,7 +85,7 @@ add_executable(zstreamtest ${PROGRAMS_DIR}/datagen.c ${PROGRAMS_DIR}/util.c ${PR
 if (NOT MSVC)
     target_compile_options(zstreamtest PRIVATE "-Wno-deprecated-declarations")
 endif()
-target_link_libraries(zstreamtest libzstd_static)
+target_link_libraries(zstreamtest zstd)
 AddTestFlagsOption(ZSTD_ZSTREAM_FLAGS "$ENV{ZSTREAM_TESTTIME} $ENV{FUZZER_FLAGS}"
     "Semicolon-separated list of flags to pass to the zstreamtest test (see `zstreamtest -h` for usage)")
 add_test(NAME zstreamtest COMMAND zstreamtest ${ZSTD_ZSTREAM_FLAGS})
@@ -112,7 +112,7 @@ set_property(TEST fuzzer zstreamtest playTests APPEND PROPERTY LABELS Medium)
 
 add_executable(paramgrill ${PROGRAMS_DIR}/benchfn.c ${PROGRAMS_DIR}/benchzstd.c ${PROGRAMS_DIR}/datagen.c ${PROGRAMS_DIR}/util.c ${PROGRAMS_DIR}/timefn.c ${TESTS_DIR}/paramgrill.c)
 if (UNIX)
-    target_link_libraries(paramgrill libzstd_static m) #m is math library
+    target_link_libraries(paramgrill zstd m) #m is math library
 else()
-    target_link_libraries(paramgrill libzstd_static)
+    target_link_libraries(paramgrill zstd)
 endif ()
