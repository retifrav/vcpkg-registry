diff --git a/CMakeLists.txt b/CMakeLists.txt
index 96d13e4..03aa26b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,5 +1,5 @@
-cmake_minimum_required (VERSION 3.7)
-project (libjuice
+cmake_minimum_required (VERSION 3.22)
+project (juice
 	VERSION 1.5.1
 	LANGUAGES C)
 set(PROJECT_DESCRIPTION "UDP Interactive Connectivity Establishment (ICE) library")
@@ -89,65 +89,46 @@ source_group("Fuzzer Files" FILES "${FUZZER_SOURCES}")
 set(THREADS_PREFER_PTHREAD_FLAG ON)
 find_package(Threads REQUIRED)
 
-add_library(juice SHARED ${LIBJUICE_SOURCES})
-set_target_properties(juice PROPERTIES VERSION ${PROJECT_VERSION})
-target_include_directories(juice PUBLIC
+add_library(juice ${LIBJUICE_SOURCES})
+set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${PROJECT_VERSION})
+target_include_directories(${PROJECT_NAME} PUBLIC
     $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
     $<INSTALL_INTERFACE:include>)
-target_include_directories(juice PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include/juice)
-target_include_directories(juice PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src)
-target_compile_definitions(juice PRIVATE $<$<CONFIG:Release>:RELEASE=1>)
-target_link_libraries(juice PRIVATE Threads::Threads)
-
-add_library(juice-static STATIC EXCLUDE_FROM_ALL ${LIBJUICE_SOURCES})
-set_target_properties(juice-static PROPERTIES VERSION ${PROJECT_VERSION})
-target_include_directories(juice-static PUBLIC
-    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
-    $<INSTALL_INTERFACE:include>)
-target_include_directories(juice-static PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include/juice)
-target_include_directories(juice-static PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src)
-target_compile_definitions(juice-static PRIVATE $<$<CONFIG:Release>:RELEASE=1>)
-target_compile_definitions(juice-static PUBLIC JUICE_STATIC)
-target_link_libraries(juice-static PRIVATE Threads::Threads)
+target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include/juice)
+target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src)
+target_compile_definitions(${PROJECT_NAME} PRIVATE $<$<CONFIG:Release>:RELEASE=1>)
+target_link_libraries(${PROJECT_NAME} PRIVATE Threads::Threads)
+
+if(NOT DEFINED BUILD_SHARED_LIBS OR NOT BUILD_SHARED_LIBS)
+	target_compile_definitions(${PROJECT_NAME} PUBLIC JUICE_STATIC)
+endif()
 
 if(WIN32)
-	target_link_libraries(juice PRIVATE
-		ws2_32 # winsock2
-		bcrypt)
-	target_link_libraries(juice-static PRIVATE
+	target_link_libraries(${PROJECT_NAME} PRIVATE
 		ws2_32 # winsock2
 		bcrypt)
 endif()
 
 if (USE_NETTLE)
 	find_package(Nettle REQUIRED)
-    target_compile_definitions(juice PRIVATE USE_NETTLE=1)
-    target_link_libraries(juice PRIVATE Nettle::Nettle)
-    target_compile_definitions(juice-static PRIVATE USE_NETTLE=1)
-    target_link_libraries(juice-static PRIVATE Nettle::Nettle)
+    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_NETTLE=1)
+    target_link_libraries(${PROJECT_NAME} PRIVATE Nettle::Nettle)
 else()
-    target_compile_definitions(juice PRIVATE USE_NETTLE=0)
-    target_compile_definitions(juice-static PRIVATE USE_NETTLE=0)
+    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_NETTLE=0)
 endif()
 
 if (NO_SERVER)
-	target_compile_definitions(juice PRIVATE NO_SERVER)
-	target_compile_definitions(juice-static PRIVATE NO_SERVER)
+	target_compile_definitions(${PROJECT_NAME} PRIVATE NO_SERVER)
 endif()
 
 if(APPLE)
 	# This seems to be necessary on MacOS
-	target_include_directories(juice PRIVATE /usr/local/include)
-	target_include_directories(juice-static PRIVATE /usr/local/include)
+	target_include_directories(${PROJECT_NAME} PRIVATE /usr/local/include)
 endif()
 
-set_target_properties(juice PROPERTIES EXPORT_NAME LibJuice)
-add_library(LibJuice::LibJuice ALIAS juice)
-
-set_target_properties(juice-static PROPERTIES EXPORT_NAME LibJuiceStatic)
-add_library(LibJuice::LibJuiceStatic ALIAS juice-static)
+add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})
 
-install(TARGETS juice EXPORT LibJuiceTargets
+install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}Targets
 	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
 	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
 	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
@@ -157,63 +138,56 @@ install(FILES ${LIBJUICE_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/juice)
 
 # Export targets
 install(
-	EXPORT LibJuiceTargets
-	FILE LibJuiceTargets.cmake
-	NAMESPACE LibJuice::
-	DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/LibJuice
+	EXPORT ${PROJECT_NAME}Targets
+	FILE ${PROJECT_NAME}Targets.cmake
+	NAMESPACE ${PROJECT_NAME}::
+	DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
 )
 
 include(CMakePackageConfigHelpers)
 configure_package_config_file(
     ${CMAKE_CURRENT_SOURCE_DIR}/cmake/LibJuiceConfig.cmake.in
-    ${CMAKE_BINARY_DIR}/LibJuiceConfig.cmake
-    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/LibJuice
+    ${CMAKE_BINARY_DIR}/${PROJECT_NAME}Config.cmake
+    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
     NO_SET_AND_CHECK_MACRO
     NO_CHECK_REQUIRED_COMPONENTS_MACRO
 )
 write_basic_package_version_file(
-    ${CMAKE_BINARY_DIR}/LibJuiceConfigVersion.cmake
+    ${CMAKE_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
     VERSION ${PROJECT_VERSION}
     COMPATIBILITY SameMajorVersion
 )
 # Export config and version files
 install(FILES
-	${CMAKE_BINARY_DIR}/LibJuiceConfig.cmake
-	${CMAKE_BINARY_DIR}/LibJuiceConfigVersion.cmake
-    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/LibJuice)
+	${CMAKE_BINARY_DIR}/${PROJECT_NAME}Config.cmake
+	${CMAKE_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
+    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})
 
-set_target_properties(juice PROPERTIES C_VISIBILITY_PRESET hidden)
-target_compile_definitions(juice PRIVATE JUICE_EXPORTS)
-target_compile_definitions(juice-static PRIVATE JUICE_EXPORTS)
+set_target_properties(${PROJECT_NAME} PROPERTIES C_VISIBILITY_PRESET hidden)
+target_compile_definitions(${PROJECT_NAME} PRIVATE JUICE_EXPORTS)
 
 if(NOT MSVC)
-	target_compile_options(juice PRIVATE -Wall -Wextra)
-	target_compile_options(juice-static PRIVATE -Wall -Wextra)
+	target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra)
 endif()
 
 if(WARNINGS_AS_ERRORS)
 	if(MSVC)
-		target_compile_options(juice PRIVATE /WX)
-		target_compile_options(juice-static PRIVATE /WX)
+		target_compile_options(${PROJECT_NAME} PRIVATE /WX)
 	else()
-		target_compile_options(juice PRIVATE -Werror)
-		target_compile_options(juice-static PRIVATE -Werror)
+		target_compile_options(${PROJECT_NAME} PRIVATE -Werror)
 	endif()
 endif()
 
 if(DISABLE_CONSENT_FRESHNESS)
-	target_compile_definitions(juice PRIVATE JUICE_DISABLE_CONSENT_FRESHNESS=1)
-	target_compile_definitions(juice-static PRIVATE JUICE_DISABLE_CONSENT_FRESHNESS=1)
+	target_compile_definitions(${PROJECT_NAME} PRIVATE JUICE_DISABLE_CONSENT_FRESHNESS=1)
 endif()
 
 if(ENABLE_LOCALHOST_ADDRESS)
-	target_compile_definitions(juice PRIVATE JUICE_ENABLE_LOCALHOST_ADDRESS=1)
-	target_compile_definitions(juice-static PRIVATE JUICE_ENABLE_LOCALHOST_ADDRESS=1)
+	target_compile_definitions(${PROJECT_NAME} PRIVATE JUICE_ENABLE_LOCALHOST_ADDRESS=1)
 endif()
 
 if(ENABLE_LOCAL_ADDRESS_TRANSLATION)
-	target_compile_definitions(juice PRIVATE JUICE_ENABLE_LOCAL_ADDRESS_TRANSLATION=1)
-	target_compile_definitions(juice-static PRIVATE JUICE_ENABLE_LOCAL_ADDRESS_TRANSLATION=1)
+	target_compile_definitions(${PROJECT_NAME} PRIVATE JUICE_ENABLE_LOCAL_ADDRESS_TRANSLATION=1)
 endif()
 
 # Tests
@@ -239,5 +213,5 @@ if(FUZZER)
 	target_include_directories(stun-fuzzer PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include/juice)
 
 	set_target_properties(stun-fuzzer PROPERTIES OUTPUT_NAME fuzzer)
-	target_link_libraries(stun-fuzzer juice-static ${LIB_FUZZING_ENGINE})
+	target_link_libraries(stun-fuzzer ${PROJECT_NAME} ${LIB_FUZZING_ENGINE})
 endif()
diff --git a/cmake/LibJuiceConfig.cmake.in b/cmake/LibJuiceConfig.cmake.in
index 247e53f..587c299 100644
--- a/cmake/LibJuiceConfig.cmake.in
+++ b/cmake/LibJuiceConfig.cmake.in
@@ -1,4 +1,6 @@
 @PACKAGE_INIT@
 
-include("${CMAKE_CURRENT_LIST_DIR}/LibJuiceTargets.cmake")
+include(CMakeFindDependencyMacro)
+find_dependency(Threads REQUIRED)
 
+include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")
