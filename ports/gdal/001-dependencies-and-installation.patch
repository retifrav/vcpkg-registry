diff --git a/alg/gdalapplyverticalshiftgrid.cpp b/alg/gdalapplyverticalshiftgrid.cpp
index a7d044cb2a..bda7759232 100644
--- a/alg/gdalapplyverticalshiftgrid.cpp
+++ b/alg/gdalapplyverticalshiftgrid.cpp
@@ -20,7 +20,7 @@
 #include "vrtdataset.h"
 #include "ogr_spatialref.h"
 
-#include "proj.h"
+#include <proj/proj.h>
 
 #include <cmath>
 #include <limits>
diff --git a/apps/CMakeLists.txt b/apps/CMakeLists.txt
index beca7896f0..7d5a8cb71f 100644
--- a/apps/CMakeLists.txt
+++ b/apps/CMakeLists.txt
@@ -133,7 +133,7 @@ target_compile_definitions(appslib PUBLIC $<$<CONFIG:DEBUG>:GDAL_DEBUG>)
 if (GDAL_USE_JSONC_INTERNAL)
   gdal_add_vendored_lib(appslib libjson)
 else ()
-  gdal_target_link_libraries(appslib PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(appslib PRIVATE json-c::json-c)
 endif ()
 
 include(TargetPublicHeader)
diff --git a/apps/gdalsrsinfo.cpp b/apps/gdalsrsinfo.cpp
index 4b9afdc4d8..281ef27851 100644
--- a/apps/gdalsrsinfo.cpp
+++ b/apps/gdalsrsinfo.cpp
@@ -21,7 +21,7 @@
 #include "ogrsf_frmts.h"
 #include "commonutils.h"
 
-#include "proj.h"
+#include <proj/proj.h>
 
 bool FindSRS(const char *pszInput, OGRSpatialReference &oSRS);
 CPLErr PrintSRS(const OGRSpatialReference &oSRS, const char *pszOutputType,
diff --git a/autotest/cpp/CMakeLists.txt b/autotest/cpp/CMakeLists.txt
index ff2c510bda..639462187f 100644
--- a/autotest/cpp/CMakeLists.txt
+++ b/autotest/cpp/CMakeLists.txt
@@ -122,7 +122,7 @@ target_include_directories(
 if (GDAL_USE_SQLITE3)
   target_compile_definitions(gdal_unit_test PRIVATE -DHAVE_SQLITE3)
   target_include_directories(
-      gdal_unit_test PRIVATE $<TARGET_PROPERTY:SQLite::SQLite3,INTERFACE_INCLUDE_DIRECTORIES>)
+      gdal_unit_test PRIVATE $<TARGET_PROPERTY:SQLite3,INTERFACE_INCLUDE_DIRECTORIES>)
 endif()
 
 target_compile_definitions(gdal_unit_test PRIVATE -DGDAL_TEST_ROOT_DIR="${GDAL_ROOT_TEST_DIR}")
diff --git a/cmake/helpers/CheckDependentLibraries.cmake b/cmake/helpers/CheckDependentLibraries.cmake
index abb5a4c5a2..f3ba013678 100644
--- a/cmake/helpers/CheckDependentLibraries.cmake
+++ b/cmake/helpers/CheckDependentLibraries.cmake
@@ -110,29 +110,9 @@ if (GDAL_USE_CRYPTOPP)
   option(CRYPTOPP_USE_ONLY_CRYPTODLL_ALG "Use Only cryptoDLL alg. only work on dynamic DLL" OFF)
 endif ()
 
-set(GDAL_FIND_PACKAGE_PROJ_MODE "CUSTOM" CACHE STRING "Mode to use for find_package(PROJ): CUSTOM, CONFIG, MODULE or empty string")
-set_property(CACHE GDAL_FIND_PACKAGE_PROJ_MODE PROPERTY STRINGS "CUSTOM" "CONFIG" "MODULE" "")
-if(NOT GDAL_FIND_PACKAGE_PROJ_MODE STREQUAL "CUSTOM")
-    find_package(PROJ ${GDAL_FIND_PACKAGE_PROJ_MODE} REQUIRED)
-    if (NOT BUILD_SHARED_LIBS)
-        string(APPEND GDAL_IMPORT_DEPENDENCIES "find_dependency(PROJ ${GDAL_FIND_PACKAGE_PROJ_MODE})\n")
-    endif()
-else()
-    # First check with CMake config files, and then fallback to the FindPROJ module.
-    find_package(PROJ CONFIG)
-    if (PROJ_FOUND AND PROJ_VERSION VERSION_LESS "8")
-        message(WARNING "PROJ ${PROJ_VERSION} < 8 found with Config file. As it is not trusted, retrying with module mode")
-    endif()
-    if (PROJ_FOUND)
-      if (NOT BUILD_SHARED_LIBS)
-        string(APPEND GDAL_IMPORT_DEPENDENCIES "find_dependency(PROJ CONFIG)\n")
-      endif()
-    else()
-      find_package(PROJ REQUIRED)
-      if (NOT BUILD_SHARED_LIBS)
-        string(APPEND GDAL_IMPORT_DEPENDENCIES "find_dependency(PROJ)\n")
-      endif()
-    endif ()
+find_package(PROJ CONFIG REQUIRED) # has to be upper-cased `PROJ`, not `proj`
+if(NOT BUILD_SHARED_LIBS)
+    string(APPEND GDAL_IMPORT_DEPENDENCIES "find_dependency(PROJ CONFIG REQUIRED)\n")
 endif()
 if (DEFINED PROJ_VERSION_STRING AND NOT DEFINED PROJ_VERSION)
     set(PROJ_VERSION ${PROJ_VERSION_STRING})
@@ -141,50 +121,42 @@ if ("${PROJ_VERSION}" VERSION_LESS "6.3")
     message(FATAL_ERROR "PROJ >= 6.3 required. Version ${PROJ_VERSION} found")
 endif()
 
-gdal_check_package(TIFF "Support for the Tag Image File Format (TIFF)." VERSION 4.1 CAN_DISABLE)
-set_package_properties(
-  TIFF PROPERTIES
-  URL "https://libtiff.gitlab.io/libtiff/"
-  DESCRIPTION "Support for the Tag Image File Format (TIFF)."
-  TYPE RECOMMENDED)
-gdal_internal_library(TIFF)
-
-if (DEFINED ENV{CONDA_PREFIX} AND UNIX)
-    # Currently on Unix, the Zstd cmake config file is buggy. It declares a
-    # libzstd_static target but the corresponding libzstd.a file is missing,
-    # which cause CMake to error out.
-    set(ZSTD_NAMES_AND_TARGETS)
-else()
-    set(ZSTD_NAMES_AND_TARGETS NAMES zstd TARGETS zstd::libzstd_shared zstd::libzstd_static ZSTD::zstd)
+if(GDAL_USE_TIFF)
+    find_package(tiff CONFIG REQUIRED)
+    if(NOT BUILD_SHARED_LIBS)
+        string(APPEND GDAL_IMPORT_DEPENDENCIES "find_dependency(tiff CONFIG REQUIRED)\n")
+    endif()
+endif()
+
+if(GDAL_USE_ZSTD)
+    find_package(zstd CONFIG REQUIRED)
+    if(NOT BUILD_SHARED_LIBS)
+        string(APPEND GDAL_IMPORT_DEPENDENCIES "find_dependency(zstd CONFIG REQUIRED)\n")
+    endif()
 endif()
-gdal_check_package(ZSTD "ZSTD compression library" CAN_DISABLE ${ZSTD_NAMES_AND_TARGETS})
 
 gdal_check_package(SFCGAL "gdal core supports ISO 19107:2013 and OGC Simple Features Access 1.2 for 3D operations"
                    CAN_DISABLE)
 
 include(CheckDependentLibrariesGeoTIFF)
 
-gdal_check_package(PNG "PNG compression library (external)" CAN_DISABLE RECOMMENDED VERSION "1.6")
-gdal_internal_library(PNG)
+if(GDAL_USE_PNG)
+    find_package(png CONFIG REQUIRED)
+    if(NOT BUILD_SHARED_LIBS)
+        string(APPEND GDAL_IMPORT_DEPENDENCIES "find_dependency(png CONFIG REQUIRED)\n")
+    endif()
+endif()
 
 include(CheckDependentLibrariesJpeg)
 
 gdal_check_package(GIF "GIF compression library (external)" CAN_DISABLE)
 gdal_internal_library(GIF)
 
-gdal_check_package(JSONC "json-c library (external)" CAN_DISABLE
-  NAMES json-c
-  TARGETS json-c::json-c JSONC::JSONC
-)
-gdal_internal_library(JSONC REQUIRED)
-if(TARGET json-c::json-c)
-  get_target_property(include_dirs json-c::json-c INTERFACE_INCLUDE_DIRECTORIES)
-  find_path(GDAL_JSON_INCLUDE_DIR NAMES json.h PATHS ${include_dirs} PATH_SUFFIXES json-c NO_DEFAULT_PATH)
-  list(APPEND include_dirs "${GDAL_JSON_INCLUDE_DIR}")
-  list(REMOVE_DUPLICATES include_dirs)
-  set_target_properties(json-c::json-c PROPERTIES
-    INTERFACE_INCLUDE_DIRECTORIES "${GDAL_JSON_INCLUDE_DIR}"
-  )
+if(GDAL_USE_JSONC)
+    find_package(json-c CONFIG REQUIRED)
+    if(NOT BUILD_SHARED_LIBS)
+        string(APPEND GDAL_IMPORT_DEPENDENCIES "find_dependency(json-c CONFIG REQUIRED)\n")
+    endif()
 endif()
 
 gdal_check_package(OpenCAD "libopencad (external, used by OpenCAD driver)" CAN_DISABLE)
@@ -243,27 +215,15 @@ if (NOT GDAL_USE_PCRE2)
   gdal_check_package(PCRE "Enable PCRE support for sqlite3" CAN_DISABLE)
 endif ()
 
-gdal_check_package(SQLite3 "Enable SQLite3 support (used by SQLite/Spatialite, GPKG, Rasterlite, MBTiles, etc.)"
-                   CAN_DISABLE RECOMMENDED
-                   VERSION 3.31)
-if (SQLite3_FOUND)
-  if (NOT DEFINED SQLite3_HAS_COLUMN_METADATA)
-    message(FATAL_ERROR "missing SQLite3_HAS_COLUMN_METADATA")
-  endif ()
-  if (NOT DEFINED SQLite3_HAS_MUTEX_ALLOC)
-    message(FATAL_ERROR "missing SQLite3_HAS_MUTEX_ALLOC")
-  endif ()
-  if (GDAL_USE_SQLITE3 AND NOT SQLite3_HAS_MUTEX_ALLOC)
-    if (NOT ACCEPT_MISSING_SQLITE3_MUTEX_ALLOC)
-      message(
-        FATAL_ERROR
-          "${SQLite3_LIBRARIES} lacks mutex support! Access to SQLite3 databases from multiple threads will be unsafe. Define the ACCEPT_MISSING_SQLITE3_MUTEX_ALLOC:BOOL=ON CMake variable if you want to build despite this limitation."
-        )
-    else ()
-      message(WARNING "${SQLite3_LIBRARIES} lacks the mutex extension! Access to SQLite3 databases from multiple threads will be unsafe")
-    endif ()
-  endif ()
-endif ()
+if(GDAL_USE_SQLITE3)
+    find_package(SQLite3 CONFIG REQUIRED)
+    if(NOT BUILD_SHARED_LIBS)
+        string(APPEND GDAL_IMPORT_DEPENDENCIES "find_dependency(SQLite3 CONFIG REQUIRED)\n")
+    endif()
+    message(STATUS "Found SQLite: ${SQLite3_DIR}")
+    set(SQLite3_HAS_COLUMN_METADATA 0)
+    set(SQLite3_HAS_MUTEX_ALLOC 1)
+endif()
 
 # Checks that SQLite3 has RTree support
 # Called by ogr/ogrsf_frmts/sqlite/CMakeLists.txt and ogr/ogrsf_frmts/gpkg/CMakeLists.txt
diff --git a/cmake/helpers/CheckDependentLibrariesCommon.cmake b/cmake/helpers/CheckDependentLibrariesCommon.cmake
index ebb353829f..05c8cfa79b 100644
--- a/cmake/helpers/CheckDependentLibrariesCommon.cmake
+++ b/cmake/helpers/CheckDependentLibrariesCommon.cmake
@@ -28,13 +28,9 @@ if(NOT GDAL_USE_INTERNAL_LIBS IN_LIST GDAL_USE_INTERNAL_LIBS_ALLOWED_VALUES)
     message(FATAL_ERROR "GDAL_USE_INTERNAL_LIBS must be one of ${GDAL_USE_INTERNAL_LIBS_ALLOWED_VALUES}")
 endif()
 
-set(GDAL_IMPORT_DEPENDENCIES [[
-include(CMakeFindDependencyMacro)
-include("${CMAKE_CURRENT_LIST_DIR}/DefineFindPackage2.cmake")
-include("${CMAKE_CURRENT_LIST_DIR}/GdalFindModulePath.cmake")
-]])
+set(GDAL_IMPORT_DEPENDENCIES)
 if(TARGET Threads::Threads)
-  string(APPEND GDAL_IMPORT_DEPENDENCIES "find_dependency(Threads)\n")
+  string(APPEND GDAL_IMPORT_DEPENDENCIES "#find_dependency(Threads)\n") # where are the platform checks? Finding Threads isn't needed everywhere
 endif()
 
 # Check that the configuration has a valid value for INTERFACE_INCLUDE_DIRECTORIES. This aimed at avoiding issues like
@@ -238,7 +234,7 @@ macro (gdal_check_package name purpose)
     set(_find_dependency "find_dependency(${_find_dependency_args})\n")
   endif()
   if(NOT BUILD_SHARED_LIBS AND GDAL_USE_${key} AND _find_dependency)
-    string(APPEND GDAL_IMPORT_DEPENDENCIES "${_find_dependency}")
+    string(APPEND GDAL_IMPORT_DEPENDENCIES "$#{_find_dependency}")
   endif()
   unset(_find_dependency_args)
   unset(_find_dependency)
diff --git a/cmake/helpers/CheckDependentLibrariesGeoTIFF.cmake b/cmake/helpers/CheckDependentLibrariesGeoTIFF.cmake
index a2ab32b933..70707989fa 100644
--- a/cmake/helpers/CheckDependentLibrariesGeoTIFF.cmake
+++ b/cmake/helpers/CheckDependentLibrariesGeoTIFF.cmake
@@ -1,5 +1,6 @@
-gdal_check_package(GeoTIFF "libgeotiff library (external)" CAN_DISABLE RECOMMENDED
-  NAMES GeoTIFF
-  TARGETS geotiff_library GEOTIFF::GEOTIFF
-)
-gdal_internal_library(GEOTIFF)
+if(GDAL_USE_GEOTIFF)
+    find_package(geotiff CONFIG REQUIRED)
+    if(NOT BUILD_SHARED_LIBS)
+        string(APPEND GDAL_IMPORT_DEPENDENCIES "find_dependency(geotiff CONFIG REQUIRED)\n")
+    endif()
+endif()
diff --git a/cmake/helpers/CheckDependentLibrariesJpeg.cmake b/cmake/helpers/CheckDependentLibrariesJpeg.cmake
index 8227c85fdd..5ebb7f10e3 100644
--- a/cmake/helpers/CheckDependentLibrariesJpeg.cmake
+++ b/cmake/helpers/CheckDependentLibrariesJpeg.cmake
@@ -1,17 +1,7 @@
-gdal_check_package(JPEG "JPEG compression library (external)" CAN_DISABLE RECOMMENDED)
-if (GDAL_USE_JPEG AND (JPEG_LIBRARY MATCHES ".*turbojpeg\.(so|lib)"))
-  message(
-    FATAL_ERROR
-      "JPEG_LIBRARY should point to a library with libjpeg ABI, not TurboJPEG. See https://libjpeg-turbo.org/About/TurboJPEG for the difference"
-    )
-endif ()
-if (GDAL_USE_JPEG AND TARGET JPEG::JPEG)
-  set(EXPECTED_JPEG_LIB_VERSION "" CACHE STRING "Expected libjpeg version number")
-  mark_as_advanced(GDAL_CHECK_PACKAGE_${name}_NAMES)
-  if (EXPECTED_JPEG_LIB_VERSION)
-    get_property(_jpeg_old_icd TARGET JPEG::JPEG PROPERTY INTERFACE_COMPILE_DEFINITIONS)
-    set_property(TARGET JPEG::JPEG PROPERTY
-                 INTERFACE_COMPILE_DEFINITIONS "${_jpeg_old_icd};EXPECTED_JPEG_LIB_VERSION=${EXPECTED_JPEG_LIB_VERSION}")
+if(GDAL_USE_JPEG)
+  find_package(jpeg-turbo CONFIG REQUIRED)
+  if(NOT BUILD_SHARED_LIBS)
+      string(APPEND GDAL_IMPORT_DEPENDENCIES "find_dependency(jpeg-turbo CONFIG REQUIRED)\n")
   endif()
 
   # Check for jpeg12_read_scanlines() which has been added in libjpeg-turbo 2.2
@@ -19,13 +9,13 @@ if (GDAL_USE_JPEG AND TARGET JPEG::JPEG)
   include(CheckCSourceCompiles)
   include(CMakePushCheckState)
   cmake_push_check_state(RESET)
-  set(CMAKE_REQUIRED_INCLUDES "${JPEG_INCLUDE_DIRS}")
-  set(CMAKE_REQUIRED_LIBRARIES "${JPEG_LIBRARIES}")
+  set(CMAKE_REQUIRED_INCLUDES "${jpeg-turbo_DIR}/../../include")
+  set(CMAKE_REQUIRED_LIBRARIES jpeg-turbo::turbojpeg)
   check_c_source_compiles(
       "
       #include <stddef.h>
       #include <stdio.h>
-      #include \"jpeglib.h\"
+      #include <jpeg/jpeglib.h>
       int main()
       {
           jpeg_read_scanlines(0,0,0);
@@ -35,6 +25,4 @@ if (GDAL_USE_JPEG AND TARGET JPEG::JPEG)
       "
       HAVE_JPEGTURBO_DUAL_MODE_8_12)
   cmake_pop_check_state()
-
 endif()
-gdal_internal_library(JPEG)
diff --git a/cmake/helpers/CheckDependentLibrariesZLIB.cmake b/cmake/helpers/CheckDependentLibrariesZLIB.cmake
index e253a78904..ad9effd83f 100644
--- a/cmake/helpers/CheckDependentLibrariesZLIB.cmake
+++ b/cmake/helpers/CheckDependentLibrariesZLIB.cmake
@@ -1,2 +1,6 @@
-gdal_check_package(ZLIB "zlib (external)" CAN_DISABLE)
-gdal_internal_library(ZLIB REQUIRED)
+if(GDAL_USE_ZLIB)
+    find_package(zlib CONFIG REQUIRED)
+    if(NOT BUILD_SHARED_LIBS)
+        string(APPEND GDAL_IMPORT_DEPENDENCIES "find_dependency(zlib CONFIG REQUIRED)\n")
+    endif()
+endif()
diff --git a/cmake/helpers/SetupStandalonePlugin.cmake b/cmake/helpers/SetupStandalonePlugin.cmake
index b0d88666d8..3a39b5683c 100644
--- a/cmake/helpers/SetupStandalonePlugin.cmake
+++ b/cmake/helpers/SetupStandalonePlugin.cmake
@@ -42,7 +42,7 @@ include(GdalDriverHelper)
 include(GNUInstallDirs)
 # Used by GdalDriverHelper's add_gdal_driver()
 set(INSTALL_PLUGIN_DIR
-  "${CMAKE_INSTALL_LIBDIR}/gdalplugins"
+  "${CMAKE_INSTALL_DATAROOTDIR}/gdal/plugins"
   CACHE PATH "Installation sub-directory for plugins")
 
 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fvisibility=hidden")
diff --git a/cmake/modules/DefineFindPackage2.cmake b/cmake/modules/DefineFindPackage2.cmake
index 855e5156f0..18aef1fc1b 100644
--- a/cmake/modules/DefineFindPackage2.cmake
+++ b/cmake/modules/DefineFindPackage2.cmake
@@ -146,17 +146,6 @@ function(find_package2 pkgname)
                                   IMPORTED_LINK_LANGUAGES C
                                   IMPORTED_LOCATION "${${pkgname}_LIBRARY}")
         endif()
-        if(arg_OUT_DEPENDENCY)
-            set(output "define_find_package2(${pkgname} \"${include_file}\" \"${library_name}\"")
-            if(NOT pkgconfig_name STREQUAL "_unset_")
-                string(APPEND output " PKGCONFIG_NAME \"${pkgconfig_name}\"")
-            endif()
-            if(NOT find_path_suffix STREQUAL "_unset_")
-                string(APPEND output " FIND_PATH_SUFFIX \"${find_path_suffix}\"")
-            endif()
-            string(APPEND output ")\nfind_package2(${pkgname} REQUIRED)\n")
-            set(${arg_OUT_DEPENDENCY} ${output} PARENT_SCOPE)
-        endif()
     else()
         set_property(GLOBAL APPEND PROPERTY PACKAGES_NOT_FOUND "${pkgname}")
     endif()
diff --git a/cmake/modules/packages/FindTEIGHA.cmake b/cmake/modules/packages/FindTEIGHA.cmake
index 36ba2755a1..0f377196fd 100644
--- a/cmake/modules/packages/FindTEIGHA.cmake
+++ b/cmake/modules/packages/FindTEIGHA.cmake
@@ -228,7 +228,7 @@ if(TEIGHA_FOUND)
         endforeach()
         if (EXISTS "${TEIGHA_ROOT}/lib/${TEIGHA_PLATFORM}/libTG_Db.a")
             find_library(FREETYPE_LIBRARY NAMES freetype)
-            list(APPEND TEIGHA_TARGETS ZLIB::ZLIB)
+            list(APPEND TEIGHA_TARGETS zlib)
         endif()
         add_library(TEIGHA::TEIGHA INTERFACE IMPORTED)
         set_target_properties(TEIGHA::TEIGHA PROPERTIES
diff --git a/cmake/template/GDALConfig.cmake.in b/cmake/template/GDALConfig.cmake.in
index 0305899542..9838ceba6f 100644
--- a/cmake/template/GDALConfig.cmake.in
+++ b/cmake/template/GDALConfig.cmake.in
@@ -1,17 +1,10 @@
-cmake_policy(SET CMP0012 NEW)
-cmake_policy(SET CMP0057 NEW)
+include(CMakeFindDependencyMacro)
+
 if(NOT "@BUILD_SHARED_LIBS@")
     if(NOT CMAKE_CXX_COMPILER_LOADED)
         message(WARNING "Linking to GDAL may need CXX to be enabled.")
     endif()
-    if(DEFINED CMAKE_MODULE_PATH)
-        set(_gdal_module_path_backup "${CMAKE_MODULE_PATH}")
-    endif()
-    @GDAL_IMPORT_DEPENDENCIES@
-    if(DEFINED _gdal_module_path_backup)
-        set(CMAKE_MODULE_PATH  "${_gdal_module_path_backup}")
-    else()
-        unset(CMAKE_MODULE_PATH)
-    endif()
+
+@GDAL_IMPORT_DEPENDENCIES@
 endif()
 include("${CMAKE_CURRENT_LIST_DIR}/GDAL-targets.cmake")
diff --git a/frmts/cals/calsdataset.cpp b/frmts/cals/calsdataset.cpp
index 48ad43ef73..7f0197aeb5 100644
--- a/frmts/cals/calsdataset.cpp
+++ b/frmts/cals/calsdataset.cpp
@@ -14,7 +14,7 @@
 #include "gdal_pam.h"
 #include "gdal_priv.h"
 
-#include "tiff.h"
+#include <tiff/tiff.h>
 
 /************************************************************************/
 /* ==================================================================== */
diff --git a/frmts/eeda/CMakeLists.txt b/frmts/eeda/CMakeLists.txt
index d531229bb5..b3b25b0614 100644
--- a/frmts/eeda/CMakeLists.txt
+++ b/frmts/eeda/CMakeLists.txt
@@ -21,7 +21,7 @@ set_property(
 if (GDAL_USE_JSONC_INTERNAL)
   gdal_add_vendored_lib(gdal_EEDA libjson)
 else ()
-  gdal_target_link_libraries(gdal_EEDA PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(gdal_EEDA PRIVATE json-c::json-c)
 endif ()
 
 if (GDAL_ENABLE_DRIVER_EEDA_PLUGIN)
diff --git a/frmts/georaster/CMakeLists.txt b/frmts/georaster/CMakeLists.txt
index df02240b36..083bff28e9 100644
--- a/frmts/georaster/CMakeLists.txt
+++ b/frmts/georaster/CMakeLists.txt
@@ -49,11 +49,11 @@ endif ()
 # /usr/local/opt/jpeg-turbo gets included first, before /usr/local/opt
 # that contains libjpeg 9e
 if (GDAL_ENABLE_DRIVER_JPEG AND (NOT GDAL_USE_JPEG_INTERNAL))
-  gdal_target_link_libraries(gdal_GEOR PRIVATE JPEG::JPEG)
+  gdal_target_link_libraries(gdal_GEOR PRIVATE jpeg-turbo::turbojpeg)
 endif ()
 
 gdal_target_link_libraries(gdal_GEOR PRIVATE Oracle::OCI)
 
 if (NOT GDAL_USE_ZLIB_INTERNAL)
-  gdal_target_link_libraries(gdal_GEOR PRIVATE ZLIB::ZLIB)
+  gdal_target_link_libraries(gdal_GEOR PRIVATE zlib)
 endif ()
diff --git a/frmts/georaster/georaster_priv.h b/frmts/georaster/georaster_priv.h
index ac69057c2e..12c0e161af 100644
--- a/frmts/georaster/georaster_priv.h
+++ b/frmts/georaster/georaster_priv.h
@@ -34,7 +34,7 @@
 
 #ifdef JPEG_SUPPORTED
 CPL_C_START
-#include <jpeglib.h>
+#include <jpeg/jpeglib.h>
 CPL_C_END
 #endif
 
diff --git a/frmts/grib/CMakeLists.txt b/frmts/grib/CMakeLists.txt
index b047f95ccf..0488b289eb 100644
--- a/frmts/grib/CMakeLists.txt
+++ b/frmts/grib/CMakeLists.txt
@@ -161,12 +161,12 @@ endif ()
 
 if (GDAL_USE_PNG AND NOT GDAL_USE_PNG_INTERNAL)
   target_compile_definitions(gdal_GRIB PRIVATE -DUSE_PNG)
-  gdal_target_link_libraries(gdal_GRIB PRIVATE PNG::PNG)
+  gdal_target_link_libraries(gdal_GRIB PRIVATE png)
   target_sources(gdal_GRIB PRIVATE degrib/g2clib/pngunpack.c degrib/g2clib/dec_png.c)
 endif ()
 
 if (GDAL_USE_ZLIB AND NOT GDAL_USE_ZLIB_INTERNAL)
-  gdal_target_link_libraries(gdal_GRIB PRIVATE ZLIB::ZLIB)
+  gdal_target_link_libraries(gdal_GRIB PRIVATE zlib)
 endif ()
 
 if (GDAL_USE_LIBAEC)
diff --git a/frmts/grib/degrib/g2clib/dec_png.c b/frmts/grib/degrib/g2clib/dec_png.c
index 6db5695ad7..2942b76fac 100644
--- a/frmts/grib/degrib/g2clib/dec_png.c
+++ b/frmts/grib/degrib/g2clib/dec_png.c
@@ -6,7 +6,7 @@ int dec_png(unsigned char *pngbuf,g2int len,g2int *width,g2int *height,unsigned
 #include <stdlib.h>
 #include <string.h>
 #include <limits.h>
-#include <png.h>
+#include <png/png.h>
 
 
 struct png_stream {
diff --git a/frmts/grib/degrib/g2clib/enc_png.c b/frmts/grib/degrib/g2clib/enc_png.c
index 2e49243d21..2e151c54c4 100644
--- a/frmts/grib/degrib/g2clib/enc_png.c
+++ b/frmts/grib/degrib/g2clib/enc_png.c
@@ -6,7 +6,7 @@ int enc_png(char *data,g2int width,g2int height,g2int nbits,char *pngbuf){return
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <png.h>
+#include <png/png.h>
 
 
 struct png_stream {
diff --git a/frmts/gtiff/CMakeLists.txt b/frmts/gtiff/CMakeLists.txt
index bb95feeadd..9074fa8a81 100644
--- a/frmts/gtiff/CMakeLists.txt
+++ b/frmts/gtiff/CMakeLists.txt
@@ -82,18 +82,18 @@ endif ()
 # /usr/local/opt/jpeg-turbo gets included first, before /usr/local/opt
 # triggered by libtiff, that contains libjpeg 9e
 if (NOT GDAL_USE_JPEG_INTERNAL AND GDAL_USE_JPEG)
-  gdal_target_link_libraries(gdal_GTIFF PRIVATE JPEG::JPEG)
+  gdal_target_link_libraries(gdal_GTIFF PRIVATE jpeg-turbo::turbojpeg)
 endif ()
 
 gdal_target_link_libraries(gdal_GTIFF PRIVATE PROJ::proj)
 
 if (NOT GDAL_USE_TIFF_INTERNAL)
   target_compile_definitions(gdal_GTIFF PRIVATE -DPIXARLOG_SUPPORT)
-  gdal_target_link_libraries(gdal_GTIFF PRIVATE TIFF::TIFF)
+  gdal_target_link_libraries(gdal_GTIFF PRIVATE TIFF::tiff)
 endif ()
 
 if (NOT GDAL_USE_GEOTIFF_INTERNAL)
-  gdal_target_link_libraries(gdal_GTIFF PRIVATE ${GeoTIFF_TARGET})
+  gdal_target_link_libraries(gdal_GTIFF PRIVATE geotiff)
 endif ()
 
 if (GDAL_USE_JXL)
@@ -160,7 +160,7 @@ if(GDAL_USE_JPEG OR GDAL_USE_JPEG_INTERNAL)
       if (GDAL_USE_ZLIB_INTERNAL)
         target_sources(generate_quant_table_md5sum PRIVATE $<TARGET_OBJECTS:libz>)
       else ()
-        target_link_libraries(generate_quant_table_md5sum PRIVATE ZLIB::ZLIB)
+        target_link_libraries(generate_quant_table_md5sum PRIVATE zlib)
       endif ()
       if (GDAL_USE_DEFLATE)
         target_link_libraries(generate_quant_table_md5sum PRIVATE Deflate::Deflate)
@@ -168,7 +168,7 @@ if(GDAL_USE_JPEG OR GDAL_USE_JPEG_INTERNAL)
       if (GDAL_USE_JPEG_INTERNAL)
         target_sources(generate_quant_table_md5sum PRIVATE $<TARGET_OBJECTS:libjpeg>)
       else ()
-        target_link_libraries(generate_quant_table_md5sum PRIVATE JPEG::JPEG)
+        target_link_libraries(generate_quant_table_md5sum PRIVATE jpeg-turbo::turbojpeg)
       endif ()
       if (GDAL_USE_JPEG12_INTERNAL)
         target_sources(generate_quant_table_md5sum PRIVATE $<TARGET_OBJECTS:libjpeg12>)
@@ -186,6 +186,6 @@ if(GDAL_USE_JPEG OR GDAL_USE_JPEG_INTERNAL)
         target_sources(generate_quant_table_md5sum PRIVATE $<TARGET_OBJECTS:lerc>)
       endif ()
     else ()
-      target_link_libraries(generate_quant_table_md5sum PRIVATE TIFF::TIFF)
+      target_link_libraries(generate_quant_table_md5sum PRIVATE TIFF::tiff)
     endif ()
 endif()
diff --git a/frmts/gtiff/cogdriver.cpp b/frmts/gtiff/cogdriver.cpp
index de66b1c609..f634d39593 100644
--- a/frmts/gtiff/cogdriver.cpp
+++ b/frmts/gtiff/cogdriver.cpp
@@ -18,7 +18,7 @@
 #include "gdal_utils.h"
 #include "gdalwarper.h"
 #include "cogdriver.h"
-#include "geotiff.h"
+#include <geotiff/geotiff.h>
 
 #include "tilematrixset.hpp"
 
diff --git a/frmts/gtiff/geotiff.cpp b/frmts/gtiff/geotiff.cpp
index 4e6caf2fb3..f78078ecdf 100644
--- a/frmts/gtiff/geotiff.cpp
+++ b/frmts/gtiff/geotiff.cpp
@@ -22,9 +22,9 @@
 #include "gdal.h"
 #include "gdal_mdreader.h"  // RPC_xxx
 #include "gtiffdataset.h"
-#include "tiffio.h"
+#include <tiff/tiffio.h>
 #include "tif_jxl.h"
-#include "xtiffio.h"
+#include <geotiff/xtiffio.h>
 #include <cctype>
 #include <cmath>
 
diff --git a/frmts/gtiff/gt_citation.cpp b/frmts/gtiff/gt_citation.cpp
index 77536ecd78..62da2ce7dc 100644
--- a/frmts/gtiff/gt_citation.cpp
+++ b/frmts/gtiff/gt_citation.cpp
@@ -24,9 +24,9 @@
 
 #include "cpl_conv.h"
 #include "cpl_string.h"
-#include "geokeys.h"
-#include "geotiff.h"
-#include "geovalues.h"
+#include <geotiff/geokeys.h>
+#include <geotiff/geotiff.h>
+#include <geotiff/geovalues.h>
 #include "gt_wkt_srs_priv.h"
 #include "ogr_core.h"
 
diff --git a/frmts/gtiff/gt_citation.h b/frmts/gtiff/gt_citation.h
index 9b55105f69..396d9e9115 100644
--- a/frmts/gtiff/gt_citation.h
+++ b/frmts/gtiff/gt_citation.h
@@ -16,7 +16,7 @@
 #define GT_CITATION_H_INCLUDED
 
 #include "cpl_port.h"
-#include "geo_normalize.h"
+#include <geotiff/geo_normalize.h>
 #include "ogr_spatialref.h"
 
 #include <string>
diff --git a/frmts/gtiff/gt_jpeg_copy.h b/frmts/gtiff/gt_jpeg_copy.h
index 67fae04881..7d4496f1e6 100644
--- a/frmts/gtiff/gt_jpeg_copy.h
+++ b/frmts/gtiff/gt_jpeg_copy.h
@@ -31,7 +31,7 @@ CPLErr GTIFF_DirectCopyFromJPEG(GDALDataset *poDS, GDALDataset *poSrcDS,
 
 #ifdef HAVE_LIBJPEG
 
-#include "tiffio.h"
+#include <tiff/tiffio.h>
 
 int GTIFF_CanCopyFromJPEG(GDALDataset *poSrcDS, char **&papszCreateOptions);
 
diff --git a/frmts/gtiff/gt_overview.cpp b/frmts/gtiff/gt_overview.cpp
index 68e8afa48f..5f268c5f14 100644
--- a/frmts/gtiff/gt_overview.cpp
+++ b/frmts/gtiff/gt_overview.cpp
@@ -31,11 +31,11 @@
 #include "gdal_priv.h"
 #include "gtiff.h"
 #include "gtiffdataset.h"
-#include "tiff.h"
-#include "tiffvers.h"
+#include <tiff/tiff.h>
+#include <tiff/tiffvers.h>
 #include "tifvsi.h"
 #include "tif_jxl.h"
-#include "xtiffio.h"
+#include <geotiff/xtiffio.h>
 
 // TODO(schwehr): Explain why 128 and not 127.
 constexpr int knMaxOverviews = 128;
diff --git a/frmts/gtiff/gt_overview.h b/frmts/gtiff/gt_overview.h
index 9216aa22e4..d48e22c01f 100644
--- a/frmts/gtiff/gt_overview.h
+++ b/frmts/gtiff/gt_overview.h
@@ -18,7 +18,7 @@
 #include <cstdint>
 
 #include "gdal_priv.h"
-#include "tiffio.h"
+#include <tiff/tiffio.h>
 
 #include <utility>
 
diff --git a/frmts/gtiff/gt_wkt_srs.cpp b/frmts/gtiff/gt_wkt_srs.cpp
index 22eabfcd38..11dffbfe3e 100644
--- a/frmts/gtiff/gt_wkt_srs.cpp
+++ b/frmts/gtiff/gt_wkt_srs.cpp
@@ -33,18 +33,18 @@
 #include "gt_wkt_srs_priv.h"
 #include "gtiff.h"
 #include "gdal.h"
-#include "geokeys.h"
-#include "geovalues.h"
+#include <geotiff/geokeys.h>
+#include <geotiff/geovalues.h>
 #include "ogr_core.h"
 #include "ogr_spatialref.h"
 #include "ogr_srs_api.h"
 #include "ogr_proj_p.h"
-#include "tiff.h"
-#include "tiffio.h"
+#include <tiff/tiff.h>
+#include <tiff/tiffio.h>
 #include "tifvsi.h"
-#include "xtiffio.h"
+#include <geotiff/xtiffio.h>
 
-#include "proj.h"
+#include <proj/proj.h>
 
 static const geokey_t ProjLinearUnitsInterpCorrectGeoKey =
     static_cast<geokey_t>(3059);
diff --git a/frmts/gtiff/gt_wkt_srs.h b/frmts/gtiff/gt_wkt_srs.h
index a1015b9b95..ef8014c802 100644
--- a/frmts/gtiff/gt_wkt_srs.h
+++ b/frmts/gtiff/gt_wkt_srs.h
@@ -17,8 +17,8 @@
 #include "cpl_port.h"
 #include "ogr_srs_api.h"
 
-#include "geo_normalize.h"
-#include "geotiff.h"
+#include <geotiff/geo_normalize.h>
+#include <geotiff/geotiff.h>
 
 CPL_C_START
 char CPL_DLL *GTIFGetOGISDefn(GTIF *, GTIFDefn *);
diff --git a/frmts/gtiff/gt_wkt_srs_priv.h b/frmts/gtiff/gt_wkt_srs_priv.h
index 38279d5482..f1e3dd7ee0 100644
--- a/frmts/gtiff/gt_wkt_srs_priv.h
+++ b/frmts/gtiff/gt_wkt_srs_priv.h
@@ -13,7 +13,7 @@
 #ifndef GT_WKT_SRS_PRIV_H_INCLUDED
 #define GT_WKT_SRS_PRIV_H_INCLUDED
 
-#include "geotiff.h"
+#include <geotiff/geotiff.h>
 
 #if LIBGEOTIFF_VERSION >= 1600
 
diff --git a/frmts/gtiff/gtiff.h b/frmts/gtiff/gtiff.h
index cf75c04682..cc1780b32d 100644
--- a/frmts/gtiff/gtiff.h
+++ b/frmts/gtiff/gtiff.h
@@ -19,8 +19,8 @@
 #include <cstdint>
 
 #include "gdal.h"
-#include "tiffio.h"
-#include "tiffvers.h"
+#include <tiff/tiffio.h>
+#include <tiff/tiffvers.h>
 
 CPL_C_START
 void CPL_DLL GTiffOneTimeInit();
diff --git a/frmts/gtiff/gtiffdataset.cpp b/frmts/gtiff/gtiffdataset.cpp
index 46be4d54c0..eec9545c97 100644
--- a/frmts/gtiff/gtiffdataset.cpp
+++ b/frmts/gtiff/gtiffdataset.cpp
@@ -32,7 +32,7 @@
 #include "ogr_proj_p.h"  // OSRGetProjTLSContext()
 #include "tif_jxl.h"
 #include "tifvsi.h"
-#include "xtiffio.h"
+#include <geotiff/xtiffio.h>
 
 static const GTIFFTag asTIFFTags[] = {
     {"TIFFTAG_DOCUMENTNAME", TIFFTAG_DOCUMENTNAME, GTIFFTAGTYPE_STRING},
diff --git a/frmts/gtiff/gtiffdataset.h b/frmts/gtiff/gtiffdataset.h
index e2babec772..cf059f7117 100644
--- a/frmts/gtiff/gtiffdataset.h
+++ b/frmts/gtiff/gtiffdataset.h
@@ -24,7 +24,7 @@
 #include "fetchbufferdirectio.h"
 #include "gtiff.h"
 #include "gt_wkt_srs.h"  // GTIFFKeysFlavorEnum
-#include "tiffio.h"      // TIFF*
+#include <tiff/tiffio.h>      // TIFF*
 
 class GTiffJPEGOverviewDS;
 
diff --git a/frmts/gtiff/gtiffdataset_read.cpp b/frmts/gtiff/gtiffdataset_read.cpp
index 1f6c3f0ff0..980f9d37e0 100644
--- a/frmts/gtiff/gtiffdataset_read.cpp
+++ b/frmts/gtiff/gtiffdataset_read.cpp
@@ -37,11 +37,11 @@
 #include "cpl_worker_thread_pool.h"
 #include "fetchbufferdirectio.h"
 #include "gdal_mdreader.h"    // MD_DOMAIN_RPC
-#include "geovalues.h"        // RasterPixelIsPoint
+#include <geotiff/geovalues.h>        // RasterPixelIsPoint
 #include "gt_wkt_srs_priv.h"  // GDALGTIFKeyGetSHORT()
 #include "tif_jxl.h"
 #include "tifvsi.h"
-#include "xtiffio.h"
+#include <geotiff/xtiffio.h>
 
 #include "tiff_common.h"
 
diff --git a/frmts/gtiff/gtiffdataset_write.cpp b/frmts/gtiff/gtiffdataset_write.cpp
index 8ef643f274..10a85e8e50 100644
--- a/frmts/gtiff/gtiffdataset_write.cpp
+++ b/frmts/gtiff/gtiffdataset_write.cpp
@@ -39,14 +39,14 @@
 #include "gdal_mdreader.h"          // GDALWriteRPCTXTFile()
 #include "gdal_priv_templates.hpp"  // GDALIsValueInRange<>
 #include "gdal_thread_pool.h"       // GDALGetGlobalThreadPool()
-#include "geovalues.h"              // RasterPixelIsPoint
+#include <geotiff/geovalues.h>              // RasterPixelIsPoint
 #include "gt_jpeg_copy.h"
 #include "gt_overview.h"  // GTIFFBuildOverviewMetadata()
 #include "quant_table_md5sum.h"
 #include "quant_table_md5sum_jpeg9e.h"
 #include "tif_jxl.h"
 #include "tifvsi.h"
-#include "xtiffio.h"
+#include <geotiff/xtiffio.h>
 
 #if LIFFLIB_VERSION > 20230908 || defined(INTERNAL_LIBTIFF)
 /* libtiff < 4.6.1 doesn't generate a LERC mask for multi-band contig configuration */
diff --git a/frmts/gtiff/gtiffoddbitsband.cpp b/frmts/gtiff/gtiffoddbitsband.cpp
index b718a11a1e..f142643eb6 100644
--- a/frmts/gtiff/gtiffoddbitsband.cpp
+++ b/frmts/gtiff/gtiffoddbitsband.cpp
@@ -15,7 +15,7 @@
 
 #include "cpl_float.h"  // CPLFloatToHalf()
 #include "gtiffdataset.h"
-#include "tiffio.h"
+#include <tiff/tiffio.h>
 
 /************************************************************************/
 /*                           GTiffOddBitsBand()                         */
diff --git a/frmts/gtiff/gtiffrgbaband.cpp b/frmts/gtiff/gtiffrgbaband.cpp
index fdaed879a2..9e06620f81 100644
--- a/frmts/gtiff/gtiffrgbaband.cpp
+++ b/frmts/gtiff/gtiffrgbaband.cpp
@@ -14,7 +14,7 @@
 #include "gtiffrgbaband.h"
 #include "gtiffdataset.h"
 
-#include "tiffio.h"
+#include <tiff/tiffio.h>
 
 /************************************************************************/
 /*                           GTiffRGBABand()                            */
diff --git a/frmts/gtiff/tif_jxl.h b/frmts/gtiff/tif_jxl.h
index 5edfe9da9e..b77b0861c9 100644
--- a/frmts/gtiff/tif_jxl.h
+++ b/frmts/gtiff/tif_jxl.h
@@ -25,7 +25,7 @@
 #ifndef TIFF_JXL_H_DEFINED
 #define TIFF_JXL_H_DEFINED
 
-#include "tiffio.h"
+#include <tiff/tiffio.h>
 
 #ifndef COMPRESSION_JXL
 #define COMPRESSION_JXL                                                        \
diff --git a/frmts/gtiff/tifvsi.cpp b/frmts/gtiff/tifvsi.cpp
index a889f3cad5..dd6672cf52 100644
--- a/frmts/gtiff/tifvsi.cpp
+++ b/frmts/gtiff/tifvsi.cpp
@@ -36,7 +36,7 @@
 #include "gdal_libgeotiff_symbol_rename.h"
 #endif
 
-#include "xtiffio.h"
+#include <geotiff/xtiffio.h>
 
 #include <limits>
 
diff --git a/frmts/gtiff/tifvsi.h b/frmts/gtiff/tifvsi.h
index ed7dbaa26b..c49320782d 100644
--- a/frmts/gtiff/tifvsi.h
+++ b/frmts/gtiff/tifvsi.h
@@ -18,7 +18,7 @@
 
 #include "cpl_port.h"
 #include "cpl_vsi.h"
-#include "tiffio.h"
+#include <tiff/tiffio.h>
 
 TIFF CPL_DLL *VSI_TIFFOpen(const char *name, const char *mode, VSILFILE *fp);
 TIFF *VSI_TIFFOpenChild(
diff --git a/frmts/hfa/hfaopen.cpp b/frmts/hfa/hfaopen.cpp
index 7229a33258..ecb4b48a2b 100644
--- a/frmts/hfa/hfaopen.cpp
+++ b/frmts/hfa/hfaopen.cpp
@@ -45,7 +45,7 @@
 #include "gdal_priv.h"
 #include "hfa.h"
 #include "ogr_proj_p.h"
-#include "proj.h"
+#include <proj/proj.h>
 
 constexpr double R2D = 180.0 / M_PI;
 
diff --git a/frmts/idrisi/IdrisiDataset.cpp b/frmts/idrisi/IdrisiDataset.cpp
index 0618a8bd59..9b6f4ff2e1 100644
--- a/frmts/idrisi/IdrisiDataset.cpp
+++ b/frmts/idrisi/IdrisiDataset.cpp
@@ -26,7 +26,7 @@
 #include "ogr_spatialref.h"
 #include "idrisi.h"
 
-#include "proj_experimental.h"
+#include <proj/proj_experimental.h>
 #include "ogr_proj_p.h"
 
 #include <cmath>
diff --git a/frmts/jpeg/CMakeLists.txt b/frmts/jpeg/CMakeLists.txt
index 06a0137fef..55cce50793 100644
--- a/frmts/jpeg/CMakeLists.txt
+++ b/frmts/jpeg/CMakeLists.txt
@@ -8,8 +8,8 @@ add_gdal_driver(
 )
 
 if(TARGET gdal_JPEG_core)
-    target_include_directories(gdal_JPEG_core PRIVATE $<TARGET_PROPERTY:JPEG::JPEG,INTERFACE_INCLUDE_DIRECTORIES>)
-    target_compile_definitions(gdal_JPEG_core PRIVATE $<TARGET_PROPERTY:JPEG::JPEG,INTERFACE_COMPILE_DEFINITIONS>)
+    target_include_directories(gdal_JPEG_core PRIVATE $<TARGET_PROPERTY:jpeg-turbo::turbojpeg,INTERFACE_INCLUDE_DIRECTORIES>)
+    target_compile_definitions(gdal_JPEG_core PRIVATE $<TARGET_PROPERTY:jpeg-turbo::turbojpeg,INTERFACE_COMPILE_DEFINITIONS>)
     if (HAVE_JPEGTURBO_DUAL_MODE_8_12)
         target_compile_definitions(gdal_JPEG_core PRIVATE JPEG_DUAL_MODE_8_12 HAVE_JPEGTURBO_DUAL_MODE_8_12)
     endif()
@@ -41,7 +41,7 @@ endif()
 # /usr/local/opt/jpeg-turbo gets included first, before /usr/local/opt
 # that contains libjpeg 9e
 if (NOT GDAL_USE_JPEG_INTERNAL)
-  gdal_target_link_libraries(gdal_JPEG PRIVATE JPEG::JPEG)
+  gdal_target_link_libraries(gdal_JPEG PRIVATE jpeg-turbo::turbojpeg)
   if (HAVE_JPEGTURBO_DUAL_MODE_8_12 AND NOT GDAL_USE_JPEG12_INTERNAL)
     target_sources(gdal_JPEG PRIVATE jpgdataset_12.cpp vsidataio_12.cpp)
     target_compile_definitions(gdal_JPEG PRIVATE JPEG_DUAL_MODE_8_12 HAVE_JPEGTURBO_DUAL_MODE_8_12)
@@ -49,7 +49,7 @@ if (NOT GDAL_USE_JPEG_INTERNAL)
 endif ()
 
 if (NOT GDAL_USE_ZLIB_INTERNAL)
-  gdal_target_link_libraries(gdal_JPEG PRIVATE ZLIB::ZLIB)
+  gdal_target_link_libraries(gdal_JPEG PRIVATE zlib)
 endif ()
 
 # Breaks ODR
diff --git a/frmts/jpeg/jpegdrivercore.cpp b/frmts/jpeg/jpegdrivercore.cpp
index b2f325b316..b54ff610f6 100644
--- a/frmts/jpeg/jpegdrivercore.cpp
+++ b/frmts/jpeg/jpegdrivercore.cpp
@@ -18,7 +18,7 @@
 
 // So that D_LOSSLESS_SUPPORTED is visible if defined in jmorecfg of libjpeg-turbo >= 2.2
 #define JPEG_INTERNAL_OPTIONS
-#include "jpeglib.h"
+#include <jpeg/jpeglib.h>
 
 /************************************************************************/
 /*                    JPEGDatasetIsJPEGLS()                             */
diff --git a/frmts/jpeg/jpgdataset.cpp b/frmts/jpeg/jpgdataset.cpp
index 396ebabbc1..0251890606 100644
--- a/frmts/jpeg/jpgdataset.cpp
+++ b/frmts/jpeg/jpgdataset.cpp
@@ -54,7 +54,7 @@ CPL_C_START
 #ifdef LIBJPEG_12_PATH
 #include LIBJPEG_12_PATH
 #else
-#include "jpeglib.h"
+#include <jpeg/jpeglib.h>
 #endif
 CPL_C_END
 #include "memdataset.h"
diff --git a/frmts/jpeg/jpgdataset.h b/frmts/jpeg/jpgdataset.h
index df026768c3..9447df78a1 100644
--- a/frmts/jpeg/jpgdataset.h
+++ b/frmts/jpeg/jpgdataset.h
@@ -51,7 +51,7 @@ CPL_C_START
 #ifdef LIBJPEG_12_PATH
 #include LIBJPEG_12_PATH
 #else
-#include "jpeglib.h"
+#include <jpeg/jpeglib.h>
 #endif
 CPL_C_END
 #include "memdataset.h"
diff --git a/frmts/jpeg/vsidataio.cpp b/frmts/jpeg/vsidataio.cpp
index c63a3fa527..e67617f994 100644
--- a/frmts/jpeg/vsidataio.cpp
+++ b/frmts/jpeg/vsidataio.cpp
@@ -17,7 +17,7 @@
 #include <cstddef>
 
 CPL_C_START
-#include "jerror.h"
+#include <jpeg/jerror.h>
 CPL_C_END
 
 // Expanded data source object for stdio input.
diff --git a/frmts/jpeg/vsidataio.h b/frmts/jpeg/vsidataio.h
index 1e4b8132b4..574f5c51c8 100644
--- a/frmts/jpeg/vsidataio.h
+++ b/frmts/jpeg/vsidataio.h
@@ -20,7 +20,7 @@ CPL_C_START
 #ifdef LIBJPEG_12_PATH
 #include LIBJPEG_12_PATH
 #else
-#include "jpeglib.h"
+#include <jpeg/jpeglib.h>
 #endif
 CPL_C_END
 
diff --git a/frmts/libertiff/CMakeLists.txt b/frmts/libertiff/CMakeLists.txt
index 960839d3c7..12e6cc7f3d 100644
--- a/frmts/libertiff/CMakeLists.txt
+++ b/frmts/libertiff/CMakeLists.txt
@@ -25,7 +25,7 @@ endif ()
 # Now external libraries
 
 if (NOT GDAL_USE_ZLIB_INTERNAL)
-  gdal_target_link_libraries(gdal_LIBERTIFF PRIVATE ZLIB::ZLIB)
+  gdal_target_link_libraries(gdal_LIBERTIFF PRIVATE zlib)
 endif ()
 
 if (GDAL_USE_DEFLATE)
diff --git a/frmts/mbtiles/CMakeLists.txt b/frmts/mbtiles/CMakeLists.txt
index f1850f94c2..afd5b22309 100644
--- a/frmts/mbtiles/CMakeLists.txt
+++ b/frmts/mbtiles/CMakeLists.txt
@@ -17,13 +17,13 @@ if (GDAL_USE_GEOS)
 endif ()
 
 target_compile_definitions(gdal_MBTiles PRIVATE -DHAVE_SQLITE)
-gdal_target_link_libraries(gdal_MBTiles PRIVATE SQLite::SQLite3)
+gdal_target_link_libraries(gdal_MBTiles PRIVATE SQLite3)
 
 if (NOT GDAL_USE_ZLIB_INTERNAL)
-  gdal_target_link_libraries(gdal_MBTiles PRIVATE ZLIB::ZLIB)
+  gdal_target_link_libraries(gdal_MBTiles PRIVATE zlib)
 endif ()
 if (NOT GDAL_USE_JSONC_INTERNAL)
-  gdal_target_link_libraries(gdal_MBTiles PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(gdal_MBTiles PRIVATE json-c::json-c)
 endif ()
 target_include_directories(
   gdal_MBTiles PRIVATE ${GDAL_VECTOR_FORMAT_SOURCE_DIR}/gpkg
diff --git a/frmts/mbtiles/mbtilesdataset.cpp b/frmts/mbtiles/mbtilesdataset.cpp
index 80f64353f4..cbd9c838b1 100644
--- a/frmts/mbtiles/mbtilesdataset.cpp
+++ b/frmts/mbtiles/mbtilesdataset.cpp
@@ -27,7 +27,7 @@
 #include "ogrsqlitevfs.h"
 #include "ogrsqlitebase.h"
 
-#include "zlib.h"
+#include <zlib/zlib.h>
 #include "ogrlibjsonutils.h"
 
 #include <math.h>
diff --git a/frmts/mrf/CMakeLists.txt b/frmts/mrf/CMakeLists.txt
index 596381e706..1c023cb282 100644
--- a/frmts/mrf/CMakeLists.txt
+++ b/frmts/mrf/CMakeLists.txt
@@ -83,15 +83,15 @@ endif ()
 # /usr/local/opt/jpeg-turbo gets included first, before /usr/local/opt
 # triggered by libtiff, that contains libjpeg 9e
 if (GDAL_USE_JPEG AND NOT GDAL_USE_JPEG_INTERNAL)
-  gdal_target_link_libraries(gdal_MRF PRIVATE JPEG::JPEG)
+  gdal_target_link_libraries(gdal_MRF PRIVATE jpeg-turbo::turbojpeg)
 endif ()
 
 if (GDAL_USE_PNG AND NOT GDAL_USE_PNG_INTERNAL)
-  gdal_target_link_libraries(gdal_MRF PRIVATE PNG::PNG)
+  gdal_target_link_libraries(gdal_MRF PRIVATE png)
 endif ()
 
 if (NOT GDAL_USE_ZLIB_INTERNAL)
-  gdal_target_link_libraries(gdal_MRF PRIVATE ZLIB::ZLIB)
+  gdal_target_link_libraries(gdal_MRF PRIVATE zlib)
 endif ()
 
 if (NOT GDAL_USE_LERC_INTERNAL AND GDAL_USE_LERC)
diff --git a/frmts/mrf/JPEG_band.cpp b/frmts/mrf/JPEG_band.cpp
index b79f91b7fd..222eacbb48 100644
--- a/frmts/mrf/JPEG_band.cpp
+++ b/frmts/mrf/JPEG_band.cpp
@@ -72,8 +72,8 @@
 #include <vector>
 
 CPL_C_START
-#include "jpeglib.h"
-#include "jerror.h"
+#include <jpeg/jpeglib.h>
+#include <jpeg/jerror.h>
 CPL_C_END
 
 #define PACKER
diff --git a/frmts/mrf/JPNG_band.cpp b/frmts/mrf/JPNG_band.cpp
index 5d1fcad0a0..5f100ba5c4 100644
--- a/frmts/mrf/JPNG_band.cpp
+++ b/frmts/mrf/JPNG_band.cpp
@@ -23,8 +23,8 @@
 #include "marfa.h"
 
 CPL_C_START
-#include <jpeglib.h>
-#include <png.h>
+#include <jpeg/jpeglib.h>
+#include <png/png.h>
 CPL_C_END
 
 NAMESPACE_MRF_START
diff --git a/frmts/mrf/PNG_band.cpp b/frmts/mrf/PNG_band.cpp
index da60e54bb0..caac1ae92a 100644
--- a/frmts/mrf/PNG_band.cpp
+++ b/frmts/mrf/PNG_band.cpp
@@ -58,7 +58,7 @@
 #include <algorithm>
 
 CPL_C_START
-#include <png.h>
+#include <png/png.h>
 CPL_C_END
 
 NAMESPACE_MRF_START
diff --git a/frmts/mrsid/CMakeLists.txt b/frmts/mrsid/CMakeLists.txt
index fa112278d7..46ab6459b6 100644
--- a/frmts/mrsid/CMakeLists.txt
+++ b/frmts/mrsid/CMakeLists.txt
@@ -43,5 +43,5 @@ endif ()
 if (GDAL_USE_GEOTIFF_INTERNAL)
   gdal_add_vendored_lib(gdal_MrSID geotiff)
 else ()
-  gdal_target_link_libraries(gdal_MrSID PRIVATE ${GeoTIFF_TARGET})
+  gdal_target_link_libraries(gdal_MrSID PRIVATE geotiff)
 endif ()
diff --git a/frmts/nitf/CMakeLists.txt b/frmts/nitf/CMakeLists.txt
index c287ea015e..9e1fc7089e 100644
--- a/frmts/nitf/CMakeLists.txt
+++ b/frmts/nitf/CMakeLists.txt
@@ -77,7 +77,7 @@ if (GDAL_ENABLE_DRIVER_JPEG)
   # /usr/local/opt/jpeg-turbo gets included first, before /usr/local/opt
   # triggered by libtiff, that contains libjpeg 9e
   if (NOT GDAL_USE_JPEG_INTERNAL)
-    gdal_target_link_libraries(gdal_NITF PRIVATE JPEG::JPEG)
+    gdal_target_link_libraries(gdal_NITF PRIVATE jpeg-turbo::turbojpeg)
   endif ()
   if (GDAL_USE_JPEG12_INTERNAL)
     target_compile_definitions(gdal_NITF PRIVATE -DJPEG_DUAL_MODE_8_12)
@@ -88,7 +88,7 @@ if (GDAL_ENABLE_DRIVER_JPEG)
 endif()
 
 if (GDAL_USE_TIFF AND NOT GDAL_USE_TIFF_INTERNAL)
-  gdal_target_link_libraries(gdal_NITF PRIVATE TIFF::TIFF)
+  gdal_target_link_libraries(gdal_NITF PRIVATE TIFF::tiff)
 endif ()
 
 add_executable(nitfdump EXCLUDE_FROM_ALL nitfdump.c nitffile.c nitfimage.c rpftocfile.cpp nitfaridpcm.cpp mgrs.c nitfdes.c)
@@ -101,7 +101,7 @@ if (GDAL_USE_TIFF_INTERNAL)
   if (GDAL_USE_ZLIB_INTERNAL)
     target_sources(nitfdump PRIVATE $<TARGET_OBJECTS:libz>)
   else ()
-    target_link_libraries(nitfdump PRIVATE ZLIB::ZLIB)
+    target_link_libraries(nitfdump PRIVATE zlib)
   endif ()
   if (GDAL_USE_DEFLATE)
     target_link_libraries(nitfdump PRIVATE Deflate::Deflate)
@@ -113,7 +113,7 @@ if (GDAL_USE_TIFF_INTERNAL)
       if (GDAL_USE_JPEG_INTERNAL)
         target_sources(nitfdump PRIVATE $<TARGET_OBJECTS:libjpeg>)
       else ()
-        target_link_libraries(nitfdump PRIVATE JPEG::JPEG)
+        target_link_libraries(nitfdump PRIVATE jpeg-turbo::turbojpeg)
       endif ()
       if (GDAL_USE_JPEG12_INTERNAL)
         target_sources(nitfdump PRIVATE $<TARGET_OBJECTS:libjpeg12>)
@@ -132,7 +132,7 @@ if (GDAL_USE_TIFF_INTERNAL)
     target_sources(nitfdump PRIVATE $<TARGET_OBJECTS:lerc>)
   endif ()
 elseif(GDAL_USE_TIFF AND GDAL_ENABLE_DRIVER_GTIFF)
-  target_link_libraries(nitfdump PRIVATE TIFF::TIFF)
+  target_link_libraries(nitfdump PRIVATE TIFF::tiff)
 endif()
 target_include_directories(nitfdump PRIVATE $<TARGET_PROPERTY:gdal_NITF,SOURCE_DIR>)
 target_link_libraries(nitfdump PRIVATE $<TARGET_NAME:${GDAL_LIB_TARGET_NAME}>)
diff --git a/frmts/nitf/nitfbilevel.cpp b/frmts/nitf/nitfbilevel.cpp
index 1734fcdfa7..2a8639785b 100644
--- a/frmts/nitf/nitfbilevel.cpp
+++ b/frmts/nitf/nitfbilevel.cpp
@@ -20,9 +20,9 @@
 #include "cpl_string.h"
 #include "cpl_vsi.h"
 #include "gdal.h"
-// #include "tiff.h"
+// #include <tiff/tiff.h>
 CPL_C_START
-#include "tiffio.h"
+#include <tiff/tiffio.h>
 CPL_C_END
 #include "tifvsi.h"
 
diff --git a/frmts/nitf/nitfwritejpeg.cpp b/frmts/nitf/nitfwritejpeg.cpp
index 2a70c522d4..e10d8431ae 100644
--- a/frmts/nitf/nitfwritejpeg.cpp
+++ b/frmts/nitf/nitfwritejpeg.cpp
@@ -23,7 +23,7 @@ CPL_C_START
 #ifdef LIBJPEG_12_PATH
 #include LIBJPEG_12_PATH
 #else
-#include "jpeglib.h"
+#include <jpeg/jpeglib.h>
 #endif
 CPL_C_END
 
diff --git a/frmts/pcidsk/CMakeLists.txt b/frmts/pcidsk/CMakeLists.txt
index e2be93ad98..c723658813 100644
--- a/frmts/pcidsk/CMakeLists.txt
+++ b/frmts/pcidsk/CMakeLists.txt
@@ -24,5 +24,5 @@ add_subdirectory(sdk)
 target_compile_definitions(gdal_PCIDSK PRIVATE -DPCIDSK_INTERNAL)
 
 if (GDAL_USE_JPEG AND NOT GDAL_USE_JPEG_INTERNAL)
-  gdal_target_link_libraries(gdal_PCIDSK PRIVATE JPEG::JPEG)
+  gdal_target_link_libraries(gdal_PCIDSK PRIVATE jpeg-turbo::turbojpeg)
 endif ()
diff --git a/frmts/pcidsk/sdk/core/libjpeg_io.cpp b/frmts/pcidsk/sdk/core/libjpeg_io.cpp
index dcef15d356..d9f907deaa 100644
--- a/frmts/pcidsk/sdk/core/libjpeg_io.cpp
+++ b/frmts/pcidsk/sdk/core/libjpeg_io.cpp
@@ -23,7 +23,7 @@ using namespace PCIDSK;
 #if defined(HAVE_LIBJPEG)
 
 extern "C" {
-#include "jpeglib.h"
+#include <jpeg/jpeglib.h>
 }
 
 static void _DummyMgrMethod( j_compress_ptr /*pUnused*/ ) {}
diff --git a/frmts/pdf/CMakeLists.txt b/frmts/pdf/CMakeLists.txt
index b125eb851c..39c696c6ed 100644
--- a/frmts/pdf/CMakeLists.txt
+++ b/frmts/pdf/CMakeLists.txt
@@ -98,7 +98,7 @@ if (GDAL_USE_PDFIUM)
     gdal_target_link_libraries(
       gdal_PDF
       PRIVATE
-      JPEG::JPEG
+      jpeg-turbo::turbojpeg
       PNG::PNG
       ${OPENJPEG_LIBRARIES}
       Threads::Threads
diff --git a/frmts/pds/CMakeLists.txt b/frmts/pds/CMakeLists.txt
index 5dced5b9b6..4564f20e4f 100644
--- a/frmts/pds/CMakeLists.txt
+++ b/frmts/pds/CMakeLists.txt
@@ -65,14 +65,14 @@ endif ()
 
 # External libs next
 if (NOT GDAL_USE_JSONC_INTERNAL)
-  gdal_target_link_libraries(gdal_PDS PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(gdal_PDS PRIVATE json-c::json-c)
 endif ()
 if (GDAL_USE_GEOTIFF AND NOT GDAL_USE_GEOTIFF_INTERNAL)
-  gdal_target_link_libraries(gdal_PDS PRIVATE ${GeoTIFF_TARGET})
+  gdal_target_link_libraries(gdal_PDS PRIVATE geotiff)
   target_compile_definitions(gdal_PDS PRIVATE -DHAVE_GEOTIFF)
 endif ()
 if (GDAL_USE_TIFF AND NOT GDAL_USE_TIFF_INTERNAL)
-  gdal_target_link_libraries(gdal_PDS PRIVATE TIFF::TIFF)
+  gdal_target_link_libraries(gdal_PDS PRIVATE TIFF::tiff)
   target_compile_definitions(gdal_PDS PRIVATE -DHAVE_TIFF)
 endif ()
 
diff --git a/frmts/pds/vicardataset.cpp b/frmts/pds/vicardataset.cpp
index 9fb10c7d34..85f17c0f82 100644
--- a/frmts/pds/vicardataset.cpp
+++ b/frmts/pds/vicardataset.cpp
@@ -30,9 +30,9 @@ constexpr double VICAR_NULL3 = -32768.0;
 
 #if defined(HAVE_TIFF) && defined(HAVE_GEOTIFF)
 #include "gtiff.h"
-#include "geotiff.h"
+#include <geotiff/geotiff.h>
 #include "tifvsi.h"
-#include "xtiffio.h"
+#include <geotiff/xtiffio.h>
 #include "gt_wkt_srs_priv.h"
 #endif
 
diff --git a/frmts/plmosaic/CMakeLists.txt b/frmts/plmosaic/CMakeLists.txt
index ff7ca47643..ed215d6183 100644
--- a/frmts/plmosaic/CMakeLists.txt
+++ b/frmts/plmosaic/CMakeLists.txt
@@ -5,5 +5,5 @@ gdal_standard_includes(gdal_PLMOSAIC)
 if (GDAL_USE_JSONC_INTERNAL)
   gdal_add_vendored_lib(gdal_PLMOSAIC libjson)
 else ()
-  gdal_target_link_libraries(gdal_PLMOSAIC PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(gdal_PLMOSAIC PRIVATE json-c::json-c)
 endif ()
diff --git a/frmts/png/CMakeLists.txt b/frmts/png/CMakeLists.txt
index 51a1452877..7603938776 100644
--- a/frmts/png/CMakeLists.txt
+++ b/frmts/png/CMakeLists.txt
@@ -13,13 +13,13 @@ gdal_standard_includes(gdal_PNG)
 if (GDAL_USE_PNG_INTERNAL)
   gdal_add_vendored_lib(gdal_PNG libpng)
 else ()
-  gdal_target_link_libraries(gdal_PNG PRIVATE PNG::PNG)
+  gdal_target_link_libraries(gdal_PNG PRIVATE png)
 endif ()
 
 if (GDAL_USE_ZLIB_INTERNAL)
   gdal_add_vendored_lib(gdal_PNG libz)
 else ()
-  gdal_target_link_libraries(gdal_PNG PRIVATE ZLIB::ZLIB)
+  gdal_target_link_libraries(gdal_PNG PRIVATE zlib)
 endif ()
 
 if (GDAL_ENABLE_ARM_NEON_OPTIMIZATIONS)
diff --git a/frmts/png/pngdataset.cpp b/frmts/png/pngdataset.cpp
index cfb6115058..ad25edbb0b 100644
--- a/frmts/png/pngdataset.cpp
+++ b/frmts/png/pngdataset.cpp
@@ -29,7 +29,7 @@
 #include "cpl_string.h"
 #include "gdal_frmts.h"
 #include "gdal_pam.h"
-#include "png.h"
+#include <png/png.h>
 
 #include <csetjmp>
 
diff --git a/frmts/png/pngdataset.h b/frmts/png/pngdataset.h
index f51cfd4e34..dc1d52c1bf 100644
--- a/frmts/png/pngdataset.h
+++ b/frmts/png/pngdataset.h
@@ -38,7 +38,7 @@
 #define PNG_INTERNAL
 #endif
 
-#include "png.h"
+#include <png/png.h>
 
 #include <csetjmp>
 
diff --git a/frmts/rik/CMakeLists.txt b/frmts/rik/CMakeLists.txt
index 9edace854d..3c3069824d 100644
--- a/frmts/rik/CMakeLists.txt
+++ b/frmts/rik/CMakeLists.txt
@@ -4,5 +4,5 @@ gdal_standard_includes(gdal_RIK)
 if (GDAL_USE_ZLIB_INTERNAL)
   gdal_add_vendored_lib(gdal_RIK libz)
 else ()
-  gdal_target_link_libraries(gdal_RIK PRIVATE ZLIB::ZLIB)
+  gdal_target_link_libraries(gdal_RIK PRIVATE zlib)
 endif ()
diff --git a/frmts/zlib/contrib/infback9/CMakeLists.txt b/frmts/zlib/contrib/infback9/CMakeLists.txt
index fb2e8053c4..70e276389b 100644
--- a/frmts/zlib/contrib/infback9/CMakeLists.txt
+++ b/frmts/zlib/contrib/infback9/CMakeLists.txt
@@ -14,5 +14,5 @@ include(GdalDriverHelper)
 if (GDAL_USE_ZLIB_INTERNAL)
   gdal_add_vendored_lib(infback9 libz)
 else()
-  gdal_target_link_libraries(infback9 PRIVATE ZLIB::ZLIB)
+  gdal_target_link_libraries(infback9 PRIVATE zlib)
 endif ()
diff --git a/frmts/zlib/contrib/infback9/minified_zutil.h b/frmts/zlib/contrib/infback9/minified_zutil.h
index 78aacd5032..33a0924070 100644
--- a/frmts/zlib/contrib/infback9/minified_zutil.h
+++ b/frmts/zlib/contrib/infback9/minified_zutil.h
@@ -18,7 +18,7 @@
 #  define ZLIB_INTERNAL
 #endif
 
-#include "zlib.h"
+#include <zlib/zlib.h>
 
 // Gentoo and derivatives change the OF() macro from upstream zlib's zconf.h
 // to _Z_OF(), so define OF() if it isn't
diff --git a/gcore/CMakeLists.txt b/gcore/CMakeLists.txt
index 3fb967e422..77118e5ac7 100644
--- a/gcore/CMakeLists.txt
+++ b/gcore/CMakeLists.txt
@@ -165,7 +165,7 @@ add_subdirectory(mdreader)
 
 # External libs now
 if (NOT GDAL_USE_JSONC_INTERNAL)
-  gdal_target_link_libraries(gcore PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(gcore PRIVATE json-c::json-c)
 endif ()
 
 if (NOT DEFINED OGR_ENABLE_DRIVER_SQLITE)
diff --git a/gcore/gdal_misc.cpp b/gcore/gdal_misc.cpp
index db22645589..59be7dc603 100644
--- a/gcore/gdal_misc.cpp
+++ b/gcore/gdal_misc.cpp
@@ -48,7 +48,7 @@
 #include "ogr_spatialref.h"
 #include "ogr_geos.h"
 
-#include "proj.h"
+#include <proj/proj.h>
 
 #ifdef HAVE_CURL
 #include "cpl_curl_priv.h"
diff --git a/gcore/gdal_rat.cpp b/gcore/gdal_rat.cpp
index fcc21fb553..fda066aebb 100644
--- a/gcore/gdal_rat.cpp
+++ b/gcore/gdal_rat.cpp
@@ -34,7 +34,7 @@
 #pragma clang diagnostic ignored "-Wdocumentation"
 #pragma clang diagnostic ignored "-Wold-style-cast"
 #endif
-#include "json.h"
+#include <json-c/json.h>
 #ifdef __clang__
 #pragma clang diagnostic pop
 #endif
diff --git a/gdal.cmake b/gdal.cmake
index aa3128d202..c941a20353 100644
--- a/gdal.cmake
+++ b/gdal.cmake
@@ -239,9 +239,9 @@ if (GDAL_ENABLE_MACOSX_FRAMEWORK)
 else ()
   include(GNUInstallDirs)
   set(INSTALL_PLUGIN_DIR
-      "${CMAKE_INSTALL_LIBDIR}/gdalplugins"
+      "${CMAKE_INSTALL_DATAROOTDIR}/gdal/plugins"
       CACHE PATH "Installation sub-directory for plugins")
-  set(GDAL_RESOURCE_PATH ${CMAKE_INSTALL_DATADIR}/gdal)
+  set(GDAL_RESOURCE_PATH "${CMAKE_INSTALL_DATADIR}/gdal/data")
 
   option(GDAL_SET_INSTALL_RELATIVE_RPATH "Whether the rpath of installed binaries should be written as a relative path to the library" OFF)
   if(GDAL_SET_INSTALL_RELATIVE_RPATH)
@@ -318,7 +318,7 @@ endif ()
 option(ENABLE_DEFLATE64 "Enable Deflate64 decompression" ON)
 mark_as_advanced(ENABLE_DEFLATE64)
 if(ENABLE_DEFLATE64)
-    add_subdirectory(frmts/zlib/contrib/infback9)
+    add_subdirectory(frmts/infback9)
 endif()
 
 # Internal zlib and jsonc must be declared before
@@ -550,7 +550,7 @@ install(
   ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
   LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
   RESOURCE DESTINATION ${GDAL_RESOURCE_PATH}
-  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/gdal
   FRAMEWORK DESTINATION "${FRAMEWORK_DESTINATION}")
 
 # Generate targets file for importing directly from GDAL build tree
@@ -566,19 +566,6 @@ if (NOT GDAL_ENABLE_MACOSX_FRAMEWORK)
     NAMESPACE GDAL::
     DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/gdal/
     EXPORT_LINK_INTERFACE_LIBRARIES)
-  if (NOT BUILD_SHARED_LIBS)
-    install(
-      FILES
-        "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/GdalFindModulePath.cmake"
-        "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/DefineFindPackage2.cmake"
-      DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/gdal/")
-    include(GdalFindModulePath)
-    foreach(dir IN LISTS GDAL_VENDORED_FIND_MODULES_CMAKE_VERSIONS ITEMS packages thirdparty)
-      install(
-        DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/${dir}"
-        DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/gdal")
-    endforeach()
-  endif ()
 
   include(CMakePackageConfigHelpers)
   # SameMajorVersion as the C++ ABI stability is not relevant for new linking and there are only a few breaking API changes.
@@ -587,29 +574,16 @@ if (NOT GDAL_ENABLE_MACOSX_FRAMEWORK)
     VERSION ${GDAL_VERSION}
     COMPATIBILITY SameMajorVersion)
   install(FILES ${CMAKE_CURRENT_BINARY_DIR}/GDALConfigVersion.cmake DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/gdal/)
+  if(DEFINED GDAL_IMPORT_DEPENDENCIES AND NOT "${GDAL_IMPORT_DEPENDENCIES}" STREQUAL "")
+      # just to make it look nicer
+      string(REPLACE "\n" ";" GDAL_IMPORT_DEPENDENCIES ${GDAL_IMPORT_DEPENDENCIES})
+      list(TRANSFORM GDAL_IMPORT_DEPENDENCIES PREPEND "\t")
+      string(REPLACE ";" "\n" GDAL_IMPORT_DEPENDENCIES "${GDAL_IMPORT_DEPENDENCIES}")
+  endif()
+  #
   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/template/GDALConfig.cmake.in
                  ${CMAKE_CURRENT_BINARY_DIR}/GDALConfig.cmake @ONLY)
   install(FILES ${CMAKE_CURRENT_BINARY_DIR}/GDALConfig.cmake DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/gdal/)
-
-  # Generate gdal-config utility command and pkg-config module gdal.pc
-  include(GdalGenerateConfig)
-  gdal_generate_config(
-    TARGET
-    "${GDAL_LIB_TARGET_NAME}"
-    GLOBAL_PROPERTY
-    "gdal_private_link_libraries"
-    GDAL_CONFIG
-    "${PROJECT_BINARY_DIR}/apps/gdal-config"
-    PKG_CONFIG
-    "${CMAKE_CURRENT_BINARY_DIR}/gdal.pc")
-  install(
-    PROGRAMS ${PROJECT_BINARY_DIR}/apps/gdal-config
-    DESTINATION ${CMAKE_INSTALL_BINDIR}
-    COMPONENT applications)
-  install(
-    FILES ${CMAKE_CURRENT_BINARY_DIR}/gdal.pc
-    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig
-    COMPONENT libraries)
 endif ()
 
 configure_file(${GDAL_CMAKE_TEMPLATE_PATH}/uninstall.cmake.in ${PROJECT_BINARY_DIR}/cmake_uninstall.cmake @ONLY)
diff --git a/ogr/CMakeLists.txt b/ogr/CMakeLists.txt
index d788f6ab4f..f5e8f22f7a 100644
--- a/ogr/CMakeLists.txt
+++ b/ogr/CMakeLists.txt
@@ -148,7 +148,7 @@ if (NOT GDAL_USE_ZLIB_INTERNAL)
   if (MSVC AND NOT ZLIB_IS_STATIC)
     target_compile_definitions(ogr PRIVATE -DZLIB_DLL)
   endif ()
-  gdal_target_link_libraries(ogr PRIVATE ZLIB::ZLIB)
+  gdal_target_link_libraries(ogr PRIVATE zlib)
 endif ()
 
 if (GDAL_USE_EXPAT)
@@ -163,7 +163,7 @@ if (GDAL_USE_XERCESC)
 endif ()
 
 if (NOT GDAL_USE_JSONC_INTERNAL)
-  gdal_target_link_libraries(ogr PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(ogr PRIVATE json-c::json-c)
 endif ()
 
 include(TargetPublicHeader)
diff --git a/ogr/ogr_fromepsg.cpp b/ogr/ogr_fromepsg.cpp
index 8d632f5439..f0508e5f4d 100644
--- a/ogr/ogr_fromepsg.cpp
+++ b/ogr/ogr_fromepsg.cpp
@@ -38,7 +38,7 @@
 #include "ogr_proj_p.h"
 #include "ogr_spatialref.h"
 
-#include "proj.h"
+#include <proj/proj.h>
 
 extern void OGRsnPrintDouble(char *pszStrBuf, size_t size, double dfValue);
 
diff --git a/ogr/ogr_proj_p.cpp b/ogr/ogr_proj_p.cpp
index 9ee654c097..d1811afcb5 100644
--- a/ogr/ogr_proj_p.cpp
+++ b/ogr/ogr_proj_p.cpp
@@ -17,7 +17,7 @@
 #include "ogr_proj_p.h"
 #include "ogr_srs_api.h"
 
-#include "proj.h"
+#include <proj/proj.h>
 
 #ifndef _WIN32
 #include <sys/types.h>
diff --git a/ogr/ogr_proj_p.h b/ogr/ogr_proj_p.h
index cef6d7ca48..deb07ffabf 100644
--- a/ogr/ogr_proj_p.h
+++ b/ogr/ogr_proj_p.h
@@ -13,7 +13,7 @@
 #ifndef OGR_PROJ_P_H_INCLUDED
 #define OGR_PROJ_P_H_INCLUDED
 
-#include "proj.h"
+#include <proj/proj.h>
 
 #include "cpl_mem_cache.h"
 
diff --git a/ogr/ogrct.cpp b/ogr/ogrct.cpp
index 399c21e3db..a02ecb7598 100644
--- a/ogr/ogrct.cpp
+++ b/ogr/ogrct.cpp
@@ -31,8 +31,8 @@
 #include "ogr_proj_p.h"
 #include "ogrct_priv.h"
 
-#include "proj.h"
-#include "proj_experimental.h"
+#include <proj/proj.h>
+#include <proj/proj_experimental.h>
 
 #ifdef DEBUG_PERF
 static double g_dfTotalTimeCRStoCRS = 0;
diff --git a/ogr/ogrgeojsonwriter.cpp b/ogr/ogrgeojsonwriter.cpp
index d22f58e6ea..91d02b8058 100644
--- a/ogr/ogrgeojsonwriter.cpp
+++ b/ogr/ogrgeojsonwriter.cpp
@@ -21,13 +21,13 @@
 #include "ogrlibjsonutils.h"
 #include "ogr_feature.h"
 #include "ogr_p.h"
-#include <json.h>  // JSON-C
+#include <json-c/json.h>  // JSON-C
 
 #if (!defined(JSON_C_VERSION_NUM)) || (JSON_C_VERSION_NUM < JSON_C_VER_013)
 #include <json_object_private.h>
 #endif
 
-#include <printbuf.h>
+#include <json-c/printbuf.h>
 #include "ogr_api.h"
 
 #include <algorithm>
diff --git a/ogr/ogrlinestring.cpp b/ogr/ogrlinestring.cpp
index 557933c25c..fe91b9cbaf 100644
--- a/ogr/ogrlinestring.cpp
+++ b/ogr/ogrlinestring.cpp
@@ -15,7 +15,7 @@
 #include "ogr_geos.h"
 #include "ogr_p.h"
 
-#include "geodesic.h"  // from PROJ
+#include <proj/geodesic.h>  // from PROJ
 
 #include <cmath>
 #include <cstdlib>
diff --git a/ogr/ogrsf_frmts/amigocloud/CMakeLists.txt b/ogr/ogrsf_frmts/amigocloud/CMakeLists.txt
index 70c866dbb5..c913495eae 100644
--- a/ogr/ogrsf_frmts/amigocloud/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/amigocloud/CMakeLists.txt
@@ -14,5 +14,5 @@ target_include_directories(ogr_AmigoCloud PRIVATE ${GDAL_VECTOR_FORMAT_SOURCE_DI
 if (GDAL_USE_JSONC_INTERNAL)
   gdal_add_vendored_lib(ogr_AmigoCloud libjson)
 else ()
-  gdal_target_link_libraries(ogr_AmigoCloud PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(ogr_AmigoCloud PRIVATE json-c::json-c)
 endif ()
diff --git a/ogr/ogrsf_frmts/carto/CMakeLists.txt b/ogr/ogrsf_frmts/carto/CMakeLists.txt
index 0d3478c7b7..69cdbce81c 100644
--- a/ogr/ogrsf_frmts/carto/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/carto/CMakeLists.txt
@@ -21,5 +21,5 @@ target_include_directories(ogr_Carto PRIVATE $<TARGET_PROPERTY:ogr_PGDump,SOURCE
 if (GDAL_USE_JSONC_INTERNAL)
   gdal_add_vendored_lib(ogr_Carto libjson)
 else ()
-  gdal_target_link_libraries(ogr_Carto PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(ogr_Carto PRIVATE json-c::json-c)
 endif ()
diff --git a/ogr/ogrsf_frmts/elastic/CMakeLists.txt b/ogr/ogrsf_frmts/elastic/CMakeLists.txt
index f34e98f5f7..dac7a9a278 100644
--- a/ogr/ogrsf_frmts/elastic/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/elastic/CMakeLists.txt
@@ -19,5 +19,5 @@ gdal_standard_includes(ogr_Elastic)
 if (GDAL_USE_JSONC_INTERNAL)
   gdal_add_vendored_lib(ogr_Elastic libjson)
 else ()
-  gdal_target_link_libraries(ogr_Elastic PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(ogr_Elastic PRIVATE json-c::json-c)
 endif ()
diff --git a/ogr/ogrsf_frmts/geojson/CMakeLists.txt b/ogr/ogrsf_frmts/geojson/CMakeLists.txt
index 6d0a3d7628..72076fb74e 100644
--- a/ogr/ogrsf_frmts/geojson/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/geojson/CMakeLists.txt
@@ -19,7 +19,7 @@ target_include_directories(ogr_GeoJSON PRIVATE $<TARGET_PROPERTY:appslib,SOURCE_
 if (GDAL_USE_JSONC_INTERNAL)
   gdal_add_vendored_lib(ogr_GeoJSON libjson)
 else ()
-  gdal_target_link_libraries(ogr_GeoJSON PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(ogr_GeoJSON PRIVATE json-c::json-c)
 endif ()
 if (OGR_ENABLE_DRIVER_GEOJSON_PLUGIN)
   target_compile_definitions(ogr_GeoJSON PRIVATE BUILT_AS_PLUGIN)
diff --git a/ogr/ogrsf_frmts/geojson/libjson/json_object_iterator.c b/ogr/ogrsf_frmts/geojson/libjson/json_object_iterator.c
index 1372133df2..5865a3d1c3 100644
--- a/ogr/ogrsf_frmts/geojson/libjson/json_object_iterator.c
+++ b/ogr/ogrsf_frmts/geojson/libjson/json_object_iterator.c
@@ -13,7 +13,7 @@
 
 #include <stddef.h>
 
-#include "json.h"
+#include <json-c/json.h>
 #include "json_object_private.h"
 
 #include "json_object_iterator.h"
diff --git a/ogr/ogrsf_frmts/geojson/ogresrijsonreader.cpp b/ogr/ogrsf_frmts/geojson/ogresrijsonreader.cpp
index 3744e263ac..6fcb349793 100644
--- a/ogr/ogrsf_frmts/geojson/ogresrijsonreader.cpp
+++ b/ogr/ogrsf_frmts/geojson/ogresrijsonreader.cpp
@@ -22,7 +22,7 @@
 #include "cpl_conv.h"
 #include "cpl_error.h"
 #include "cpl_time.h"
-#include "json.h"
+#include <json-c/json.h>
 // #include "json_object.h"
 // #include "json_tokener.h"
 #include "ogr_api.h"
diff --git a/ogr/ogrsf_frmts/geojson/ogrgeojsondatasource.cpp b/ogr/ogrsf_frmts/geojson/ogrgeojsondatasource.cpp
index 2469be8daf..98f42b9e45 100644
--- a/ogr/ogrsf_frmts/geojson/ogrgeojsondatasource.cpp
+++ b/ogr/ogrsf_frmts/geojson/ogrgeojsondatasource.cpp
@@ -26,7 +26,7 @@
 #include "cpl_string.h"
 #include "cpl_vsi.h"
 #include "cpl_vsi_error.h"
-#include "json.h"
+#include <json-c/json.h>
 // #include "json_object.h"
 #include "gdal_utils.h"
 #include "gdal.h"
diff --git a/ogr/ogrsf_frmts/geojson/ogrgeojsonlayer.cpp b/ogr/ogrsf_frmts/geojson/ogrgeojsonlayer.cpp
index 95a98d36bb..6d8b379f6f 100644
--- a/ogr/ogrsf_frmts/geojson/ogrgeojsonlayer.cpp
+++ b/ogr/ogrsf_frmts/geojson/ogrgeojsonlayer.cpp
@@ -22,7 +22,7 @@
 #endif
 #endif  // !DEBUG_VERBOSE
 
-#include <json.h>
+#include <json-c/json.h>
 
 #if !DEBUG_JSON
 #ifdef __clang
diff --git a/ogr/ogrsf_frmts/geojson/ogrgeojsonutils.cpp b/ogr/ogrsf_frmts/geojson/ogrgeojsonutils.cpp
index 856dd9c3e7..0364f4c684 100644
--- a/ogr/ogrsf_frmts/geojson/ogrgeojsonutils.cpp
+++ b/ogr/ogrsf_frmts/geojson/ogrgeojsonutils.cpp
@@ -17,7 +17,7 @@
 #include "cpl_conv.h"
 #include "cpl_json_streaming_parser.h"
 #include "ogr_geometry.h"
-#include <json.h>  // JSON-C
+#include <json-c/json.h>  // JSON-C
 
 #include <algorithm>
 #include <memory>
diff --git a/ogr/ogrsf_frmts/geojson/ogrjsoncollectionstreamingparser.cpp b/ogr/ogrsf_frmts/geojson/ogrjsoncollectionstreamingparser.cpp
index 91371c8a5a..e29ccc9627 100644
--- a/ogr/ogrsf_frmts/geojson/ogrjsoncollectionstreamingparser.cpp
+++ b/ogr/ogrsf_frmts/geojson/ogrjsoncollectionstreamingparser.cpp
@@ -19,7 +19,7 @@
 
 #define JSON_C_VER_013 (13 << 8)
 
-#include <json.h>  // JSON-C
+#include <json-c/json.h>  // JSON-C
 
 #if (!defined(JSON_C_VERSION_NUM)) || (JSON_C_VERSION_NUM < JSON_C_VER_013)
 #include <json_object_private.h>  // just for sizeof(struct json_object)
diff --git a/ogr/ogrsf_frmts/geojson/ogrjsoncollectionstreamingparser.h b/ogr/ogrsf_frmts/geojson/ogrjsoncollectionstreamingparser.h
index 7e0d6f8425..3b3b1c2199 100644
--- a/ogr/ogrsf_frmts/geojson/ogrjsoncollectionstreamingparser.h
+++ b/ogr/ogrsf_frmts/geojson/ogrjsoncollectionstreamingparser.h
@@ -15,7 +15,7 @@
 
 #include "cpl_json_streaming_parser.h"
 
-#include <json.h>  // JSON-C
+#include <json-c/json.h>  // JSON-C
 
 /************************************************************************/
 /*                      OGRJSONCollectionStreamingParser                */
diff --git a/ogr/ogrsf_frmts/geojson/ogrtopojsonreader.cpp b/ogr/ogrsf_frmts/geojson/ogrtopojsonreader.cpp
index 314b7c6ba8..219ce4ba66 100644
--- a/ogr/ogrsf_frmts/geojson/ogrtopojsonreader.cpp
+++ b/ogr/ogrsf_frmts/geojson/ogrtopojsonreader.cpp
@@ -15,7 +15,7 @@
 #include "ogrlibjsonutils.h"
 #include "ogr_geojson.h"
 #include "ogrgeojsongeometry.h"
-#include <json.h>  // JSON-C
+#include <json-c/json.h>  // JSON-C
 #include "ogr_api.h"
 
 /************************************************************************/
diff --git a/ogr/ogrsf_frmts/gml/CMakeLists.txt b/ogr/ogrsf_frmts/gml/CMakeLists.txt
index 9316580f70..03f6016c45 100644
--- a/ogr/ogrsf_frmts/gml/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/gml/CMakeLists.txt
@@ -90,5 +90,5 @@ if (GDAL_USE_XERCESC)
 endif ()
 if (GDAL_USE_SQLITE3)
   target_compile_definitions(ogr_GML PRIVATE -DHAVE_SQLITE)
-  gdal_target_link_libraries(ogr_GML PRIVATE SQLite::SQLite3)
+  gdal_target_link_libraries(ogr_GML PRIVATE SQLite3)
 endif ()
diff --git a/ogr/ogrsf_frmts/gmlas/CMakeLists.txt b/ogr/ogrsf_frmts/gmlas/CMakeLists.txt
index afac5d6bb3..108f44d219 100644
--- a/ogr/ogrsf_frmts/gmlas/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/gmlas/CMakeLists.txt
@@ -57,7 +57,7 @@ endif ()
 
 # External libs then
 if (NOT GDAL_USE_JSONC_INTERNAL)
-  gdal_target_link_libraries(ogr_GMLAS PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(ogr_GMLAS PRIVATE json-c::json-c)
 endif ()
 
 target_compile_definitions(ogr_GMLAS PRIVATE -DHAVE_XERCES=1)
diff --git a/ogr/ogrsf_frmts/gpkg/CMakeLists.txt b/ogr/ogrsf_frmts/gpkg/CMakeLists.txt
index ca3ddf5ec8..ef16167636 100644
--- a/ogr/ogrsf_frmts/gpkg/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/gpkg/CMakeLists.txt
@@ -22,7 +22,7 @@ target_include_directories(
   ogr_GeoPackage PRIVATE $<TARGET_PROPERTY:alg,SOURCE_DIR> ${GDAL_RASTER_FORMAT_SOURCE_DIR}/mem
                          ${GDAL_VECTOR_FORMAT_SOURCE_DIR}/sqlite  $<TARGET_PROPERTY:ogrsf_generic,SOURCE_DIR>)
 
-gdal_target_link_libraries(ogr_GeoPackage PRIVATE SQLite::SQLite3)
+gdal_target_link_libraries(ogr_GeoPackage PRIVATE SQLite3)
 if (SQLite3_HAS_COLUMN_METADATA)
   target_compile_definitions(ogr_GeoPackage PRIVATE -DSQLITE_HAS_COLUMN_METADATA)
 endif ()
diff --git a/ogr/ogrsf_frmts/jsonfg/CMakeLists.txt b/ogr/ogrsf_frmts/jsonfg/CMakeLists.txt
index 719f102270..fc141929fb 100644
--- a/ogr/ogrsf_frmts/jsonfg/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/jsonfg/CMakeLists.txt
@@ -16,5 +16,5 @@ target_include_directories(ogr_JSONFG PRIVATE $<TARGET_PROPERTY:ogr_GeoJSON,SOUR
 if (GDAL_USE_JSONC_INTERNAL)
   gdal_add_vendored_lib(ogr_JSONFG libjson)
 else ()
-  gdal_target_link_libraries(ogr_JSONFG PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(ogr_JSONFG PRIVATE json-c::json-c)
 endif ()
diff --git a/ogr/ogrsf_frmts/jsonfg/ogrjsonfgreader.cpp b/ogr/ogrsf_frmts/jsonfg/ogrjsonfgreader.cpp
index b859ecdf5d..16a826987a 100644
--- a/ogr/ogrsf_frmts/jsonfg/ogrjsonfgreader.cpp
+++ b/ogr/ogrsf_frmts/jsonfg/ogrjsonfgreader.cpp
@@ -20,7 +20,7 @@
 
 #include "cpl_vsi_virtual.h"
 
-#include <json.h>  // JSON-C
+#include <json-c/json.h>  // JSON-C
 
 /************************************************************************/
 /*                  OGRJSONFGReader::~OGRJSONFGReader()                 */
diff --git a/ogr/ogrsf_frmts/libkml/CMakeLists.txt b/ogr/ogrsf_frmts/libkml/CMakeLists.txt
index 158e6cf702..317a903b08 100644
--- a/ogr/ogrsf_frmts/libkml/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/libkml/CMakeLists.txt
@@ -26,7 +26,7 @@ endif()
 
 gdal_standard_includes(ogr_LIBKML)
 gdal_target_link_libraries(ogr_LIBKML PRIVATE LIBKML::LibKML LIBKML::DOM LIBKML::ENGINE)
-if (TARGET LIBKML::MINIZIP AND TARGET LIBKML::URIPARSER AND TARGET ZLIB::ZLIB AND GDAL_USE_EXPAT)
+if (TARGET LIBKML::MINIZIP AND TARGET LIBKML::URIPARSER AND TARGET zlib AND GDAL_USE_EXPAT)
   # Fedora Rawhide doesn't have LIBKML::MINIZIP
-  gdal_target_link_libraries(ogr_LIBKML PRIVATE LIBKML::MINIZIP LIBKML::URIPARSER ZLIB::ZLIB ${EXPAT_TARGET})
+  gdal_target_link_libraries(ogr_LIBKML PRIVATE LIBKML::MINIZIP LIBKML::URIPARSER zlib ${EXPAT_TARGET})
 endif()
diff --git a/ogr/ogrsf_frmts/mvt/CMakeLists.txt b/ogr/ogrsf_frmts/mvt/CMakeLists.txt
index 5b88be85b3..49072d1fbc 100644
--- a/ogr/ogrsf_frmts/mvt/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/mvt/CMakeLists.txt
@@ -11,7 +11,7 @@ endif ()
 
 if (GDAL_USE_SQLITE3)
   target_compile_definitions(ogr_MVT PRIVATE -DHAVE_SQLITE)
-  gdal_target_link_libraries(ogr_MVT PRIVATE SQLite::SQLite3)
+  gdal_target_link_libraries(ogr_MVT PRIVATE SQLite3)
 endif ()
 
 add_executable(mvt_tile_test EXCLUDE_FROM_ALL mvt_tile_test.cpp)
diff --git a/ogr/ogrsf_frmts/osm/CMakeLists.txt b/ogr/ogrsf_frmts/osm/CMakeLists.txt
index 113c119173..9941075c54 100644
--- a/ogr/ogrsf_frmts/osm/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/osm/CMakeLists.txt
@@ -30,7 +30,7 @@ if (GDAL_USE_EXPAT)
   gdal_target_link_libraries(ogr_OSM PRIVATE ${EXPAT_TARGET})
 endif ()
 if (GDAL_USE_SQLITE3)
-  gdal_target_link_libraries(ogr_OSM PRIVATE SQLite::SQLite3)
+  gdal_target_link_libraries(ogr_OSM PRIVATE SQLite3)
 endif ()
 
 if (BROKEN)
@@ -42,6 +42,6 @@ if (BROKEN)
   endif ()
   if (GDAL_USE_SQLITE3)
     target_sources(osm2osm PRIVATE ../sqlite/ogrsqlitevfs.cpp ../sqlite/ogrsqliteexecutesql.cpp)
-    target_link_libraries(osm2osm PRIVATE SQLite::SQLite3)
+    target_link_libraries(osm2osm PRIVATE SQLite3)
   endif ()
 endif ()
diff --git a/ogr/ogrsf_frmts/pds/CMakeLists.txt b/ogr/ogrsf_frmts/pds/CMakeLists.txt
index e28ed30bc5..90f279015d 100644
--- a/ogr/ogrsf_frmts/pds/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/pds/CMakeLists.txt
@@ -7,5 +7,5 @@ target_include_directories(ogr_PDS PRIVATE $<TARGET_PROPERTY:gdal_PDS,SOURCE_DIR
 if (GDAL_USE_JSONC_INTERNAL)
   gdal_add_vendored_lib(ogr_PDS libjson)
 else ()
-  gdal_target_link_libraries(ogr_PDS PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(ogr_PDS PRIVATE json-c::json-c)
 endif ()
diff --git a/ogr/ogrsf_frmts/plscenes/CMakeLists.txt b/ogr/ogrsf_frmts/plscenes/CMakeLists.txt
index ca9ef94564..31a7ff711d 100644
--- a/ogr/ogrsf_frmts/plscenes/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/plscenes/CMakeLists.txt
@@ -35,5 +35,5 @@ gdal_standard_includes(ogr_PLSCENES)
 if (GDAL_USE_JSONC_INTERNAL)
   gdal_add_vendored_lib(ogr_PLSCENES libjson)
 else ()
-  gdal_target_link_libraries(ogr_PLSCENES PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(ogr_PLSCENES PRIVATE json-c::json-c)
 endif ()
diff --git a/ogr/ogrsf_frmts/pmtiles/CMakeLists.txt b/ogr/ogrsf_frmts/pmtiles/CMakeLists.txt
index eceb33a802..62a4322dfe 100644
--- a/ogr/ogrsf_frmts/pmtiles/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/pmtiles/CMakeLists.txt
@@ -22,5 +22,5 @@ endif ()
 # Needed for Create() mode
 if (GDAL_USE_SQLITE3)
   target_compile_definitions(ogr_PMTiles PRIVATE -DHAVE_SQLITE)
-  gdal_target_link_libraries(ogr_PMTiles PRIVATE SQLite::SQLite3)
+  gdal_target_link_libraries(ogr_PMTiles PRIVATE SQLite3)
 endif ()
diff --git a/ogr/ogrsf_frmts/sqlite/CMakeLists.txt b/ogr/ogrsf_frmts/sqlite/CMakeLists.txt
index 1e46967b32..8be075488f 100644
--- a/ogr/ogrsf_frmts/sqlite/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/sqlite/CMakeLists.txt
@@ -33,7 +33,7 @@ gdal_standard_includes(ogr_SQLite)
 set_property(TARGET ogr_SQLite PROPERTY UNITY_BUILD OFF)
 
 target_compile_definitions(ogr_SQLite PRIVATE -DHAVE_SQLITE)
-gdal_target_link_libraries(ogr_SQLite PRIVATE SQLite::SQLite3)
+gdal_target_link_libraries(ogr_SQLite PRIVATE SQLite3)
 gdal_target_link_libraries(ogr_SQLite PRIVATE PROJ::proj)
 
 include(CMakePushCheckState)
@@ -85,7 +85,7 @@ endif ()
 # Test utility
 add_executable(test_load_virtual_ogr EXCLUDE_FROM_ALL test_load_virtual_ogr.c)
 gdal_standard_includes(test_load_virtual_ogr)
-target_link_libraries(test_load_virtual_ogr PRIVATE SQLite::SQLite3)
+target_link_libraries(test_load_virtual_ogr PRIVATE SQLite3)
 if (GDAL_USE_SPATIALITE)
   target_include_directories(test_load_virtual_ogr PRIVATE ${SPATIALITE_INCLUDE_DIRS})
   target_compile_definitions(test_load_virtual_ogr PRIVATE -DHAVE_SPATIALITE)
@@ -106,5 +106,5 @@ if (HAVE_SQLITE3EXT_H AND BUILD_SHARED_LIBS)
                           LIBRARY_OUTPUT_DIRECTORY ${PLUGIN_OUTPUT_DIR}
                           SKIP_BUILD_RPATH YES
                           )
-    target_link_libraries(my_test_sqlite3_ext PRIVATE SQLite::SQLite3)
+    target_link_libraries(my_test_sqlite3_ext PRIVATE SQLite3)
 endif()
diff --git a/ogr/ogrsf_frmts/sqlite/ogrsqlitedatasource.cpp b/ogr/ogrsf_frmts/sqlite/ogrsqlitedatasource.cpp
index afa49ba65a..344e35ce50 100644
--- a/ogr/ogrsf_frmts/sqlite/ogrsqlitedatasource.cpp
+++ b/ogr/ogrsf_frmts/sqlite/ogrsqlitedatasource.cpp
@@ -55,7 +55,7 @@
 #include "ogrsf_frmts.h"
 #include "sqlite3.h"
 
-#include "proj.h"
+#include <proj/proj.h>
 #include "ogr_proj_p.h"
 
 #ifdef __clang__
diff --git a/ogr/ogrsf_frmts/vfk/CMakeLists.txt b/ogr/ogrsf_frmts/vfk/CMakeLists.txt
index 2d1045a787..8eea27aa6b 100644
--- a/ogr/ogrsf_frmts/vfk/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/vfk/CMakeLists.txt
@@ -26,7 +26,7 @@ endif()
 gdal_standard_includes(ogr_VFK)
 if (GDAL_USE_SQLITE3)
   target_include_directories(ogr_VFK PRIVATE ${SQLite3_INCLUDE_DIR})
-  gdal_target_link_libraries(ogr_VFK PRIVATE SQLite::SQLite3)
+  gdal_target_link_libraries(ogr_VFK PRIVATE SQLite3)
   target_compile_definitions(ogr_VFK PRIVATE -DHAVE_SQLITE)
 endif ()
 if (GDAL_USE_GEOS)
diff --git a/ogr/ogrspatialreference.cpp b/ogr/ogrspatialreference.cpp
index cd416f952b..20ed665bda 100644
--- a/ogr/ogrspatialreference.cpp
+++ b/ogr/ogrspatialreference.cpp
@@ -41,9 +41,9 @@
 #include "ogr_srs_api.h"
 #include "ogrmitabspatialref.h"
 
-#include "proj.h"
-#include "proj_experimental.h"
-#include "proj_constants.h"
+#include <proj/proj.h>
+#include <proj/proj_experimental.h>
+#include <proj/proj_constants.h>
 
 bool GDALThreadLocalDatasetCacheIsInDestruction();
 
diff --git a/port/CMakeLists.txt b/port/CMakeLists.txt
index ec8859a263..d8fcc35f09 100644
--- a/port/CMakeLists.txt
+++ b/port/CMakeLists.txt
@@ -191,7 +191,7 @@ endif ()
 
 # Now external libraries
 if (NOT GDAL_USE_JSONC_INTERNAL)
-  gdal_target_link_libraries(cpl PRIVATE ${JSONC_TARGET})
+  gdal_target_link_libraries(cpl PRIVATE json-c::json-c)
 endif ()
 
 if (NOT GDAL_USE_ZLIB_INTERNAL)
@@ -199,7 +199,7 @@ if (NOT GDAL_USE_ZLIB_INTERNAL)
   if (MSVC AND NOT ZLIB_IS_STATIC)
     target_compile_definitions(cpl PRIVATE -DZLIB_DLL)
   endif ()
-  gdal_target_link_libraries(cpl PRIVATE ZLIB::ZLIB)
+  gdal_target_link_libraries(cpl PRIVATE zlib)
 endif ()
 
 if (GDAL_USE_ARCHIVE)
diff --git a/port/cpl_compressor.cpp b/port/cpl_compressor.cpp
index f721868020..703bb2df96 100644
--- a/port/cpl_compressor.cpp
+++ b/port/cpl_compressor.cpp
@@ -22,7 +22,7 @@
 #ifdef HAVE_LIBDEFLATE
 #include "libdeflate.h"
 #else
-#include "zlib.h"
+#include <zlib/zlib.h>
 #endif
 
 #ifdef HAVE_LZMA
diff --git a/port/cpl_json_header.h b/port/cpl_json_header.h
index 7d05f276cb..f3a4f6a501 100644
--- a/port/cpl_json_header.h
+++ b/port/cpl_json_header.h
@@ -24,7 +24,7 @@
 #pragma warning(disable : 4005)
 #endif
 
-#include <json.h>
+#include <json-c/json.h>
 
 #ifdef _MSC_VER
 #pragma warning(pop)
diff --git a/port/cpl_minizip_ioapi.cpp b/port/cpl_minizip_ioapi.cpp
index 6314eeec45..e68cf08597 100644
--- a/port/cpl_minizip_ioapi.cpp
+++ b/port/cpl_minizip_ioapi.cpp
@@ -30,8 +30,8 @@
 
 #include "cpl_minizip_ioapi.h"
 #include "cpl_vsi.h"
-#include "zconf.h"
-#include "zlib.h"
+#include <zlib/zconf.h>
+#include <zlib/zlib.h>
 
 static voidpf ZCALLBACK fopen_file_func(voidpf /* opaque */,
                                         const char *filename, int mode)
diff --git a/port/cpl_minizip_ioapi.h b/port/cpl_minizip_ioapi.h
index e43e9e9c06..925fe4b2d3 100644
--- a/port/cpl_minizip_ioapi.h
+++ b/port/cpl_minizip_ioapi.h
@@ -22,7 +22,7 @@
 #ifndef DOXYGEN_SKIP
 
 #include "cpl_vsi.h"
-#include "zlib.h"
+#include <zlib/zlib.h>
 
 #define uLong64 vsi_l_offset
 
diff --git a/port/cpl_zlib_header.h b/port/cpl_zlib_header.h
index 3062fe9104..54bd20487a 100644
--- a/port/cpl_zlib_header.h
+++ b/port/cpl_zlib_header.h
@@ -17,7 +17,7 @@
 #pragma GCC system_header
 #endif
 
-#include "zlib.h"
+#include <zlib/zlib.h>
 
 #ifdef ENABLE_DEFLATE64
 #include "infback9.h"
