diff --git a/CMakeLists.txt b/CMakeLists.txt
index 72901a8c..d3aa4fc9 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.10)
+cmake_minimum_required(VERSION 3.22)
 
 # Run version helper script
 include(cmake/version.cmake)
@@ -13,9 +13,15 @@ else()
 	set(DEFAULT_STATIC ON)
 endif()
 
-option(TRACY_STATIC "Whether to build Tracy as a static library" ${DEFAULT_STATIC})
+option(TRACY_STATIC    "Whether to build Tracy as a static library"           ${DEFAULT_STATIC})
+option(BUILD_CLI_TOOLS "Build CLI tools (csvexport, capture, import, update)" 0)
+option(BUILD_GUI_TOOLS "Build Tracy Profiler GUI application"                 0)
 
-find_package(Threads REQUIRED)
+set(EXAMPLE_TRACE_FILE "" CACHE STRING "An example trace file for embedding into WebAssembly variant of Profiler") # https://share.nereid.pl/i/embed.tracy
+
+if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
+    find_package(Threads REQUIRED)
+endif()
 
 set(TRACY_PUBLIC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/public)
 
@@ -30,12 +36,15 @@ target_compile_features(TracyClient PUBLIC cxx_std_11)
 target_include_directories(TracyClient SYSTEM PUBLIC
     $<BUILD_INTERFACE:${TRACY_PUBLIC_DIR}>
     $<INSTALL_INTERFACE:include>)
-target_link_libraries(
-    TracyClient
-    PUBLIC
-        Threads::Threads
-        ${CMAKE_DL_LIBS}
-)
+
+if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
+    target_link_libraries(
+        TracyClient
+        PUBLIC
+            Threads::Threads
+            ${CMAKE_DL_LIBS}
+    )
+endif()
 
 # Public dependency on some libraries required when using Mingw
 if(WIN32 AND ${CMAKE_CXX_COMPILER_ID} MATCHES "GNU|Clang")
@@ -170,9 +179,9 @@ export(TARGETS TracyClient
 install(FILES ${tracy_includes}
         DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tracy)
 install(FILES ${client_includes}
-        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/client)
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tracy/client)
 install(FILES ${common_includes}
-        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/common)
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tracy/common)
 install(EXPORT TracyConfig
         NAMESPACE Tracy::
         FILE TracyTargets.cmake
@@ -193,3 +202,14 @@ if(TRACY_CLIENT_PYTHON)
 
     add_subdirectory(python)
 endif()
+
+if(BUILD_CLI_TOOLS)
+    add_subdirectory(csvexport)
+    add_subdirectory(capture)
+    add_subdirectory(import)
+    add_subdirectory(update)
+endif()
+
+if(BUILD_GUI_TOOLS)
+    add_subdirectory(profiler)
+endif()
diff --git a/Config.cmake.in b/Config.cmake.in
index fc913ab3..f3a07a47 100644
--- a/Config.cmake.in
+++ b/Config.cmake.in
@@ -1,6 +1,16 @@
 @PACKAGE_INIT@
 
 include(CMakeFindDependencyMacro)
-find_dependency(Threads REQUIRED)
 
-include("${CMAKE_CURRENT_LIST_DIR}/TracyTargets.cmake")
\ No newline at end of file
+# neither of these are required for the TracyClient library
+#if(@BUILD_CLI_TOOLS@ OR @BUILD_GUI_TOOLS@)
+#    find_dependency(capstone CONFIG REQUIRED)
+#endif()
+#if(@BUILD_GUI_TOOLS@)
+#    find_dependency(freetype CONFIG REQUIRED)
+#    find_dependency(glfw3 CONFIG REQUIRED)
+#endif()
+
+include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")
+
+check_required_components(@PROJECT_NAME@)
diff --git a/capture/CMakeLists.txt b/capture/CMakeLists.txt
index 2417c781..617c1350 100644
--- a/capture/CMakeLists.txt
+++ b/capture/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.16)
+cmake_minimum_required(VERSION 3.22)
 
 option(NO_ISA_EXTENSIONS "Disable ISA extensions (don't pass -march=native or -mcpu=native to the compiler)" OFF)
 option(NO_STATISTICS "Disable calculation of statistics" ON)
@@ -25,3 +25,16 @@ set(PROGRAM_FILES
 add_executable(${PROJECT_NAME} ${PROGRAM_FILES} ${COMMON_FILES} ${SERVER_FILES})
 target_link_libraries(${PROJECT_NAME} PRIVATE TracyServer TracyGetOpt)
 set_property(DIRECTORY ${CMAKE_CURRENT_LIST_DIR} PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})
+
+install(TARGETS ${PROJECT_NAME}
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+    CONFIGURATIONS Release
+)
+if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
+    install(
+        FILES
+            ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.wasm
+            ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.worker.js
+        DESTINATION ${CMAKE_INSTALL_BINDIR}
+    )
+endif()
diff --git a/cmake/server.cmake b/cmake/server.cmake
index c12a3408..527e20d3 100644
--- a/cmake/server.cmake
+++ b/cmake/server.cmake
@@ -1,3 +1,5 @@
+include_guard(GLOBAL)
+
 set(TRACY_COMMON_DIR ${CMAKE_CURRENT_LIST_DIR}/../public/common)
 
 set(TRACY_COMMON_SOURCES
diff --git a/cmake/vendor.cmake b/cmake/vendor.cmake
index 29f12cfa..ee2a5577 100644
--- a/cmake/vendor.cmake
+++ b/cmake/vendor.cmake
@@ -1,55 +1,31 @@
+include_guard(GLOBAL)
+
 # Vendor Specific CMake
 # The Tracy project keeps most vendor source locally
 
 set (ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}/../")
 
-# Dependencies are taken from the system first and if not found, they are pulled with CPM and built from source
-
-include(FindPkgConfig)
-include(${CMAKE_CURRENT_LIST_DIR}/CPM.cmake)
+if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
+    include(FindPkgConfig)
+endif()
 
-option(DOWNLOAD_CAPSTONE "Force download capstone" ON)
-option(DOWNLOAD_GLFW "Force download glfw" OFF)
-option(DOWNLOAD_FREETYPE "Force download freetype" OFF)
+option(DOWNLOAD_CAPSTONE "Force download capstone" 0)
+option(DOWNLOAD_GLFW     "Force download glfw"     0)
+option(DOWNLOAD_FREETYPE "Force download freetype" 0)
 
 # capstone
 
-pkg_check_modules(CAPSTONE capstone)
-if(CAPSTONE_FOUND AND NOT DOWNLOAD_CAPSTONE)
-    message(STATUS "Capstone found: ${CAPSTONE}")
-    add_library(TracyCapstone INTERFACE)
-    target_include_directories(TracyCapstone INTERFACE ${CAPSTONE_INCLUDE_DIRS})
-    target_link_libraries(TracyCapstone INTERFACE ${CAPSTONE_LINK_LIBRARIES})
-else()
-    CPMAddPackage(
-        NAME capstone
-        GITHUB_REPOSITORY capstone-engine/capstone
-        GIT_TAG 5.0.3
-    )
+if(BUILD_CLI_TOOLS OR BUILD_GUI_TOOLS)
+    find_package(capstone CONFIG REQUIRED)
     add_library(TracyCapstone INTERFACE)
-    target_include_directories(TracyCapstone INTERFACE ${capstone_SOURCE_DIR}/include/capstone)
-    target_link_libraries(TracyCapstone INTERFACE capstone)
+    target_link_libraries(TracyCapstone INTERFACE capstone::capstone)
 endif()
 
 # GLFW
 
-if(NOT USE_WAYLAND AND NOT EMSCRIPTEN)
-    pkg_check_modules(GLFW glfw3)
-    if (GLFW_FOUND AND NOT DOWNLOAD_GLFW)
-        add_library(TracyGlfw3 INTERFACE)
-        target_include_directories(TracyGlfw3 INTERFACE ${GLFW_INCLUDE_DIRS})
-        target_link_libraries(TracyGlfw3 INTERFACE ${GLFW_LINK_LIBRARIES})
-    else()
-        CPMAddPackage(
-            NAME glfw
-            GITHUB_REPOSITORY glfw/glfw
-            GIT_TAG 3.4
-            OPTIONS
-                "GLFW_BUILD_EXAMPLES OFF"
-                "GLFW_BUILD_TESTS OFF"
-                "GLFW_BUILD_DOCS OFF"
-                "GLFW_INSTALL OFF"
-        )
+if(BUILD_GUI_TOOLS)
+    if(NOT USE_WAYLAND AND NOT EMSCRIPTEN)
+        find_package(glfw3 CONFIG REQUIRED)
         add_library(TracyGlfw3 INTERFACE)
         target_link_libraries(TracyGlfw3 INTERFACE glfw)
     endif()
@@ -57,25 +33,13 @@ endif()
 
 # freetype
 
-pkg_check_modules(FREETYPE freetype2)
-if (FREETYPE_FOUND AND NOT DOWNLOAD_FREETYPE)
-    add_library(TracyFreetype INTERFACE)
-    target_include_directories(TracyFreetype INTERFACE ${FREETYPE_INCLUDE_DIRS})
-    target_link_libraries(TracyFreetype INTERFACE ${FREETYPE_LINK_LIBRARIES})
-else()
-    CPMAddPackage(
-        NAME freetype
-        GITHUB_REPOSITORY freetype/freetype
-        GIT_TAG VER-2-13-2
-        OPTIONS
-            "FT_DISABLE_HARFBUZZ ON"
-            "FT_WITH_HARFBUZZ OFF"
-    )
+if(BUILD_GUI_TOOLS)
+    find_package(freetype CONFIG REQUIRED)
     add_library(TracyFreetype INTERFACE)
     target_link_libraries(TracyFreetype INTERFACE freetype)
 endif()
 
-# zstd
+# zstd (that should also be resolved with a package manager instead of vendored sources)
 
 set(ZSTD_DIR "${ROOT_DIR}/zstd")
 
@@ -138,26 +102,28 @@ add_library(TracyGetOpt STATIC ${GETOPT_SOURCES} ${GETOPT_HEADERS})
 target_include_directories(TracyGetOpt PUBLIC ${GETOPT_DIR})
 
 
-# ImGui
+# ImGui (that should also be resolved with a package manager instead of vendored sources)
 
-set(IMGUI_DIR "${ROOT_DIR}/imgui")
+if(BUILD_GUI_TOOLS)
+    set(IMGUI_DIR "${ROOT_DIR}/imgui")
 
-set(IMGUI_SOURCES
-    imgui_widgets.cpp
-    imgui_draw.cpp
-    imgui_demo.cpp
-    imgui.cpp
-    imgui_tables.cpp
-    misc/freetype/imgui_freetype.cpp
-)
+    set(IMGUI_SOURCES
+        imgui_widgets.cpp
+        imgui_draw.cpp
+        imgui_demo.cpp
+        imgui.cpp
+        imgui_tables.cpp
+        misc/freetype/imgui_freetype.cpp
+    )
 
-list(TRANSFORM IMGUI_SOURCES PREPEND "${IMGUI_DIR}/")
+    list(TRANSFORM IMGUI_SOURCES PREPEND "${IMGUI_DIR}/")
 
-add_definitions(-DIMGUI_ENABLE_FREETYPE)
+    add_definitions(-DIMGUI_ENABLE_FREETYPE)
 
-add_library(TracyImGui STATIC ${IMGUI_SOURCES})
-target_include_directories(TracyImGui PUBLIC ${IMGUI_DIR})
-target_link_libraries(TracyImGui PUBLIC TracyFreetype)
+    add_library(TracyImGui STATIC ${IMGUI_SOURCES})
+    target_include_directories(TracyImGui PUBLIC ${IMGUI_DIR})
+    target_link_libraries(TracyImGui PUBLIC TracyFreetype)
+endif()
 
 # NFD
 
@@ -197,7 +163,7 @@ if (NOT NO_FILESELECTOR AND NOT EMSCRIPTEN)
         else()
             pkg_check_modules(DBUS dbus-1)
             if (NOT DBUS_FOUND)
-                message(FATAL_ERROR "D-Bus not found. Please install it or set TRACY_GTK_FILESELECTOR to ON.")
+                message(FATAL_ERROR "Could not find D-Bus, you need to install it using your system package manager or set TRACY_GTK_FILESELECTOR to ON")
             endif()
             add_library(TracyDbus INTERFACE)
             target_include_directories(TracyDbus INTERFACE ${DBUS_INCLUDE_DIRS})
@@ -220,19 +186,12 @@ else()
         # Some distributions have pgk-config files for TBB, others don't.
 
         pkg_check_modules(TBB tbb)
-        if (TBB_FOUND)
+        if(TBB_FOUND)
             add_library(TracyTbb INTERFACE)
             target_include_directories(TracyTbb INTERFACE ${TBB_INCLUDE_DIRS})
             target_link_libraries(TracyTbb INTERFACE ${TBB_LINK_LIBRARIES})
         else()
-            CPMAddPackage(
-                NAME tbb
-                GITHUB_REPOSITORY oneapi-src/oneTBB
-                GIT_TAG v2021.12.0-rc2
-                OPTIONS "TBB_TEST OFF"
-            )
-            add_library(TracyTbb INTERFACE)
-            target_link_libraries(TracyTbb INTERFACE tbb)
+            message(FATAL_ERROR "Couldn't find TBB, you need to install it using your system package manager")
         endif()
     endif()
 endif()
diff --git a/cmake/version.cmake b/cmake/version.cmake
index 03813b44..37cdb840 100644
--- a/cmake/version.cmake
+++ b/cmake/version.cmake
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.10)
+cmake_minimum_required(VERSION 3.22)
 
 message("Parsing public/common/TracyVersion.hpp file")
 
diff --git a/csvexport/CMakeLists.txt b/csvexport/CMakeLists.txt
index a69c03a8..a9439927 100644
--- a/csvexport/CMakeLists.txt
+++ b/csvexport/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.16)
+cmake_minimum_required(VERSION 3.22)
 
 option(NO_ISA_EXTENSIONS "Disable ISA extensions (don't pass -march=native or -mcpu=native to the compiler)" OFF)
 option(NO_PARALLEL_STL "Disable parallel STL" OFF)
@@ -26,3 +26,16 @@ set(PROGRAM_FILES
 add_executable(${PROJECT_NAME} ${PROGRAM_FILES} ${COMMON_FILES} ${SERVER_FILES})
 target_link_libraries(${PROJECT_NAME} PRIVATE TracyServer TracyGetOpt)
 set_property(DIRECTORY ${CMAKE_CURRENT_LIST_DIR} PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})
+
+install(TARGETS ${PROJECT_NAME}
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+    CONFIGURATIONS Release
+)
+if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
+    install(
+        FILES
+            ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.wasm
+            ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.worker.js
+        DESTINATION ${CMAKE_INSTALL_BINDIR}
+    )
+endif()
diff --git a/import/CMakeLists.txt b/import/CMakeLists.txt
index fec2c7d0..22466fd3 100644
--- a/import/CMakeLists.txt
+++ b/import/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.16)
+cmake_minimum_required(VERSION 3.22)
 
 option(NO_ISA_EXTENSIONS "Disable ISA extensions (don't pass -march=native or -mcpu=native to the compiler)" OFF)
 option(NO_STATISTICS "Disable calculation of statistics" ON)
@@ -29,3 +29,18 @@ add_executable(tracy-import-fuchsia
 target_link_libraries(tracy-import-fuchsia PRIVATE TracyServer)
 
 set_property(DIRECTORY ${CMAKE_CURRENT_LIST_DIR} PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})
+
+install(TARGETS ${PROJECT_NAME}-chrome ${PROJECT_NAME}-fuchsia
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+    CONFIGURATIONS Release
+)
+if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
+    install(
+        FILES
+            ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-chrome.wasm
+            ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-chrome.worker.js
+            ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-fuchsia.wasm
+            ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-fuchsia.worker.js
+        DESTINATION ${CMAKE_INSTALL_BINDIR}
+    )
+endif()
diff --git a/profiler/CMakeLists.txt b/profiler/CMakeLists.txt
index 928aec3f..1df1faf4 100644
--- a/profiler/CMakeLists.txt
+++ b/profiler/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.16)
+cmake_minimum_required(VERSION 3.22)
 
 option(NO_FILESELECTOR "Disable the file selector" OFF)
 option(GTK_FILESELECTOR "Use the GTK file selector on Linux instead of the xdg-portal one" OFF)
@@ -180,11 +180,33 @@ if(NOT EMSCRIPTEN)
     endif()
 endif()
 
-if(EMSCRIPTEN)
+if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
     set_property(TARGET ${PROJECT_NAME} PROPERTY COMPILE_FLAGS "-sUSE_FREETYPE=1 -pthread -DIMGUI_IMPL_OPENGL_ES2")
-    set_property(TARGET ${PROJECT_NAME} PROPERTY LINK_FLAGS "-sASSERTIONS=0 -sUSE_GLFW=3 -sINITIAL_MEMORY=384mb -sALLOW_MEMORY_GROWTH=1 -sMAXIMUM_MEMORY=4gb -sWASM_BIGINT=1 -sPTHREAD_POOL_SIZE=4 -sEXPORTED_FUNCTIONS=_main,_nativeResize,_nativeOpenFile -sEXPORTED_RUNTIME_METHODS=ccall -sENVIRONMENT=web,worker --preload-file embed.tracy")
-
-    file(DOWNLOAD https://share.nereid.pl/i/embed.tracy ${CMAKE_CURRENT_BINARY_DIR}/embed.tracy EXPECTED_MD5 ca0fa4f01e7b8ca5581daa16b16c768d)
+    set_property(TARGET ${PROJECT_NAME} PROPERTY LINK_FLAGS "-sASSERTIONS=0 -sUSE_GLFW=3 -sINITIAL_MEMORY=384mb -sALLOW_MEMORY_GROWTH=1 -sMAXIMUM_MEMORY=4gb -sWASM_BIGINT=1 -sPTHREAD_POOL_SIZE=4 -sEXPORTED_FUNCTIONS=_main,_nativeResize,_nativeOpenFile -sEXPORTED_RUNTIME_METHODS=ccall -sENVIRONMENT=web,worker")
+
+    if(NOT EXAMPLE_TRACE_FILE STREQUAL "")
+        set(FILE_TO_PRELOAD "${CMAKE_CURRENT_BINARY_DIR}/embed.tracy")
+        file(DOWNLOAD ${EXAMPLE_TRACE_FILE}
+            ${FILE_TO_PRELOAD}
+            EXPECTED_MD5 ca0fa4f01e7b8ca5581daa16b16c768d
+        )
+        set_property(TARGET ${PROJECT_NAME} APPEND_STRING PROPERTY LINK_FLAGS " --preload-file ${FILE_TO_PRELOAD}")
+        install(FILES ${FILE_TO_PRELOAD} DESTINATION ${CMAKE_INSTALL_BINDIR})
+    endif()
     file(COPY ${CMAKE_CURRENT_LIST_DIR}/wasm/index.html DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
     file(COPY ${CMAKE_CURRENT_LIST_DIR}/wasm/httpd.py DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
 endif()
+
+install(TARGETS ${PROJECT_NAME}
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+    CONFIGURATIONS Release
+)
+if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
+    install(
+        FILES
+            ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.wasm
+            ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.worker.js
+            ${CMAKE_CURRENT_BINARY_DIR}/index.html
+        DESTINATION ${CMAKE_INSTALL_BINDIR}
+    )
+endif()
diff --git a/profiler/src/profiler/TracySourceView.cpp b/profiler/src/profiler/TracySourceView.cpp
index 5f3bc318..ebf0f8dd 100644
--- a/profiler/src/profiler/TracySourceView.cpp
+++ b/profiler/src/profiler/TracySourceView.cpp
@@ -3,7 +3,7 @@
 #include <sstream>
 #include <stdio.h>
 
-#include <capstone.h>
+#include <capstone/capstone.h>
 
 #include "imgui.h"
 #include "TracyCharUtil.hpp"
diff --git a/server/TracyWorker.cpp b/server/TracyWorker.cpp
index 5c297291..0ba35149 100644
--- a/server/TracyWorker.cpp
+++ b/server/TracyWorker.cpp
@@ -21,7 +21,7 @@
 #include <inttypes.h>
 #include <sys/stat.h>
 
-#include <capstone.h>
+#include <capstone/capstone.h>
 
 #define ZDICT_STATIC_LINKING_ONLY
 #include "../zstd/zdict.h"
diff --git a/update/CMakeLists.txt b/update/CMakeLists.txt
index 6c347e39..a7de22e2 100644
--- a/update/CMakeLists.txt
+++ b/update/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.16)
+cmake_minimum_required(VERSION 3.22)
 
 option(NO_ISA_EXTENSIONS "Disable ISA extensions (don't pass -march=native or -mcpu=native to the compiler)" OFF)
 option(NO_STATISTICS "Disable calculation of statistics" ON)
@@ -27,4 +27,17 @@ set(PROGRAM_FILES
 
 add_executable(${PROJECT_NAME} ${PROGRAM_FILES} ${COMMON_FILES} ${SERVER_FILES})
 target_link_libraries(${PROJECT_NAME} PRIVATE TracyServer TracyGetOpt)
-set_property(DIRECTORY ${CMAKE_CURRENT_LIST_DIR} PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})
\ No newline at end of file
+set_property(DIRECTORY ${CMAKE_CURRENT_LIST_DIR} PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})
+
+install(TARGETS ${PROJECT_NAME}
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+    CONFIGURATIONS Release
+)
+if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
+    install(
+        FILES
+            ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.wasm
+            ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.worker.js
+        DESTINATION ${CMAKE_INSTALL_BINDIR}
+    )
+endif()
