diff --git a/CMakeLists.txt b/CMakeLists.txt
index ad3f242..70b51e9 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -15,7 +15,7 @@
 #
 # SPDX-License-Identifier: libpng-2.0
 
-cmake_minimum_required(VERSION 3.6)
+cmake_minimum_required(VERSION 3.22)
 
 set(PNGLIB_MAJOR 1)
 set(PNGLIB_MINOR 6)
@@ -26,15 +26,10 @@ set(PNGLIB_VERSION ${PNGLIB_MAJOR}.${PNGLIB_MINOR}.${PNGLIB_REVISION})
 set(PNGLIB_ABI_VERSION ${PNGLIB_MAJOR}${PNGLIB_MINOR})
 set(PNGLIB_SHARED_VERSION ${PNGLIB_ABI_VERSION}.${PNGLIB_REVISION}.${PNGLIB_SUBREVISION})
 
-project(libpng
+project(png
         VERSION ${PNGLIB_VERSION}
         LANGUAGES C ASM)
 
-if(POLICY CMP0074)
-  # Allow find_package() to use the ZLIB_ROOT variable, if available.
-  cmake_policy(SET CMP0074 NEW)
-endif()
-
 include(CheckCSourceCompiles)
 include(GNUInstallDirs)
 
@@ -55,10 +50,14 @@ set(DFA_XTRA ""
     CACHE FILEPATH "File containing extra configuration settings")
 
 # Allow the users to switch on/off various library build types.
-option(PNG_SHARED "Build libpng as a shared library" ON)
-option(PNG_STATIC "Build libpng as a static library" ON)
+option(PNG_STATIC "Build ${PROJECT_NAME} as a static library" 1)
+option(PNG_SHARED "Build ${PROJECT_NAME} as a shared library" 0)
 if(APPLE)
-  option(PNG_FRAMEWORK "Build libpng as a framework bundle" ON)
+  option(PNG_FRAMEWORK "Build libpng as a framework bundle" 0)
+endif()
+
+if(PNG_STATIC AND (PNG_SHARED OR PNG_FRAMEWORK))
+    message(FATAL_ERROR "Cannot build STATIC and SHARED variant at the same time, you need to choose one")
 endif()
 
 # Allow the users to switch on/off the auxiliary build and test artifacts.
@@ -90,23 +89,7 @@ endif()
 option(PNG_DEBUG "Enable debug output" OFF)
 option(PNG_HARDWARE_OPTIMIZATIONS "Enable hardware optimizations" ON)
 
-# Allow the users to specify a custom location of zlib.
-# This option is deprecated, and no longer needed with CMake 3.12 and newer.
-# Under the CMake policy CMP0074, if zlib is being built alongside libpng as a
-# subproject, its location can be passed on to CMake via the ZLIB_ROOT variable.
-option(PNG_BUILD_ZLIB "Custom zlib location, else find_package is used" OFF)
-if(NOT PNG_BUILD_ZLIB)
-  find_package(ZLIB REQUIRED)
-elseif(POLICY CMP0074)
-  if("x${ZLIB_ROOT}" STREQUAL "x")
-    message(DEPRECATION
-            "The option PNG_BUILD_ZLIB has been deprecated; please use ZLIB_ROOT instead")
-  else()
-    message(SEND_ERROR
-            "The option PNG_BUILD_ZLIB=${PNG_BUILD_ZLIB} and "
-            "the variable ZLIB_ROOT=\"${ZLIB_ROOT}\" are mutually exclusive")
-  endif()
-endif()
+find_package(zlib CONFIG REQUIRED)
 
 if(UNIX AND NOT APPLE AND NOT BEOS AND NOT HAIKU AND NOT EMSCRIPTEN)
   find_library(M_LIBRARY m)
@@ -364,12 +347,12 @@ endif()
 
 include_directories(${CMAKE_CURRENT_BINARY_DIR})
 
-if(NOT AWK OR ANDROID OR IOS)
+if(TRUE)
   # No awk available to generate sources; use pre-built pnglibconf.h
   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/scripts/pnglibconf.h.prebuilt
                  ${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h)
   add_custom_target(png_genfiles)
-else()
+else() # how is this supposed to work, it gets errors about zlib versions mismatch even with the latest versions
   # Copy the awk scripts, converting their line endings to Unix (LF)
   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/scripts/checksym.awk
                  ${CMAKE_CURRENT_BINARY_DIR}/scripts/checksym.awk
@@ -592,7 +575,7 @@ else()
                             "${CMAKE_CURRENT_BINARY_DIR}/scripts/symbols.chk" png_scripts_symbols_chk
                             "${CMAKE_CURRENT_BINARY_DIR}/scripts/symbols.out" png_scripts_symbols_out
                             "${CMAKE_CURRENT_BINARY_DIR}/scripts/vers.out" png_scripts_vers_out)
-endif(NOT AWK OR ANDROID OR IOS)
+endif()
 
 # List the source code files.
 set(libpng_public_hdrs
@@ -606,7 +589,7 @@ set(libpng_private_hdrs
     pnginfo.h
     pngstruct.h
 )
-if(AWK AND NOT ANDROID AND NOT IOS)
+if(FALSE)
   list(APPEND libpng_private_hdrs "${CMAKE_CURRENT_BINARY_DIR}/pngprefix.h")
 endif()
 set(libpng_sources
@@ -669,68 +652,52 @@ endif()
 # Initialize the list of libpng library targets.
 set(PNG_LIBRARY_TARGETS "")
 
-# Initialize the libpng library file names.
-if(UNIX
-   OR (WIN32 AND NOT CMAKE_SHARED_LIBRARY_PREFIX STREQUAL "")
-   OR (WIN32 AND NOT CMAKE_STATIC_LIBRARY_PREFIX STREQUAL ""))
-  # We are on a Unix or Unix-like toolchain like the GNU toolchain on Windows.
-  # Library file names are expected to have an implicit prefix such as "lib".
-  # Let CMake prepend and append its usual prefixes and suffixes by default.
-  set(PNG_SHARED_OUTPUT_NAME "png${PNGLIB_ABI_VERSION}")
-  set(PNG_STATIC_OUTPUT_NAME "png${PNGLIB_ABI_VERSION}")
-else()
-  # We are, most likely, on a Windows toolchain like MSVC, Clang on Windows,
-  # Borland/Embarcadero, etc. We need to specify the "libpng" name explicitly.
-  # We also need to use a custom suffix, in order to distinguish between the
-  # shared import library name and the static library name.
-  set(PNG_SHARED_OUTPUT_NAME "libpng${PNGLIB_ABI_VERSION}")
-  set(PNG_STATIC_OUTPUT_NAME "libpng${PNGLIB_ABI_VERSION}_static")
-endif()
+set(PNG_SHARED_OUTPUT_NAME "${PROJECT_NAME}")
 
 if(PNG_SHARED)
-  add_library(png_shared SHARED ${libpng_sources})
-  add_dependencies(png_shared png_genfiles)
-  list(APPEND PNG_LIBRARY_TARGETS png_shared)
-  set_target_properties(png_shared PROPERTIES
+  add_library(${PROJECT_NAME} SHARED ${libpng_sources})
+  add_dependencies(${PROJECT_NAME} png_genfiles)
+  list(APPEND PNG_LIBRARY_TARGETS ${PROJECT_NAME})
+  set_target_properties(${PROJECT_NAME} PROPERTIES
                         OUTPUT_NAME "${PNG_SHARED_OUTPUT_NAME}"
                         DEBUG_POSTFIX "${PNG_DEBUG_POSTFIX}"
                         VERSION "${PNGLIB_SHARED_VERSION}"
                         SOVERSION "${PNGLIB_ABI_VERSION}")
   if(UNIX AND AWK)
     if(HAVE_LD_VERSION_SCRIPT)
-      set_target_properties(png_shared PROPERTIES
+      set_target_properties(${PROJECT_NAME} PROPERTIES
                             LINK_FLAGS "-Wl,--version-script='${CMAKE_CURRENT_BINARY_DIR}/libpng.vers'")
     elseif(HAVE_SOLARIS_LD_VERSION_SCRIPT)
-      set_target_properties(png_shared PROPERTIES
+      set_target_properties(${PROJECT_NAME} PROPERTIES
                             LINK_FLAGS "-Wl,-M -Wl,'${CMAKE_CURRENT_BINARY_DIR}/libpng.vers'")
     endif()
   endif()
   if(APPLE)
     # Avoid CMake's implicit compile definition "png_shared_EXPORTS".
-    set_target_properties(png_shared PROPERTIES DEFINE_SYMBOL "")
+    set_target_properties(${PROJECT_NAME} PROPERTIES DEFINE_SYMBOL "")
   elseif(WIN32)
     # Use the explicit compile definition "PNG_BUILD_DLL" for Windows DLLs.
-    set_target_properties(png_shared PROPERTIES DEFINE_SYMBOL PNG_BUILD_DLL)
+    set_target_properties(${PROJECT_NAME} PROPERTIES DEFINE_SYMBOL PNG_BUILD_DLL)
   endif()
-  target_include_directories(png_shared
+  target_include_directories(${PROJECT_NAME}
                              PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
-  target_include_directories(png_shared SYSTEM
-                             INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/libpng${PNGLIB_ABI_VERSION}>)
-  target_link_libraries(png_shared PUBLIC ZLIB::ZLIB ${M_LIBRARY})
+  target_include_directories(${PROJECT_NAME} SYSTEM
+                             INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
+  target_link_libraries(${PROJECT_NAME} PUBLIC zlib ${M_LIBRARY})
 endif()
 
 if(PNG_STATIC)
-  add_library(png_static STATIC ${libpng_sources})
-  add_dependencies(png_static png_genfiles)
-  list(APPEND PNG_LIBRARY_TARGETS png_static)
-  set_target_properties(png_static PROPERTIES
+  add_library(${PROJECT_NAME} STATIC ${libpng_sources})
+  add_dependencies(${PROJECT_NAME} png_genfiles)
+  list(APPEND PNG_LIBRARY_TARGETS ${PROJECT_NAME})
+  set_target_properties(${PROJECT_NAME} PROPERTIES
                         OUTPUT_NAME "${PNG_STATIC_OUTPUT_NAME}"
                         DEBUG_POSTFIX "${PNG_DEBUG_POSTFIX}")
-  target_include_directories(png_static
+  target_include_directories(${PROJECT_NAME}
                              PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
-  target_include_directories(png_static SYSTEM
-                             INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/libpng${PNGLIB_ABI_VERSION}>)
-  target_link_libraries(png_static PUBLIC ZLIB::ZLIB ${M_LIBRARY})
+  target_include_directories(${PROJECT_NAME} SYSTEM
+                             INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
+  target_link_libraries(${PROJECT_NAME} PUBLIC zlib ${M_LIBRARY})
 endif()
 
 if(PNG_FRAMEWORK AND NOT APPLE)
@@ -740,26 +707,25 @@ if(PNG_FRAMEWORK AND NOT APPLE)
 endif()
 
 if(PNG_FRAMEWORK)
-  add_library(png_framework SHARED ${libpng_sources})
-  add_dependencies(png_framework png_genfiles)
-  list(APPEND PNG_LIBRARY_TARGETS png_framework)
-  set_target_properties(png_framework PROPERTIES
+  add_library(${PROJECT_NAME} SHARED ${libpng_sources})
+  add_dependencies(${PROJECT_NAME} png_genfiles)
+  list(APPEND PNG_LIBRARY_TARGETS ${PROJECT_NAME})
+  set_target_properties(${PROJECT_NAME} PROPERTIES
                         FRAMEWORK TRUE
                         FRAMEWORK_VERSION "${PNGLIB_VERSION}"
                         MACOSX_FRAMEWORK_SHORT_VERSION_STRING "${PNGLIB_MAJOR}.${PNGLIB_MINOR}"
                         MACOSX_FRAMEWORK_BUNDLE_VERSION "${PNGLIB_VERSION}"
                         MACOSX_FRAMEWORK_IDENTIFIER "org.libpng.libpng"
                         XCODE_ATTRIBUTE_INSTALL_PATH "@rpath"
-                        PUBLIC_HEADER "${libpng_public_hdrs}"
                         OUTPUT_NAME "png"
                         DEBUG_POSTFIX "${PNG_DEBUG_POSTFIX}")
   # Avoid CMake's implicit compile definition "-Dpng_framework_EXPORTS".
-  set_target_properties(png_framework PROPERTIES DEFINE_SYMBOL "")
-  target_include_directories(png_framework
+  set_target_properties(${PROJECT_NAME} PROPERTIES DEFINE_SYMBOL "")
+  target_include_directories(${PROJECT_NAME}
                              PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
-  target_include_directories(png_framework SYSTEM
-                             INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/libpng${PNGLIB_ABI_VERSION}>)
-  target_link_libraries(png_framework PUBLIC ZLIB::ZLIB ${M_LIBRARY})
+  target_include_directories(${PROJECT_NAME} SYSTEM
+                             INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
+  target_link_libraries(${PROJECT_NAME} PUBLIC zlib ${M_LIBRARY})
 endif()
 
 if(NOT PNG_LIBRARY_TARGETS)
@@ -791,7 +757,7 @@ if(PNG_TESTS AND PNG_SHARED)
                    @ONLY)
     add_test(NAME "${_PAT_NAME}"
              COMMAND "${CMAKE_COMMAND}"
-                     "-DLIBPNG=$<TARGET_FILE:png_shared>"
+                     "-DLIBPNG=$<TARGET_FILE:${PROJECT_NAME}>"
                      "-DTEST_COMMAND=$<TARGET_FILE:${_PAT_COMMAND}>"
                      -P "${CMAKE_CURRENT_BINARY_DIR}/tests/${_PAT_NAME}.cmake")
   endfunction()
@@ -806,14 +772,14 @@ if(PNG_TESTS AND PNG_SHARED)
   set(PNGTEST_PNG "${CMAKE_CURRENT_SOURCE_DIR}/pngtest.png")
 
   add_executable(pngtest ${pngtest_sources})
-  target_link_libraries(pngtest PRIVATE png_shared)
+  target_link_libraries(pngtest PRIVATE ${PROJECT_NAME})
 
   png_add_test(NAME pngtest
                COMMAND pngtest
                FILES "${PNGTEST_PNG}")
 
   add_executable(pngvalid ${pngvalid_sources})
-  target_link_libraries(pngvalid PRIVATE png_shared)
+  target_link_libraries(pngvalid PRIVATE ${PROJECT_NAME})
 
   png_add_test(NAME pngvalid-gamma-16-to-8
                COMMAND pngvalid
@@ -859,7 +825,7 @@ if(PNG_TESTS AND PNG_SHARED)
                OPTIONS --transform)
 
   add_executable(pngstest ${pngstest_sources})
-  target_link_libraries(pngstest PRIVATE png_shared)
+  target_link_libraries(pngstest PRIVATE ${PROJECT_NAME})
 
   foreach(gamma_type 1.8 linear none sRGB)
     foreach(alpha_type none alpha)
@@ -914,7 +880,7 @@ if(PNG_TESTS AND PNG_SHARED)
   endforeach()
 
   add_executable(pngunknown ${pngunknown_sources})
-  target_link_libraries(pngunknown PRIVATE png_shared)
+  target_link_libraries(pngunknown PRIVATE ${PROJECT_NAME})
 
   png_add_test(NAME pngunknown-discard
                COMMAND pngunknown
@@ -946,7 +912,7 @@ if(PNG_TESTS AND PNG_SHARED)
                FILES "${PNGTEST_PNG}")
 
   add_executable(pngimage ${pngimage_sources})
-  target_link_libraries(pngimage PRIVATE png_shared)
+  target_link_libraries(pngimage PRIVATE ${PROJECT_NAME})
 
   png_add_test(NAME pngimage-quick
                COMMAND pngimage
@@ -960,11 +926,11 @@ endif()
 
 if(PNG_SHARED AND PNG_TOOLS)
   add_executable(pngfix ${pngfix_sources})
-  target_link_libraries(pngfix PRIVATE png_shared)
+  target_link_libraries(pngfix PRIVATE ${PROJECT_NAME})
   set(PNG_BIN_TARGETS pngfix)
 
   add_executable(png-fix-itxt ${png_fix_itxt_sources})
-  target_link_libraries(png-fix-itxt PRIVATE ZLIB::ZLIB ${M_LIBRARY})
+  target_link_libraries(png-fix-itxt PRIVATE zlib ${M_LIBRARY})
   list(APPEND PNG_BIN_TARGETS png-fix-itxt)
 endif()
 
@@ -1046,87 +1012,20 @@ if(NOT WIN32 OR CYGWIN OR MINGW)
   set(includedir  ${CMAKE_INSTALL_FULL_INCLUDEDIR})
   set(LIBS        "-lz -lm")
   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libpng.pc.in
-                 ${CMAKE_CURRENT_BINARY_DIR}/libpng${PNGLIB_ABI_VERSION}.pc
+                 ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc
                  @ONLY)
-  create_symlink(libpng.pc FILE libpng${PNGLIB_ABI_VERSION}.pc)
+  create_symlink(libpng.pc FILE ${PROJECT_NAME}.pc)
   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libpng-config.in
-                 ${CMAKE_CURRENT_BINARY_DIR}/libpng${PNGLIB_ABI_VERSION}-config
+                 ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config
                  @ONLY)
-  create_symlink(libpng-config FILE libpng${PNGLIB_ABI_VERSION}-config)
-endif()
-
-# Install.
-if(NOT SKIP_INSTALL_LIBRARIES AND NOT SKIP_INSTALL_ALL)
-  install(TARGETS ${PNG_LIBRARY_TARGETS}
-          EXPORT libpng
-          RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
-          LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
-          ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
-          FRAMEWORK DESTINATION ${CMAKE_INSTALL_LIBDIR})
-
-  if(PNG_SHARED)
-    # Create a symlink for libpng.dll.a => libpng16.dll.a on Cygwin
-    if(NOT WIN32 OR CYGWIN OR MINGW)
-      create_symlink(libpng${CMAKE_SHARED_LIBRARY_SUFFIX} TARGET png_shared)
-      install(FILES $<TARGET_LINKER_FILE_DIR:png_shared>/libpng${CMAKE_SHARED_LIBRARY_SUFFIX}
-              DESTINATION ${CMAKE_INSTALL_LIBDIR})
-    endif()
-  endif()
-
-  if(PNG_STATIC)
-    if(NOT WIN32 OR CYGWIN OR MINGW)
-      create_symlink(libpng${CMAKE_STATIC_LIBRARY_SUFFIX} TARGET png_static)
-      install(FILES $<TARGET_LINKER_FILE_DIR:png_static>/libpng${CMAKE_STATIC_LIBRARY_SUFFIX}
-              DESTINATION ${CMAKE_INSTALL_LIBDIR})
-    endif()
-  endif()
+  create_symlink(libpng-config FILE ${PROJECT_NAME}-config)
 endif()
 
-if(NOT SKIP_INSTALL_HEADERS AND NOT SKIP_INSTALL_ALL)
-  install(FILES ${libpng_public_hdrs}
-          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
-  install(FILES ${libpng_public_hdrs}
-          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/libpng${PNGLIB_ABI_VERSION})
-endif()
-if(NOT SKIP_INSTALL_EXECUTABLES AND NOT SKIP_INSTALL_ALL)
-  if(NOT WIN32 OR CYGWIN OR MINGW)
-    install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/libpng-config
-            DESTINATION ${CMAKE_INSTALL_BINDIR})
-    install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/libpng${PNGLIB_ABI_VERSION}-config
-            DESTINATION ${CMAKE_INSTALL_BINDIR})
-  endif()
-endif()
-
-if(NOT SKIP_INSTALL_PROGRAMS AND NOT SKIP_INSTALL_ALL)
-  install(TARGETS ${PNG_BIN_TARGETS}
-          RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
-endif()
+# --- installation
 
-if(NOT SKIP_INSTALL_FILES AND NOT SKIP_INSTALL_ALL)
-  # Install the man pages.
-  install(FILES libpng.3 libpngpf.3
-          DESTINATION ${CMAKE_INSTALL_MANDIR}/man3)
-  install(FILES png.5
-          DESTINATION ${CMAKE_INSTALL_MANDIR}/man5)
-  # Install the pkg-config files.
-  if(NOT CMAKE_HOST_WIN32 OR CYGWIN OR MINGW)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libpng.pc
-            DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
-    install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/libpng-config
-            DESTINATION ${CMAKE_INSTALL_BINDIR})
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libpng${PNGLIB_ABI_VERSION}.pc
-            DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
-    install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/libpng${PNGLIB_ABI_VERSION}-config
-            DESTINATION ${CMAKE_INSTALL_BINDIR})
-  endif()
-endif()
+set_target_properties(${PROJECT_NAME} PROPERTIES PUBLIC_HEADER "${libpng_public_hdrs}")
 
-# Create an export file that CMake users can include() to import our targets.
-if(NOT SKIP_INSTALL_EXPORT AND NOT SKIP_INSTALL_ALL)
-  install(EXPORT libpng
-          DESTINATION ${CMAKE_INSTALL_LIBDIR}/libpng
-          FILE libpng${PNGLIB_ABI_VERSION}.cmake)
-endif()
+include("${CMAKE_CURRENT_SOURCE_DIR}/Installing.cmake")
 
 # TODO: Create MSVC import lib for MinGW-compiled shared lib.
 # pexports libpng.dll > libpng.def
diff --git a/pngstruct.h b/pngstruct.h
index e591d94..a4f2b0f 100644
--- a/pngstruct.h
+++ b/pngstruct.h
@@ -27,7 +27,7 @@
    /* We must ensure that zlib uses 'const' in declarations. */
 #  define ZLIB_CONST
 #endif
-#include "zlib.h"
+#include <zlib/zlib.h>
 #ifdef const
    /* zlib.h sometimes #defines const to nothing, undo this. */
 #  undef const
diff --git a/pngtest.c b/pngtest.c
index 45ef66a..0e79fdd 100644
--- a/pngtest.c
+++ b/pngtest.c
@@ -40,7 +40,7 @@
 #ifdef PNG_ZLIB_HEADER
 #  include PNG_ZLIB_HEADER /* defined by pnglibconf.h from 1.7 */
 #else
-#  include <zlib.h>
+#  include <zlib/zlib.h>
 #endif
 
 #include "png.h"
